package modelo;

import java.io.*;
import java.sql.*;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.HashMap;
import Oracles.*;
import java.util.Iterator;
import java.util.GregorianCalendar;
import VehiculosWS.*;
import java.util.List;
import Cifrado.*;
import java.util.ArrayList;

public class Model {

    private transient Connection con;
    /*
    public static String userHandler = "43202536";
    public static String passUserHandler = "admin123";
    public static String aliasHandler = "pruebacatalina";
    public static String passAliasHandler = "pruebacatapwd";
    public static String keyStoreFile = "C:\\Users\\Civitrans\\Desktop\\runt\\Cert\\cliente.jks";
    public static String keyStoreType = "jks";
    public static String keyStorePass = "pruebacatapwd"; 8001151021
     */
    public static String userHandler = "";
    public static String userToken = "";
    public static String passUserHandler = "";
    public static String aliasHandler = "2";
    public static String passAliasHandler = "Ita2013a";
    public static String keyStoreFile = "C://Civitrans/transito/certificado/certificado.p12";
    public static String keyStoreType = "pkcs12";
    public static String keyStorePass = "Ita2013a";
    //Metodos analizadores y modificadores

    //Metodo para verificar si existe conexion abierta
    public boolean hayConexion() {
        return this.con != null;
    }
    private String driver;
    private String url;
    private String user = "";
    private String password = "";

    public Connection getCon() {
        return con;
    }

    public void setCon(Connection con) {
        this.con = con;
    }

    public String getDriver() {
        return driver;
    }

    public void setDriver(String driver) {
        this.driver = driver;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getUser() {
        return user;
    }

    public void setUser(String user) {
        this.user = user;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;

    }

    public void conectar() throws SQLException, IOException, Exception {
        setDriver("oracle.jdbc.OracleDriver");
        setUrl("jdbc:oracle:thin:@10.2.0.1:1521:ORCLCIV");
        //setUrl("jdbc:oracle:thin:@localhost:1521:xe");
        setUser("transito");
        String pass = "", encript = "";
        FileInputStream fstream = new FileInputStream("C:/Civitrans/transito/civitrans.sys");
        DataInputStream entrada = new DataInputStream(fstream);
        BufferedReader buffer = new BufferedReader(new InputStreamReader(entrada));
        String strLinea, cadena = "", strLinea1;
        int cont = 0;
        while ((strLinea = buffer.readLine()) != null) {
            // System.out.println ("LINEA : "+strLinea);
            cont = cont + 1;
        }
        entrada.close();
        FileInputStream fstream1 = new FileInputStream("C:/Civitrans/transito/civitrans.sys");
        DataInputStream entrada1 = new DataInputStream(fstream1);
        BufferedReader buffer1 = new BufferedReader(new InputStreamReader(entrada1));

        int a = 0;
        while ((strLinea1 = buffer1.readLine()) != null) {
            //       System.out.println ("LINEA2 : "+strLinea1);
            pass = strLinea1;
            if (a < (cont - 1)) {
                cadena = cadena + "" + pass + "\n";
            } else {
                cadena = cadena + "" + pass;
            }
            a++;
        }

        entrada1.close();

        encript = KeyStore.Desencriptar(cadena);//Encrypt.desencriptar(cadena);
        setPassword(encript);

        if (!hayConexion()) {
            if (driver == null) {
                throw new SQLException("No se ha definido el driver de conexion");
            }
            if (url == null) {
                throw new SQLException("No se ha especificado la url para la conexion");
            }
            try {
                Class.forName(driver).newInstance();
            } catch (Exception e) {
                throw new IOException("Error! No se ha logrado cargar el driver especificado");
            }
            con = DriverManager.getConnection(url, user, password);
        }
    }

//
//    public void conectar() throws SQLException, IOException {
//
//        if (!hayConexion()) {
//            try {
//                setDriver("oracle.jdbc.OracleDriver");
//                setUrl("jdbc:oracle:thin:@192.168.44.234:1521:ORCL");
//
//                if (!hayConexion()) {
//                    if (driver == null) {
//                        throw new SQLException("No se ha definido el driver de conexion");
//                    }
//                    if (url == null) {
//                        throw new SQLException("No se ha especificado la url para la conexion");
//                    }
//                    try {
//                        Connect conexion = new Connect();
//                        conexion.conectar();
//                        con = conexion.getCon();
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                        throw new IOException("Error! No se ha logrado cargar el driver especificado");
//                    }
//                }
//            } catch (Exception e) {
//                throw new IOException("Error! No se ha logrado cargar el driver especificado");
//            }
//        }
//    } 
//
//    public void conectar() throws SQLException, IOException {
//        setDriver("oracle.jdbc.OracleDriver");
//        setUrl("jdbc:oracle:thin:@192.168.66.171:1521:ORCL");
//        setUser("transito");
//        setPassword("lr04252");
//        if (!hayConexion()) {
//            if (driver == null) {
//                throw new SQLException("No se ha definido el driver de conexion");
//            }
//            if (url == null) {
//                throw new SQLException("No se ha especificado la url para la conexion");
//            }
//            try {
//                Class.forName(driver).newInstance();
//            } catch (Exception e) {
//                throw new IOException("Error! No se ha logrado cargar el driver especificado");
//            }
//            con = DriverManager.getConnection(url, user, password);
//        }
//    }
    //Metodo que retorna el listado de los grupos
    /* public LinkedList getListadoGrupos() {
    return this.listaGrupos;
    }
    //Metodo que retorna el listado de los parametros
    public LinkedList getListadoParametros() {
    return this.listaParametros;
    }
    //Metodo que retorna el listado de las marcas
    public LinkedList getListaMarcas() {
    return listaMarcas;
    }
    //Metodo que retorna el listado de las lineas
    public LinkedList getListaLineas() {
    return listaLineas;
    }
    //Metodo que retorna el listado de las carteras de los vehiculos
    public LinkedList getListaCartera() {
    return listaCarteras;
    }*/
    // Metodo para abrir la conexion con la base de datos.
    /**
     * ***** METODOS GRUPOS *******
     */
    // Metodo para ingresar un nuevo grupo
    public void registrarGrupo(Grupo grupo) throws SQLException {
        System.out.println("Entro en el registro del grupo");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("insert into GRUPOS values(?,?)");
            pst.setLong(1, grupo.getId_grupo());
            pst.setString(2, grupo.getNombre());
            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido registrar el grupo ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
    }

    // Metodo para generar el listado de los grupos resgistrados en la base de datos.
    public LinkedList listadoGrupos() throws SQLException {
        System.out.println("Entro en el listado de Grupos");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaGrupos = new LinkedList();

        try {

            pst = con.prepareStatement("select * from GRUPOS order by ID_GRUPO ");
            rst = pst.executeQuery();

            while (rst.next()) {

                listaGrupos.add(Grupo.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar los grupos ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

        return listaGrupos;
    }

    public void modificarGrupo(long id, Grupo grupo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("update GRUPOS set NOMBRE = ? where ID_GRUPO = ?");
            pst.setString(1, grupo.getNombre());
            pst.setLong(2, grupo.getId_grupo());

            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido modificar el grupo ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

    }

    public void SetIpCivitrans(String ipnueva) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareCall("{call ip_package.set_value_in_context(?)}");
            pst.setString(1, ipnueva);

            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido registrar el Contexto ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
    }

    /**
     * ***** METODOS PARAMETROS *******
     */
    //Metodo para generar el listado de parametros de un grupo especifico
    public LinkedList listadoParametros(long fk_grupo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaParametros = new LinkedList();

        try {

            pst = con.prepareStatement("select * from PARAMETROS where fk_grupo = ? order by NOMBRE");
            pst.setLong(1, fk_grupo);
            rst = pst.executeQuery();

            while (rst.next()) {

                listaParametros.add(Parametro.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar los parametros ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return listaParametros;
    }

    public LinkedList listadoParametrosOrderByCodigo(long fk_grupo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaParametros = new LinkedList();

        try {

            pst = con.prepareStatement("select * from PARAMETROS where fk_grupo = ? AND CODIGO IN(1,2,8,9,11,18,28) order by CODIGO");
            pst.setLong(1, fk_grupo);
            rst = pst.executeQuery();

            while (rst.next()) {

                listaParametros.add(Parametro.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar los parametros ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return listaParametros;
    }

    public java.util.HashMap crearHashParametros(int fk_grupo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.HashMap hash = new java.util.HashMap();
        try {
            pst = con.prepareStatement("select codigo,nombre from parametros where fk_grupo= ?"); // orden

            pst.setInt(1, fk_grupo);
            // sql
            rst = pst.executeQuery();
            while (rst.next()) {
                hash.put(rst.getString(1), rst.getString(2));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return hash;
    }

    public java.util.HashMap crearHashParametrosAbreviatura(int fk_grupo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.HashMap hash = new java.util.HashMap();
        try {
            pst = con.prepareStatement("select codigo,nombre_corto from parametros where fk_grupo= ?"); // orden

            pst.setInt(1, fk_grupo);
            // sql
            rst = pst.executeQuery();
            while (rst.next()) {
                hash.put(rst.getString(1), rst.getString(2));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return hash;
    }

    public void registrarParametro(Parametro parametro) throws SQLException {

        System.out.println("Entro en el registro del parametro");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("insert into PARAMETROS values(?,?,?,?,?)");
            pst.setLong(1, parametro.getId_parametro());
            pst.setString(2, parametro.getNombre());
            pst.setString(3, parametro.getNombreCorto());
            pst.setLong(4, parametro.getCodigo());
            pst.setLong(5, parametro.getFk_grupo());

            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido registrar el parametro " + e);

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
    }

    public int nregistros(String table, long cod, String param) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        String sql = "select count(*) from " + table + " where " + param + " = " + cod;
        Statement st = con.createStatement();
        ResultSet rst = null;
        int i = 0;
        try {

            //pst = con.prepareStatement("select count(*) from "+table);
            con.createStatement();
            rst = st.executeQuery(sql);
            rst.next();
            i = rst.getInt(1);

        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido registrar el parametro ");

        } finally {

            if (st != null) {
                st.close();
                st = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        //System.out.println("Resultado "+ rst.getInt(1)) ;
        return i;
    }

    /**
     * ************************************************
     */
    /*                    VEHICULOS                    */
    /**
     * ************************************************
     */
    /**
     * ************************************************
     */
    /*                    MARCAS                       */
    /**
     * ************************************************
     */
    public LinkedList listadoMarcas() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaMarcas = new LinkedList();

        try {

            pst = con.prepareStatement("select * from MARCAS ORDER BY NOMBRE");

            rst = pst.executeQuery();

            while (rst.next()) {

                listaMarcas.add(Marca.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar las marcas ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaMarcas;
    }

    /**
     * ************************************************
     */
    /*                  LINEAS                         */
    /**
     * ************************************************
     */
    public LinkedList listaLineas(long fk_marca) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaLineas = new LinkedList();

        try {

            pst = con.prepareStatement("select * from LINEAS where fk_marca = ? ORDER BY NOMBRE");
            pst.setLong(1, fk_marca);
            rst = pst.executeQuery();

            while (rst.next()) {

                listaLineas.add(Linea.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar las lineas ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return listaLineas;
    }

    //DESCUENTO
    public LinkedList crearListaCarteraPlaca(long fk_vehiculo, long id_usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaCarteras = new LinkedList();
        try {
            boolean swActualizo = actualizarInteresesCostasVehiculos(fk_vehiculo, id_usuario);
            if (!swActualizo) {
                throw new Exception("No pudo actualizar intereses");
            }
            pst = con.prepareStatement("select * from carteras where fk_vehiculo = ? and estado_cartera = 1 order by referencia,fecha_creacion"); // orden
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaCarteras.add(Cartera.Load(rst));
            }
        } catch (Exception exc) {
            exc.printStackTrace();
            System.out.println("No se pudo consultar la cartera del vehiculo");
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return listaCarteras;
    }

    /*
    public LinkedList crearListaCarteraPlaca(long fk_vehiculo, long id_usuario) throws SQLException {

    if (!hayConexion()) {
    throw new SQLException("NO HAY CONEXION");
    }
    PreparedStatement pst = null;
    ResultSet rst = null;
    LinkedList listaCarteras = new LinkedList();
    try {
    actualizarInteresesCostasVehiculos(fk_vehiculo, id_usuario);
    pst = con.prepareStatement("select * from carteras where fk_vehiculo = ? and estado_cartera = 1 order by fecha_creacion,referencia"); // orden
    pst.setLong(1, fk_vehiculo);
    rst = pst.executeQuery();
    while (rst.next()) {
    listaCarteras.add(Cartera.Load(rst));
    }
    } catch (Exception exc) {
    exc.printStackTrace();
    System.out.println("No se pudo consultar la cartera del vehiculo");
    } finally {
    if (pst != null) {
    pst.close();
    }
    if (rst != null) {
    rst.close();
    }
    }

    return listaCarteras;
    }
     * */
    public Cartera getCartera(long id_cartera) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select * from carteras where id_cartera = ?"); // orden

            pst.setLong(1, id_cartera);
            // sql
            rst = pst.executeQuery();
            if (rst.next()) {
                return Cartera.Load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public LinkedList crearListaConceptos(long fk_sede, String like) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaConceptos = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT C.* FROM CONCEPTOS C,SEDE_TRAMITE_CONCEPTOS V WHERE C.ID_CONCEPTO = V.FK_CONCEPTO AND V.FK_TRAMITE = 0 AND V.FECHA_FIN IS NULL AND FK_SEDE = ? AND C.NOMBRE LIKE ? ORDER BY C.ID_CONCEPTO"); // orden
            pst.setLong(1, fk_sede);
            pst.setString(2, like + "%");
            // sql
            rst = pst.executeQuery();
            while (rst.next()) {
                listaConceptos.add(Concepto.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaConceptos;
    }

    public Vehiculo consultarVehiculo(String placa) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {

            pst = con.prepareStatement("select * from Vehiculos where placa = ? and estado != 2 order by fecha_matricula desc");
            pst.setString(1, placa);
            rst = pst.executeQuery();

            while (rst.next()) {

                return Vehiculo.load(rst);

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public Concepto consultarConcepto(long id_concepto) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {

            pst = con.prepareStatement("select * from Conceptos where id_concepto = ?");
            pst.setLong(1, id_concepto);
            rst = pst.executeQuery();

            while (rst.next()) {

                return Concepto.load(rst);

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha consultar el concepto ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public LinkedList crearListaPropietarios(long fk_vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaPropietarios = new LinkedList();
        try {
            pst = con.prepareStatement("select * from Propietarios where fk_vehiculo= ? and fecha_fin is null"); // orden

            pst.setLong(1, fk_vehiculo);
            // sql
            rst = pst.executeQuery();

            while (rst.next()) {
                listaPropietarios.add(Propietario.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaPropietarios;
    }

    public LinkedList crearListaCarteraPersona(long fk_persona) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaCarteras = new LinkedList();
        try {
            pst = con.prepareStatement("select * from carteras where fk_persona= ? and estado_cartera = 1 order by fecha_creacion,referencia"); // orden

            pst.setLong(1, fk_persona);
            // sql
            rst = pst.executeQuery();
            listaCarteras = new LinkedList();
            while (rst.next()) {
                listaCarteras.add(Cartera.Load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaCarteras;
    }

    public Persona consultarPersona(int tipo, String documento)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Persona persona = null;
        try {
            pst = con.prepareStatement("Select * From personas Where tipo_documento=? and documento=?");
            pst.setInt(1, tipo);
            pst.setString(2, documento);
            rst = pst.executeQuery();
            if (rst.next()) {
                persona = Persona.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return persona;
    }

    public Persona consultarPersona(long id_persona)
            throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        Persona persona = null;
        try {
            pst = con.prepareStatement("Select * From personas Where id_persona =?");
            pst.setLong(1, id_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                persona = Persona.load(rst);
            }
        } catch (Exception ex) {
            System.out.println("Error Consultar persona ");
            ex.printStackTrace();

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return persona;
    }

    public Sede consultarSede(long fk_sede) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("Select * From Sedes Where id_sede =?");
            pst.setLong(1, fk_sede);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Sede.Load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List consultarSedes() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * From Sedes ORDER BY NOMBRE_CORTO");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Sede.Load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public Valor consultarValor(long fk_concepto, long fk_sede, long fk_tramite)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM SEDE_TRAMITE_CONCEPTOS WHERE FK_CONCEPTO = ? AND FK_SEDE = ? AND FK_TRAMITE = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, fk_concepto);
            pst.setLong(2, fk_sede);
            pst.setLong(3, fk_tramite);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Valor.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List consultarTramites(int clase, long fk_sede) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT T.* FROM SEDE_TRAMITES S,TRAMITES T WHERE S.FK_TRAMITE = T.ID_TRAMITE AND T.CLASE_TRAMITE = ? AND FK_SEDE = ? ORDER BY T.PESO,T.ID_TRAMITE");
            pst.setInt(1, clase);
            pst.setLong(2, fk_sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Tramite.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    /**
     * ************************************************
     */
    /*                  LINEAS                         */
    /**
     * ************************************************
     */
    public LinkedList crearListaDpto() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pSt = null;
        ResultSet rst = null;
        LinkedList listaDpto = new LinkedList();
        try {
            pSt = con.prepareStatement("select * from departamentos ORDER BY NOMBRE"); // orden
            // sql

            rst = pSt.executeQuery();

            while (rst.next()) {
                listaDpto.add(Departamento.load(rst));
            }
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pSt != null) {
                pSt.close();
            }
        }

        return listaDpto;
    }

    public LinkedList crearListaMunicipios(int departamento) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pSt = null;
        ResultSet rst = null;
        LinkedList listaMunp = new LinkedList();
        try {
            pSt = con.prepareStatement("select Id_Municipio,Nombre,Fk_Departamento from Municipios Where fk_departamento = ? ORDER BY CODIGO_MUNICIPIO"); // orden

            pSt.setInt(1, departamento);
            // sql
            rst = pSt.executeQuery();

            while (rst.next()) {
                listaMunp.add(Municipio.load(rst));
            }
        } finally {
            if (pSt != null) {
                pSt.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return listaMunp;
    }

    public String consultarDatosVehiculo(int grupo, long fk_vehiculo, int parametro)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            if (grupo == 1) {
                pst = con.prepareStatement("SELECT NOMBRE FROM PARAMETROS P, DATOS_VEHICULOS D "
                        + "WHERE P.CODIGO = TO_NUMBER(D.VALOR) AND P.FK_GRUPO = D.SUB_GRUPO_CODIGO "
                        + "AND D.GRUPO_CODIGO = ? AND D.FK_VEHICULO = ? AND D.SUB_GRUPO_CODIGO = ? AND FECHA_FIN IS NULL");
                pst.setInt(1, grupo);
                pst.setLong(2, fk_vehiculo);
                pst.setInt(3, parametro);
            } else if (grupo == 2) {
                pst = con.prepareStatement("SELECT VALOR FROM DATOS_VEHICULOS WHERE GRUPO_CODIGO = ? AND FK_VEHICULO = ? AND PARAM_CODIGO = ? AND FECHA_FIN IS NULL");
                pst.setInt(1, grupo);
                pst.setLong(2, fk_vehiculo);
                pst.setInt(3, parametro);
            }
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return "";
    }

    public String consultarParametroDatosVehiculo(int grupo, long fk_vehiculo, int parametro)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            if (grupo == 1) {
                pst = con.prepareStatement("SELECT D.VALOR FROM DATOS_VEHICULOS D WHERE D.GRUPO_CODIGO = ? AND D.FK_VEHICULO = ? AND D.SUB_GRUPO_CODIGO = ? AND FECHA_FIN IS NULL");
                pst.setInt(1, grupo);
                pst.setLong(2, fk_vehiculo);
                pst.setInt(3, parametro);
            } else if (grupo == 2) {
                pst = con.prepareStatement("SELECT VALOR FROM DATOS_VEHICULOS WHERE GRUPO_CODIGO = ? AND FK_VEHICULO = ? AND PARAM_CODIGO = ? AND FECHA_FIN IS NULL");
                pst.setInt(1, grupo);
                pst.setLong(2, fk_vehiculo);
                pst.setInt(3, parametro);
            }
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public String consultaDatosV(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        String r = "";

        try {
            pst = con.prepareStatement("select m.nombre from vehiculos v, lineas l,marcas m  where v.fk_linea = l.id_linea and l.fk_marca = m.id_marca and placa = ?"); // orden

            pst.setString(1, placa);
            // sql
            rst = pst.executeQuery();
            if (rst.next()) {
                r = rst.getString(1);
            } else {
                System.out.println("no se hallo ningun dato ");
            }
            System.out.println("Dato encontrado " + r);
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
            }
        }

        return r;
    }

    public String consultarDocumento(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT P.DOCUMENTO FROM PERSONAS P, VEHICULOS V, PROPIETARIOS O WHERE  O.FK_VEHICULO  ="
                    + "(SELECT max(ID_VEHICULO) FROM VEHICULOS WHERE PLACA = ? AND ESTADO IN (1,5)) AND O.FK_PERSONA = P.ID_PERSONA "
                    + "GROUP BY P.DOCUMENTO");

            pst.setString(1, placa.toUpperCase());
            // sql
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }

        } catch (Exception e) {
            System.out.println("Error al consultar el propioetario " + e);

            //  System.out.println("Dato encontrado " + r);
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
            }
        }

        return null;

    }

    public LinkedList consultaColor(String placa) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList colores = new LinkedList();
        try {

            pst = con.prepareStatement("SELECT C.ID_COLOR,C.NOMBRE FROM  COLORES C, HISTORICO_COLOR H WHERE H.FK_VEHICULO = (SELECT max(ID_VEHICULO) FROM VEHICULOS  WHERE PLACA = ? AND ESTADO IN (1,5)) AND H.FK_COLOR = C.ID_COLOR AND H.FECHA_FIN IS NULL");

            pst.setString(1, placa);
            // sql
            rst = pst.executeQuery();

            if (rst != null) {
                while (rst.next()) {
                    colores.add(Color.load(rst));
                }
            } else {
                System.out.println("No Colors");
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return colores;
    }

    public Marca consultaMarca(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("select m.id_marca,m.codigo,m.nombre from vehiculos v, lineas l,marcas m  where v.fk_linea = l.id_linea and l.fk_marca = m.codigo and placa =?"); // orden

            pst.setString(1, placa);
            // sql
            rst = pst.executeQuery();
            if (rst.next()) {
                return Marca.load(rst);
            }

        } catch (Exception e) {
            System.out.println("Error al consultar la marca " + e);

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;

    }

    public Linea consultaLinea(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("select l.id_linea,l.nombre,l.fk_marca from vehiculos v, lineas l where v.fk_linea = l.id_linea and placa = ?"); // orden

            pst.setString(1, placa);
            // sql
            rst = pst.executeQuery();
            if (rst.next()) {
                return (Linea.load(rst));
            }

        } catch (Exception e) {
            System.out.println("Error al consultar la linea " + e);

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;

    }

    public Vehiculo consultarVehiculoById(long id_vehiculo)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM VEHICULOS WHERE id_vehiculo=? order by 1 asc");
            pst.setLong(1, id_vehiculo);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Vehiculo.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void matricularVehiculo(Vehiculo vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta ");

        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("INSERT INTO VEHICULOS (PLACA,FK_SEDE,MODELO,CLASE_VEHICULO,SERVICIO,FECHA_MATRICULA,"
                    + "FK_LINEA,FK_DIVIPO,TIPO_IMPORTACION,DOCUMENTO_IMPORTACION,FK_USUARIO,FECHA_IMPORTACION,ESTADO,TIPO_DOC_IMPORTACION,FLAG,FK_MARCA) "
                    + "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");

            pst.setString(1, vehiculo.getPlaca());
            pst.setLong(2, vehiculo.getFk_sede());
            pst.setLong(3, vehiculo.getModelo());
            pst.setLong(4, vehiculo.getClase_vehiculo());
            pst.setLong(5, vehiculo.getServicio());
            pst.setDate(6, vehiculo.getFecha_matricula());
            pst.setLong(7, vehiculo.getFk_linea());
            pst.setLong(8, vehiculo.getFk_divipo());
            pst.setLong(9, vehiculo.getTipo_importacion());
            pst.setString(10, vehiculo.getDocumento_importacion());
            pst.setLong(11, vehiculo.getUsuario());
            pst.setDate(12, vehiculo.getFecha_importacion());
            pst.setLong(13, vehiculo.getEstado());
            pst.setLong(14, vehiculo.getTipo_doc_importacion());
            pst.setInt(15, 0);
            pst.setLong(16, vehiculo.getFk_marca());
            pst.execute();

        } catch (Exception e) {
            throw new SQLException("Error ingresando el vehiculo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    public void registrarDatosVehiculos(DatosVehiculo datos, int flag) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta ");

        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("INSERT INTO DATOS_VEHICULOS (FK_VEHICULO,GRUPO_CODIGO,PARAM_CODIGO,VALOR,"
                    + "FECHA_INI,FECHA_FIN,FECHA_SISTEMA,FK_USUARIO,SUB_GRUPO_CODIGO,FLAG) VALUES (?,?,?,?,?,?,?,?,?,?)");

            pst.setLong(1, datos.getFk_vehiculo());
            pst.setInt(2, datos.getGrupo_codigo());
            pst.setInt(3, datos.getParam_codigo());
            pst.setString(4, datos.getValor());
            pst.setDate(5, datos.getFecha_ini());
            pst.setDate(6, datos.getFecha_fin());
            pst.setDate(7, datos.getFecha_sistema());
            pst.setLong(8, datos.getFk_usuario());
            pst.setInt(9, datos.getSub_grupo_codigo());
            pst.setInt(10, flag);
            pst.execute();

        } catch (Exception e) {
            throw new SQLException("Error ingresando el vehiculo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    public void editarVehiculo(Vehiculo vehiculo, int flag) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta ");

        }

        PreparedStatement pst = null;

        try {

            String sentence = "";
            pst = con.prepareStatement("UPDATE VEHICULOS SET PLACA = ?,MODELO = ?,CLASE_VEHICULO = ?,SERVICIO = ?,FECHA_MATRICULA = ?,"
                    + "TIPO_IMPORTACION = ?,DOCUMENTO_IMPORTACION = ?,FK_USUARIO = ?,FECHA_IMPORTACION = ?,ESTADO = ?,TIPO_DOC_IMPORTACION = ?,"
                    + "FLAG = ?,FK_DIVIPO = ?,FK_LINEA = ?,FK_SEDE = ? WHERE ID_VEHICULO = ?");
            pst.setString(1, vehiculo.getPlaca());
            pst.setLong(2, vehiculo.getModelo());
            pst.setLong(3, vehiculo.getClase_vehiculo());
            pst.setLong(4, vehiculo.getServicio());
            pst.setDate(5, vehiculo.getFecha_matricula());
            pst.setLong(6, vehiculo.getTipo_importacion());
            pst.setString(7, vehiculo.getDocumento_importacion());
            pst.setLong(8, vehiculo.getUsuario());
            pst.setDate(9, vehiculo.getFecha_importacion());
            pst.setLong(10, vehiculo.getEstado());
            pst.setLong(11, vehiculo.getTipo_doc_importacion());
            pst.setInt(12, flag);
            pst.setLong(13, vehiculo.getFk_divipo());
            pst.setLong(14, vehiculo.getFk_linea());
            pst.setLong(15, vehiculo.getFk_sede());
            pst.setLong(16, vehiculo.getId_vehiculo());
            pst.executeUpdate();

        } catch (Exception e) {
            throw new SQLException("Error ingresando el vehiculo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarEstadoVehiculo(long fk_vehiculo, int estado, int flag) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta ");

        }

        PreparedStatement pst = null;

        try {

            String sentence = "";
            pst = con.prepareStatement("UPDATE VEHICULOS SET ESTADO = ?,FLAG = ? WHERE ID_VEHICULO = ?");
            pst.setInt(1, estado);
            pst.setInt(2, flag);
            pst.setLong(3, fk_vehiculo);
            pst.executeUpdate();

        } catch (Exception e) {
            throw new SQLException("Error actualizando estado vehiculo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public LinkedList listaAseguradoras() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList aseguradoras = new LinkedList();
        Aseguradora a = new Aseguradora();
        try {

            pst = con.prepareStatement("SELECT * FROM ASEGURADORAS WHERE FECHA_FIN IS NULL");
            rst = pst.executeQuery();
            while (rst.next()) {
                aseguradoras.add(Aseguradora.load(rst));
            }
        } catch (Exception e) {
            System.out.println("Error al consultar la aseguradora " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }

            pst = null;
            rst = null;

        }

        return aseguradoras;
    }

    public Sede consultarSede(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("Error no hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM SEDES S, RANGOS R , VENALES VE WHERE VE.FK_RANGO = R.ID_RANGO AND R.FK_SEDE = S.ID_SEDE AND VE.NUMERO = ?");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return Sede.Load(rst);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar la sede debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
            pst = null;
            rst = null;
        }
        return null;
    }

    public Divipo consultarDvipo(long depto, long mncipio) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("Error no hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement(" SELECT * FROM DIVIPO WHERE CODIGO LIKE '%000' AND FK_DEPARTAMENTO = ? AND FK_MUNICIPIO = ? ");
            pst.setLong(1, depto);
            pst.setLong(2, mncipio);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Divipo.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar la division politica debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }

            pst = null;
            rst = null;
        }
        return null;
    }

    /**
     * *****************************************************************************************************************
     */
    /**
     * *****************************************************************************************************************
     */
    /**
     * *****************************************************************************************************************
     */
    /**
     * *****************************************************************************************************************
     */
    public void adicionarDireccion(Direccion direccion)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into direcciones (descripcion,ubicacion,fecha,estado,fk_persona,fk_divipo,telefono) values(?,?,?,?,?,?,?)");
            pst.setString(1, direccion.getDescripcion());
            pst.setInt(2, direccion.getUbicacion());
            pst.setDate(3, direccion.getFecha());
            pst.setInt(4, direccion.getEstado());
            pst.setLong(5, direccion.getFk_persona());
            pst.setLong(6, direccion.getFk_divipo());
            pst.setString(7, direccion.getTelefono());

            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public long adicionarPersona(Persona persona)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet key = null;
        try {
            pst = con.prepareStatement("insert into personas (fecha_nac,grupo_sanguineo,rh,sexo,nombre_1,nombre_2,apellido_1,apellido_2,"
                    + "tipo_documento,documento,fk_divipo,email,celular,lugar_nacimiento,fecha_exp,fecha_registro)"
                    + " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new String[]{"ID_PERSONA"});

            pst.setDate(1, persona.getFecha_nac());
            pst.setString(2, persona.getGrupo_sanguineo());
            pst.setString(3, persona.getRh());
            pst.setString(4, persona.getSexo());
            pst.setString(5, persona.getNombre_1());
            pst.setString(6, persona.getNombre_2());
            pst.setString(7, persona.getApellido_1());
            pst.setString(8, persona.getApellido_2());
            pst.setInt(9, persona.getTipo_documento());
            pst.setString(10, persona.getDocumento());
            pst.setLong(11, persona.getFk_divipo());
            pst.setString(12, persona.getEmail());
            pst.setString(13, persona.getCelular());
            pst.setLong(14, persona.getFk_lugar_nacimiento());
            pst.setDate(15, persona.getFecha_exp());
            pst.setTimestamp(16, new java.sql.Timestamp(new java.util.Date().getTime()));

            pst.executeUpdate();

            key = pst.getGeneratedKeys();
            if (key != null) {
                if (key.next()) {
                    return key.getLong(1);
                }
            }

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (key != null) {
                key.close();
            }
        }
        return 0;
    }

    public String verificarPlaca(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT (SELECT COUNT(*) FROM VEHICULOS WHERE PLACA = ? AND ESTADO !=2)||(SELECT COUNT(*) FROM VENALES WHERE NUMERO = ? AND ESTADO = 3)  EXISTE FROM DUAL");
            pst.setString(1, placa);
            pst.setString(2, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } catch (Exception e) {
            throw new SQLException("Error al verificar la placa debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Tramite consultarTramite(long id_tramite) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM TRAMITES T WHERE ID_TRAMITE = ?");
            pst.setLong(1, id_tramite);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Tramite.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public String consultarParametroName(long fk_grupo, int codigoParametro) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT NOMBRE FROM PARAMETROS WHERE FK_GRUPO = ? AND CODIGO = ?");
            pst.setLong(1, fk_grupo);
            pst.setInt(2, codigoParametro);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return rst.getString(1);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar el parametro debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Parametro consultarParametro(int codigo, int fk_grupo)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Parametro parametro = null;
        try {
            pst = con.prepareStatement("Select id_parametro,nombre,nombre_corto,codigo,fk_grupo From parametros Where codigo=? and fk_grupo=?");
            pst.setInt(1, codigo);
            pst.setInt(2, fk_grupo);
            rst = pst.executeQuery();
            if (rst.next()) {
                parametro = Parametro.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return parametro;

    }

    public float consultarValorTramite(long sede, int tramite, int valor1, int valor2) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT SUM(VALOR) "
                    + "FROM SEDE_TRAMITE_CONCEPTOS S,TRAMITE_CONCEPTOS T,CONCEPTOS C "
                    + "WHERE S.FK_CONCEPTO = C.ID_CONCEPTO AND S.FK_CONCEPTO = T.FK_CONCEPTO "
                    + "AND S.FECHA_FIN IS NULL "
                    + "AND S.FK_TRAMITE = T.FK_TRAMITE "
                    + "AND S.FK_SEDE = ? "
                    + "AND S.FK_TRAMITE = ? "
                    + "AND (T.VALOR_1 = ? OR T.VALOR_1 IS NULL) "
                    + "AND (T.VALOR_2 = ? OR T.VALOR_2 IS NULL)");
            pst.setLong(1, sede);
            pst.setInt(2, tramite);
            pst.setInt(3, valor1);
            pst.setInt(4, valor2);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    public java.util.List consultarDetalleTramite(long sede, int tramite, int valor1, int valor2) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List listaValores = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT S.* "
                    + "FROM SEDE_TRAMITE_CONCEPTOS S,TRAMITE_CONCEPTOS T,CONCEPTOS C "
                    + "WHERE S.FK_CONCEPTO = C.ID_CONCEPTO AND S.FK_CONCEPTO = T.FK_CONCEPTO "
                    + "AND S.FECHA_FIN IS NULL "
                    + "AND S.FK_TRAMITE = T.FK_TRAMITE "
                    + "AND S.FK_SEDE = ? "
                    + "AND S.FK_TRAMITE = ? "
                    + "AND (T.VALOR_1 = ? OR T.VALOR_1 IS NULL) "
                    + "AND (T.VALOR_2 = ? OR T.VALOR_2 IS NULL)");
            pst.setLong(1, sede);
            pst.setInt(2, tramite);
            pst.setInt(3, valor1);
            pst.setInt(4, valor2);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaValores.add(Valor.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaValores;
    }

    public Valor consultarValor(long id_valor) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM SEDE_TRAMITE_CONCEPTOS WHERE ID_SEDE_TRAMITE_CONCEPTO = ?");
            pst.setLong(1, id_valor);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Valor.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public boolean consultarAtributo(long fk_sede, int tipo, int concepto) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT COUNT(*) FROM ATRIBUTO_CONCEPTOS WHERE FK_SEDE = ? AND TIPO_ATRIBUTO = ? AND FK_CONCEPTO = ? AND VALOR = 1");
            pst.setLong(1, fk_sede);
            pst.setInt(2, tipo);
            pst.setInt(3, concepto);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getInt(1) > 0;
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return false;
    }

    public java.util.List consultarConceptosbyAtributos(long fk_sede, int tipo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT FK_CONCEPTO FROM ATRIBUTO_CONCEPTOS WHERE FK_SEDE = ? AND TIPO_ATRIBUTO = ? AND VALOR = 1");
            pst.setLong(1, fk_sede);
            pst.setInt(2, tipo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(rst.getLong(1));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public void adicionarDetalleCartera(Detalle_Cartera detalleCartera) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            if (detalleCartera.getFk_pago() != 0) {
                pst = con.prepareStatement("insert into detalle_carteras (fk_cartera,fk_concepto,referencia,fecha,fecha_sistema,fk_usuario, estado,valor,fk_pago) values(?,?,?,?,?,?,?,?,?)");
            } else {
                pst = con.prepareStatement("insert into detalle_carteras (fk_cartera,fk_concepto,referencia,fecha,fecha_sistema,fk_usuario, estado,valor) values(?,?,?,?,?,?,?,?)");
            }
            pst.setLong(1, detalleCartera.getFk_cartera());
            pst.setLong(2, detalleCartera.getFk_concepto());
            pst.setString(3, detalleCartera.getReferencia());
            pst.setDate(4, detalleCartera.getFecha());
            pst.setTimestamp(5, detalleCartera.getFecha_sistema());
            pst.setLong(6, detalleCartera.getFk_usuario());
            pst.setInt(7, detalleCartera.getEstado());
            pst.setFloat(8, detalleCartera.getValor());
            if (detalleCartera.getFk_pago() != 0) {
                pst.setLong(9, detalleCartera.getFk_pago());
            }
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listarDetalleCartera(long fk_cartera) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listDetalleCartera = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT DC.* FROM DETALLE_CARTERAS DC,CONCEPTOS C WHERE DC.FK_CARTERA = ? AND DC.FK_CONCEPTO = C.ID_CONCEPTO AND DC.ESTADO = 1 ORDER BY C.PRIORIDAD DESC");
            pst.setLong(1, fk_cartera);
            rst = pst.executeQuery();
            while (rst.next()) {
                listDetalleCartera.add(Detalle_Cartera.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listDetalleCartera;
    }

    public java.util.List listarDetalleCarteraPagos(long fk_cartera, long fk_pago) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listDetalleCartera = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM DETALLE_CARTERAS WHERE FK_CARTERA = ? AND FK_PAGO = ?");
            pst.setLong(1, fk_cartera);
            pst.setLong(2, fk_pago);
            rst = pst.executeQuery();
            while (rst.next()) {
                listDetalleCartera.add(Detalle_Cartera.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listDetalleCartera;
    }

    public int consultarConsecutivo(long fk_sede, int tipo, int vigencia) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT NUMERO FROM CONSECUTIVOS WHERE FK_SEDE = ? AND TIPO = ? AND VIGENCIA = ?");
            pst.setLong(1, fk_sede);
            pst.setInt(2, tipo);
            pst.setInt(3, vigencia);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getInt(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    /**
     * ****************************************************************
     */
    /**
     * *********************************************************javier
     */
    public long adicionarPago(Pago pago) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("insert into pagos (numero_factura,valor_descuento,valor_iva,valor_total,tipo_pago,referencia,fk_sede,fk_taquilla,fk_tiquete,fecha,fecha_tipo_pago,estado,fk_persona,fk_usuario,observacion" + (pago.getFk_vehiculo() != 0 ? ",fk_vehiculo" : "") + (pago.getFk_banco() != 0 ? ",fk_banco" : "") + ") values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?" + (pago.getFk_vehiculo() != 0 ? ",?" : "") + (pago.getFk_banco() != 0 ? ",?" : "") + ")", new String[]{"ID_PAGO"});
            pst.setString(1, pago.getNumero_factura());
            pst.setFloat(2, pago.getValor_descuento());
            pst.setFloat(3, pago.getValor_iva());
            pst.setFloat(4, pago.getValor_total());
            pst.setInt(5, pago.getTipo_pago());
            pst.setString(6, pago.getNumero_tipo_pago());
            pst.setLong(7, pago.getFk_sede());
            pst.setLong(8, pago.getFk_taquilla());
            pst.setLong(9, pago.getFk_tiquete());
            pst.setDate(10, pago.getFecha());
            pst.setDate(11, pago.getFecha_tipo_pago());
            pst.setInt(12, pago.getEstado());
            pst.setLong(13, pago.getFk_persona());
            pst.setLong(14, pago.getFk_usuario());
            pst.setString(15, pago.getObservacion());
            int sig = 16;
            if (pago.getFk_vehiculo() != 0) {
                pst.setLong(16, pago.getFk_vehiculo());
                sig = 17;
            }
            if (pago.getFk_banco() != 0) {
                pst.setLong(sig, pago.getFk_banco());
            }
            pst.executeUpdate();

            rst = pst.getGeneratedKeys();
            if (rst != null) {
                if (rst.next()) {
                    return rst.getLong(1);
                }
            }
            return 0;

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
    }

    public long adicionarDetalleTiquete(Detalle_Tiquete detalle) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            String fk_label = "fk_cartera";
            long fk_valor = 0;
            if (detalle.getFk_cartera() != 0) {
                fk_label = "fk_cartera";
                fk_valor = detalle.getFk_cartera();
            }
            if (detalle.getFk_concepto() != 0) {
                fk_label = "fk_concepto";
                fk_valor = detalle.getFk_concepto();
            }
            if (detalle.getFk_tramite() != 0) {
                fk_label = "fk_tramite";
                fk_valor = detalle.getFk_tramite();
            }
            pst = con.prepareStatement("insert into detalle_tiquetes (cantidad,valor_unitario,valor_descuento,valor_iva,valor_total,fk_tiquete," + fk_label + ",estado) values(?,?,?,?,?,?,?,?)", new String[]{"ID_DET_TIQUETE"});

            pst.setInt(1, detalle.getCantidad());
            pst.setFloat(2, detalle.getValor_unitario());
            pst.setFloat(3, detalle.getValor_descuento());

            pst.setFloat(4, detalle.getValor_iva());
            pst.setFloat(5, detalle.getValor_total());
            pst.setLong(6, detalle.getFk_tiquete());
            pst.setLong(7, fk_valor);
            pst.setInt(8, detalle.getEstado());
            pst.executeUpdate();

            ResultSet key = pst.getGeneratedKeys();
            if (key != null) {
                if (key.next()) {
                    return key.getLong(1);
                }
            }

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    public long adicionarCartera(Cartera cartera)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet srk = null;
        try {
            pst = con.prepareStatement("insert into carteras (fk_persona,fk_sede,tipo,referencia,fecha_creacion,fecha_ingreso,"
                    + "valor,saldo,fecha_saldo,estado_cartera,fecha_estado,estado_vigencia,fecha_estado_vigencia,fk_usuario,fk_concepto" + (cartera.getFk_vehiculo() != 0 ? ",fk_vehiculo" : "") + ")"
                    + " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?" + (cartera.getFk_vehiculo() != 0 ? ",?" : "") + ")", new String[]{"ID_CARTERA"});

            pst.setLong(1, cartera.getFk_persona());
            pst.setLong(2, cartera.getFk_sede());
            pst.setInt(3, cartera.getTipo());
            pst.setString(4, cartera.getReferencia());
            pst.setDate(5, cartera.getFecha_creacion());
            pst.setDate(6, cartera.getFecha_ingreso());
            pst.setDouble(7, cartera.getValor());
            pst.setDouble(8, cartera.getSaldo());
            pst.setDate(9, cartera.getFecha_saldo());
            pst.setLong(10, cartera.getEstado_cartera());
            pst.setDate(11, cartera.getFecha_estado());
            pst.setInt(12, cartera.getEstado_vigencia());
            pst.setDate(13, cartera.getFecha_estado_vigencia());

            pst.setLong(14, cartera.getFk_usuario());
            pst.setLong(15, cartera.getFk_concepto());
            if (cartera.getFk_vehiculo() != 0) {
                pst.setLong(16, cartera.getFk_vehiculo());
            }
            pst.executeUpdate();
            srk = pst.getGeneratedKeys();
            if (srk != null) {
                if (srk.next()) {
                    return srk.getLong(1);
                }
            }

        } finally {
            if (srk != null) {
                srk.close();
            }
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    //Agregar intereses Creado por Jefrey Padilla
    public void actualizarCateraInteresesComp(long fk_cartera) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE CARTERAS SET SALDO = (SELECT SUM(VALOR) FROM DETALLE_CARTERAS WHERE FK_CARTERA = ? ) WHERE ID_CARTERA = ?");
            pst.setLong(1, fk_cartera);
            pst.setLong(2, fk_cartera);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Agregar Conceptos intereses Comparendos creado por Jefrey Padilla
    public void agregardetCateraInteresesComp(long fk_cartera, long fk_concepto, String referencia, Date fecha, long fk_usuario, int estado, long valor) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO DETALLE_CARTERAS(FK_CARTERA,FK_CONCEPTO,REFERENCIA,FECHA,FECHA_SISTEMA,FK_USUARIO,ESTADO,VALOR)VALUES(?,?,?,?,SYSDATE,?,?,?)");
            pst.setLong(1, fk_cartera);
            pst.setLong(2, fk_concepto);
            pst.setString(3, referencia);
            pst.setDate(4, fecha);
            pst.setLong(5, fk_usuario);
            pst.setLong(6, estado);
            pst.setLong(7, valor);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Consultar Detalle cartera intereses comparendos Creado por Jefrey Padilla
    public java.util.List<Detalle_Cartera> consultarDetalleCarteraIntComp(long fk_cartera) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Detalle_Cartera> dt = new java.util.LinkedList<Detalle_Cartera>();

        try {
            pst = con.prepareStatement("select * from detalle_carteras  where  fk_cartera = ?");
            pst.setLong(1, fk_cartera);
            rst = pst.executeQuery();
            while (rst.next()) {
                dt.add(Detalle_Cartera.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return dt;

    }

    //Consultar Detalle Financiacion By fk_cartera - Creado By Jefrey Padilla
    public Detalle_Financiacion consultarDetalleFinanciacionByFk_cartera(long fk_cartera) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM DETALLES_FINANCIACIONES WHERE FK_CARTERA = ?");
            pst.setLong(1, fk_cartera);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Detalle_Financiacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }

    //Consultar Finanaciacion Cartera By fk_financiacion - Creado por Jefrey Padilla
    public Financiacion_Cartera consultarfinanciacionCarteraByFk_financiacion(long fk_financiacion) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM FINANCIACION_CARTERA WHERE FK_FINANCIACION = ?");
            pst.setLong(1, fk_financiacion);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Financiacion_Cartera.Load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }

    public void adicionarComparendo(Comparendo comparendo)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into comparendos (fk_persona,fk_usuario_organismo,fk_sede,fk_infraccion,fk_agente,numero,"
                    + "fecha,lugar,placa,clase,servicio,tipo_infractor,licencia_transito,observaciones,fuga,accidente ,inmovilizacion , "
                    + "polca, firmado,estado ,observaciones_estado ,fecha_proceso ,fk_cartera,licencia_conduccion,categoria,fecha_vencimiento,"
                    + "sede_expedicion,parqueadero,fk_via)"
                    + " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

            pst.setLong(1, comparendo.getFk_persona());
            pst.setLong(2, comparendo.getFk_usuario_organismo());
            pst.setLong(3, comparendo.getFk_sede());
            pst.setLong(4, comparendo.getFk_infraccion());
            pst.setLong(5, comparendo.getFk_agente());
            pst.setString(6, comparendo.getNumero());
            pst.setTimestamp(7, comparendo.getFecha());
            pst.setString(8, comparendo.getLugar());
            pst.setString(9, comparendo.getPlaca());
            pst.setInt(10, comparendo.getClase());
            pst.setInt(11, comparendo.getServicio());
            pst.setInt(12, comparendo.getTipo_infractor());
            pst.setString(13, comparendo.getLicencia_transito());
            pst.setString(14, comparendo.getObservaciones());
            pst.setInt(15, comparendo.getFuga());
            pst.setInt(16, comparendo.getAccidente());
            pst.setInt(17, comparendo.getInmovilizacion());
            pst.setInt(18, comparendo.getPolca());
            pst.setInt(19, comparendo.getFirmado());
            pst.setLong(20, comparendo.getEstado());
            pst.setString(21, comparendo.getObservaciones_estado());
            pst.setTimestamp(22, comparendo.getFecha_proceso());
            pst.setLong(23, comparendo.getFk_cartera());
            pst.setString(24, comparendo.getLicencia_conduccion());
            pst.setString(25, comparendo.getCategoria());
            pst.setDate(26, comparendo.getFecha_vencimiento());
            pst.setLong(27, comparendo.getSede_expedicion());
            pst.setLong(28, comparendo.getFk_parqueadero());
            pst.setLong(29, comparendo.getfk_via());

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Creado por Jefrey
    public Detalle_Rango_Comparendo consultarAgentePorRangComp(String numero) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Detalle_Rango_Comparendo detalle_rango_comparendo = null;
        try {
            pst = con.prepareStatement("select * from detalle_rango_comparendos where numero = ?");
            pst.setString(1, numero);

            rst = pst.executeQuery();
            if (rst.next()) {
                detalle_rango_comparendo = Detalle_Rango_Comparendo.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return detalle_rango_comparendo;

    }

    public long adicionarFormulario(Formulario formulario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("INSERT INTO FORMULARIOS (FK_LINEA,FK_ASEGURADORA,FK_DIVIPO,NUMERO,FECHA_TRAMITE,PLACA,CLASE_VEHICULO,"
                    + "MODELO,COMBUSTIBLE,CARROCERIA,MOTOR,MOTOR_REG,CHASIS,CHASIS_REG,SERIE,SERIE_REG,TIPO_DOC_IMPORTACION,"
                    + "TIPO_IMPORTACION,ENTIDAD_REMATE,CODIGO_ADUANA,DOCUMENTO_IMPORTACION,FECHA_DOCUMENTO,SERVICIO,NRO_POLIZA,"
                    + "FECHA_POLIZA,OBSERVACIONES,LICENCIA_TRANSITO,SEDE_MOVIMIENTO,FK_RADICACION,MODALIDAD,FK_TRAMITE,RUNT,SIMIT,FK_PAGO,"
                    + "FECHA_INGRESO_RNMA,CONDICION_INGRESO,RODAJE,TIPO_CABINA,RUNT2,VIN,FK_MARCA,AREA_METROPOLITANA,MODALIDAD_SERVICIO,fk_departamento)"
                    + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new String[]{"ID_FORMULARIO"});
            pst.setLong(1, formulario.getFk_linea());
            pst.setLong(2, formulario.getFk_aseguradora());
            pst.setLong(3, formulario.getFk_divipo());
            pst.setString(4, formulario.getNumero());
            pst.setTimestamp(5, formulario.getFecha_tramite());
            pst.setString(6, formulario.getPlaca());
            pst.setInt(7, formulario.getClase_vehiculo());
            pst.setLong(8, formulario.getModelo());
            pst.setInt(9, formulario.getCombustible());
            pst.setInt(10, formulario.getCarroceria());
            pst.setString(11, formulario.getMotor());
            pst.setInt(12, formulario.getMotor_reg());
            pst.setString(13, formulario.getChasis());
            pst.setInt(14, formulario.getChasis_reg());
            pst.setString(15, formulario.getSerie());
            pst.setInt(16, formulario.getSerie_reg());
            pst.setInt(17, formulario.getTipo_doc_importacion());
            pst.setInt(18, formulario.getTipo_importacion());
            pst.setInt(19, formulario.getEntidad_remate());
            pst.setInt(20, formulario.getCodigo_aduana());
            pst.setString(21, formulario.getDocumento_importacion());
            pst.setDate(22, formulario.getFecha_documento());
            pst.setInt(23, formulario.getServicio());
            pst.setString(24, formulario.getNro_poliza());
            pst.setDate(25, formulario.getFecha_poliza());
            pst.setString(26, formulario.getObservaciones());
            pst.setString(27, formulario.getLicencia_transito());
            pst.setInt(28, formulario.getSede_movimiento());
            pst.setLong(29, formulario.getFk_radicacion());
            pst.setInt(30, formulario.getModalidad());
            pst.setLong(31, formulario.getFk_tramite());
            pst.setString(32, formulario.getRunt());
            pst.setString(33, formulario.getSimit());
            pst.setLong(34, formulario.getFk_pago());
            pst.setDate(35, formulario.getFecha_ingreso_rnma());
            pst.setString(36, formulario.getCondicion_ingreso());
            pst.setLong(37, formulario.getRodaje());
            pst.setLong(38, formulario.getTipo_cabina());
            pst.setString(39, formulario.getRunt2());
            pst.setString(40, formulario.getVin());
            pst.setLong(41, formulario.getFk_marca());
            pst.setString(42, formulario.getArea_metropolitana());
            pst.setLong(43, formulario.getModalidad_servicio());
            pst.setLong(44, formulario.getFk_departamento());
            pst.executeUpdate();

            rst = pst.getGeneratedKeys();
            if (rst != null) {
                if (rst.next()) {
                    return rst.getLong(1);
                }
            }
            return 0;
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
    }

    public void adicionarPerfil(Perfil perfil) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into CONF_PERFILES (nombre,descripcion ) values(?,?)");
            pst.setLong(1, perfil.getfk_usuario());
            pst.setString(2, perfil.getDescripcion());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarPerfilUsuario2(long usuario, long perfil) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO REG_PERFIL_USUARIOS(FK_USUARIO,FK_PERFIL,FECHA_REG)VALUES(?,?,(Select sysdate fecha_actual from dual))");
            pst.setLong(1, usuario);
            pst.setLong(2, perfil);

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarRadicacionAlerta(Radicacion_Alerta radicacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into radicacion_alerta (fk_formulario,fk_persona ,alerta,observaciones) values(?,?,?,?)");
            pst.setLong(1, radicacion.getFk_formulario());
            pst.setLong(2, radicacion.getFk_persona());
            pst.setInt(3, radicacion.getAlerta());
            pst.setString(4, radicacion.getObservaciones());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarRadicacionColores(Radicacion_Color radicacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into RADICACION_COLOR (fk_color,fk_formulario,gama,secuencia) values(?,?,?,?)");
            pst.setLong(1, radicacion.getFk_color());
            pst.setLong(2, radicacion.getFk_formulario());
            pst.setString(3, radicacion.getGama());
            pst.setInt(4, radicacion.getSequencia());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarRadDatosVehiculo(Radicacion_Dato_Vehiculo radicacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into radicacion_datos_vehiculo (fk_formulario,grupo,parametro,subgrupo,valor) values(?,?,?,?,?)");
            pst.setLong(1, radicacion.getFk_formulario());
            pst.setInt(2, radicacion.getGrupo());
            pst.setInt(3, radicacion.getParametro());
            pst.setInt(4, radicacion.getSubgrupo());
            pst.setString(5, radicacion.getValor());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarRecurso(Recurso recurso) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into conf_recursos (nombre,descripcion ,modulo) values(?,?,?)");
            pst.setString(1, recurso.getNombre());
            pst.setString(2, recurso.getDescripcion());
            pst.setInt(3, recurso.getModulo());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarRango(Rango rango) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into rangos (fk_sede,numero_ini,numero_fin,resolucion,fecha_resolucion,fecha_proceso,estado,tipo) values(?,?,?,?,?,?,?,?)");
            pst.setLong(1, rango.getFk_sede());
            pst.setString(2, rango.getNumero_ini());
            pst.setString(3, rango.getNumero_fin());
            pst.setString(4, rango.getResolucion());
            pst.setDate(5, rango.getFecha_resolucion());
            pst.setDate(6, rango.getFecha_proceso());
            pst.setInt(7, rango.getEstado());
            pst.setInt(8, rango.getTipo());

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarVenal(Venal venal) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into venales (fk_rango,numero,estado,fk_usuario) values(?,?,?,?)");
            pst.setLong(1, venal.getFk_rango());
            pst.setString(2, venal.getNumero());
            pst.setInt(3, venal.getEstado());
            pst.setLong(4, venal.getFk_usuario());
            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public long adicionarUsuario(Usuario usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO USUARIOS(FK_PERSONA,NOMBRE,PASSWORD,FECHA_INICIO,FECHA_FIN,FK_SEDE) VALUES(?,?,?,?,?,?)", new String[]{"ID_USUARIO"});
            pst.setLong(1, usuario.getFk_persona());
            pst.setString(2, usuario.getNombre());
            pst.setString(3, usuario.getPassword());
            pst.setDate(4, usuario.getFechaInicio());
            pst.setDate(5, usuario.getFechaFin());
            pst.setLong(6, usuario.getFk_sede());
            pst.execute();
            ResultSet keys = null;
            try {
                keys = pst.getGeneratedKeys();
                if (keys.next()) {
                    return keys.getLong(1);
                }
            } finally {
                if (keys != null) {
                    keys.close();
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    public void adicionarUsuarioCaja(UsuarioCaja usuarioCaja) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO USUARIO_CAJAS(FK_USUARIO,FK_SEDE,FK_CAJA,FECHA_INICIO) VALUES(?,?,?,?)");
            pst.setLong(1, usuarioCaja.getFk_usuario());
            pst.setLong(2, usuarioCaja.getFk_sede());
            pst.setLong(3, usuarioCaja.getFk_caja());
            pst.setDate(4, usuarioCaja.getFechaInicio());
            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarRecursoPerfil(Recurso_Perfil recurso_perfil) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into conf_perfil_recursos (fk_perfil,fk_recurso,fecha_inicio,fecha_final) values(?,?,?,?)");
            pst.setLong(1, recurso_perfil.getFk_perfil());
            pst.setLong(2, recurso_perfil.getFk_recurso());
            pst.setDate(3, recurso_perfil.getFecha_inicio());
            pst.setDate(4, recurso_perfil.getFecha_final());

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarPerfilUsuario(long usuario, long perfil) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO CONF_USUARIO_PERFILES(FK_USUARIO,FK_PERFIL) VALUES(?,?)");
            pst.setLong(1, usuario);
            pst.setLong(2, perfil);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarValoresCartera(long fk_cartera) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE CARTERAS SET SALDO = (SELECT SUM(VALOR) FROM DETALLE_CARTERAS WHERE FK_CARTERA = ? AND ESTADO = 1) WHERE ID_CARTERA = ?");
            pst.setLong(1, fk_cartera);
            pst.setLong(2, fk_cartera);
            pst.executeUpdate();
        } catch (SQLException ex) {
            System.out.println("Update saldo error: " + ex);
            throw new SQLException(ex.getMessage(), ex.getCause());
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarComparendoPatio(long fk_comparendo, long fk_patio, java.sql.Date fecha_ingreso, int estado, long fk_inspeccion, long fk_persona, int tipo)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO COMPARENDOS_PATIOS (fk_comparendo,fk_patio,fecha_ingreso,estado,fk_inspeccion,fk_persona,tipo) VALUES (?,?,?,?,?,?,?)");
            pst.setLong(1, fk_comparendo);
            pst.setLong(2, fk_patio);
            pst.setDate(3, fecha_ingreso);
            pst.setInt(4, estado);
            pst.setLong(5, fk_inspeccion);
            pst.setLong(6, fk_persona);
            pst.setInt(7, tipo);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Comparendo consultar_Comparendo(String numero) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Comparendo comparendo = null;
        try {
            pst = con.prepareStatement("select * from comparendos  where  numero = ?");
            pst.setString(1, numero);

            rst = pst.executeQuery();
            if (rst.next()) {
                comparendo = Comparendo.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return comparendo;

    }

    public Infraccion consultar_Infraccion(int numero) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Infraccion infraccion = null;
        try {
            pst = con.prepareStatement("select * from infracciones  where  numero = ?");
            pst.setInt(1, numero);

            rst = pst.executeQuery();
            if (rst.next()) {
                infraccion = Infraccion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return infraccion;

    }

    public Infraccion consultarInfraccion(long id_infraccion) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Infraccion infraccion = null;
        try {
            pst = con.prepareStatement("select * from infracciones  where  id_infraccion = ?");
            pst.setLong(1, id_infraccion);

            rst = pst.executeQuery();
            if (rst.next()) {
                infraccion = Infraccion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return infraccion;

    }

    public Radicacion consultar_Radicacion(long id_radicacion)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Radicacion radicacion = null;
        try {
            pst = con.prepareStatement("Select * From radicaciones Where  id_radicacion=?");
            pst.setLong(1, id_radicacion);
            rst = pst.executeQuery();
            if (rst.next()) {
                radicacion = Radicacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return radicacion;

    }

    public Radicacion consultarRadicacion(String numero, java.sql.Date fecha, long fk_sede)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Radicacion radicacion = null;

        try {
            pst = con.prepareStatement("Select * From radicaciones Where numero = ? and TO_NUMBER(SUBSTR(TO_CHAR(fecha,'dd/MM/yyyy'),7,4)) = ? and fk_sede = ?");
            pst.setString(1, numero);
            pst.setInt(2, fecha.getYear() + 1900);
            pst.setLong(3, fk_sede);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Radicacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;

    }

    public java.util.List<Radicacion> consultarRadicaciones(String fechaI, String fechaF, long fk_sede)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Radicacion> radicaciones = new java.util.LinkedList<Radicacion>();

        try {
            pst = con.prepareStatement("SELECT * FROM RADICACIONES WHERE (FECHA BETWEEN ? and ?) AND FK_SEDE = ? ORDER BY ID_RADICACION");
            pst.setString(1, fechaI);
            pst.setString(2, fechaF);
            pst.setLong(3, fk_sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                radicaciones.add(Radicacion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return radicaciones;

    }

    public String consultarPlacaByRadicacion(long fk_radicacion)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT F.PLACA FROM FORMULARIOS F WHERE F.FK_RADICACION = ?");
            pst.setLong(1, fk_radicacion);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return "";

    }

    public java.util.List consultar_Formularios(String placa)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("Select * From formularios Where placa = ?  order by fecha_tramite");
            pst.setString(1, placa);

            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Formulario.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lista;

    }

    public java.util.List consultarRadicacionesColores(long fk_formulario)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("Select * From radicacion_color Where fk_formulario = ?");
            pst.setLong(1, fk_formulario);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Radicacion_Color.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lista;

    }

    public java.util.List consultarRadicacionesPropietarios(long fk_formulario)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("Select * From radicacion_propietario Where fk_formulario = ?");
            pst.setLong(1, fk_formulario);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Radicacion_Propietario.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lista;

    }

    public java.util.List consultarRadicacionesEspecificaciones(long fk_formulario)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("Select * From radicacion_datos_vehiculo Where fk_formulario = ?");
            pst.setLong(1, fk_formulario);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Radicacion_Dato_Vehiculo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lista;

    }

    public Radicacion_Alerta consultarRadicacionAlerta(long fk_formulario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM RADICACION_ALERTA WHERE FK_FORMULARIO = ?");
            pst.setLong(1, fk_formulario);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Radicacion_Alerta.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Municipio consultarMunicipioDivipo(long divipo)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Municipio municipio = null;
        try {
            pst = con.prepareStatement("Select m.id_municipio,m.Nombre,m.fk_departamento from Divipo d,Municipios m where d.fk_municipio = m.id_municipio and d.id_divipo = ?");
            pst.setLong(1, divipo);
            rst = pst.executeQuery();
            if (rst.next()) {
                municipio = Municipio.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return municipio;

    }

    public Cartera consultarCartera(long id_cartera) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {

            pst = con.prepareStatement("select * from Carteras where id_cartera = ?");
            pst.setLong(1, id_cartera);
            rst = pst.executeQuery();

            while (rst.next()) {

                return Cartera.Load(rst);

            }
        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha consultar el concepto ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }

    public Valor_Infraccion consultarValorInfraccion(java.sql.Date fecha_ini, long fk_infraccion) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Valor_Infraccion valor_infraccion = null;
        try {
            pst = con.prepareStatement("select * from valorinfraccion v,infracciones i where ((? BETWEEN V.FECHA_INI AND V.FECHA_FIN) OR (? >= V.FECHA_INI AND V.FECHA_FIN IS NULL)) and v.fk_infraccion = i.id_infraccion and i.id_infraccion = ? ");
            pst.setDate(1, fecha_ini);
            pst.setDate(2, fecha_ini);
            pst.setLong(3, fk_infraccion);

            rst = pst.executeQuery();
            if (rst.next()) {
                valor_infraccion = Valor_Infraccion.load(rst);
            }//PBB084
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return valor_infraccion;

    }

    public void actualizarPersona(Persona persona, long id_persona)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE PERSONAS SET FECHA_NAC = ?,GRUPO_SANGUINEO = ?,RH = ?,SEXO = ?,NOMBRE_1 = ?,NOMBRE_2 = ?,APELLIDO_1= ?,APELLIDO_2 = ?,FK_DIVIPO = ?,EMAIL = ?,CELULAR = ?,LUGAR_NACIMIENTO = ?,FECHA_EXP = ? WHERE ID_PERSONA = ?");
            pst.setDate(1, persona.getFecha_nac());
            pst.setString(2, persona.getGrupo_sanguineo());
            pst.setString(3, persona.getRh());
            pst.setString(4, persona.getSexo());
            pst.setString(5, persona.getNombre_1());
            pst.setString(6, persona.getNombre_2());
            pst.setString(7, persona.getApellido_1());
            pst.setString(8, persona.getApellido_2());
            pst.setLong(9, persona.getFk_divipo());
            pst.setString(10, persona.getEmail());
            pst.setString(11, persona.getCelular());
            pst.setLong(12, persona.getFk_lugar_nacimiento());
            pst.setDate(13, persona.getFecha_exp());
            pst.setLong(14, id_persona);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarEstadoVenal(long id_venal, int estado, long fk_usuario)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update venales set estado=?,fk_usuario = ? where id_venal= ?");
            pst.setInt(1, estado);
            pst.setLong(2, fk_usuario);
            pst.setLong(3, id_venal);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarVenal(Venal venal)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            if (venal.getFk_radicacion() != 0) {
                pst = con.prepareStatement("UPDATE VENALES SET FK_RADICACION = ? WHERE ID_VENAL = ?");
                pst.setLong(1, venal.getFk_radicacion());
                pst.setLong(2, venal.getId_venal());
                pst.executeUpdate();
            }
            if (venal.getEstado() != 0) {
                pst = con.prepareStatement("UPDATE VENALES SET ESTADO = ? WHERE ID_VENAL = ?");
                pst.setInt(1, venal.getEstado());
                pst.setLong(2, venal.getId_venal());
                pst.executeUpdate();
            }
            if (venal.getFecha_utilizacion() != null) {
                pst = con.prepareStatement("UPDATE VENALES SET FECHA_UTILIZACION = ? WHERE ID_VENAL = ?");
                pst.setTimestamp(1, venal.getFecha_utilizacion());
                pst.setLong(2, venal.getId_venal());
                pst.executeUpdate();
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void finalizarPropietarios(long fk_vehiculo, java.sql.Date fecha, long fk_usuario)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE PROPIETARIOS SET PORCENTAJE = 0,FECHA_FIN = ?,FK_USUARIO = ? WHERE FK_VEHICULO = ? AND FECHA_FIN IS NULL AND FECHA_INI <= ?");
            pst.setDate(1, fecha);
            pst.setLong(2, fk_usuario);
            pst.setLong(3, fk_vehiculo);
            pst.setDate(4, fecha);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void finalizarEspecificaciones(long fk_vehiculo, java.sql.Date fecha, int grupo_codigo, int parametro, int sub_grupo_codigo, long fkUsuario, int flag)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DATOS_VEHICULOS SET FECHA_FIN = ?,FK_USUARIO = ?,FLAG = ? WHERE FK_VEHICULO = ? AND FECHA_FIN IS NULL AND GRUPO_CODIGO = ? AND PARAM_CODIGO = ? AND SUB_GRUPO_CODIGO = ? AND FECHA_INI <= ?");
            pst.setDate(1, fecha);
            pst.setLong(2, fkUsuario);
            pst.setInt(3, flag);
            pst.setLong(4, fk_vehiculo);
            pst.setInt(5, grupo_codigo);
            pst.setInt(6, parametro);
            pst.setInt(7, sub_grupo_codigo);
            pst.setDate(8, fecha);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void finalizarColores(long fk_vehiculo, java.sql.Date fecha, long fk_usuario)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE HISTORICO_COLOR SET FECHA_FIN = ?,FK_USUARIO = ? WHERE FK_VEHICULO = ? AND FECHA_FIN IS NULL");
            pst.setDate(1, fecha);
            pst.setLong(2, fk_usuario);
            pst.setLong(3, fk_vehiculo);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listarInfracciones() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listainfraccion = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * From infracciones");
            rst = pst.executeQuery();
            while (rst.next()) {
                listainfraccion.add(Infraccion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listainfraccion;
    }
    // Metodo Consultar Categoria

    public java.util.List listarCategorias() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listCategoria = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("select * from categorias where fecha_fin is null");
            rst = pst.executeQuery();
            while (rst.next()) {
                listCategoria.add(Categoria.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listCategoria;
    }

    public java.util.List listarVenales(long fk_rango, String placa, String estado) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listavenal = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM VENALES WHERE FK_RANGO = ? AND NUMERO LIKE ? AND (ESTADO = ? OR 0 = ?) ORDER BY NUMERO");
            pst.setLong(1, fk_rango);
            pst.setString(2, "%" + placa + "%");
            pst.setString(3, estado);
            pst.setString(4, estado);
            rst = pst.executeQuery();
            while (rst.next()) {
                listavenal.add(Venal.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listavenal;
    }

    public java.util.List listarPerfil() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaperfil = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT CP.ID_PERFIL ID_PERFIL, CP.FK_USUARIO FK_USUARIO, CP.DESCRIPCION DESCCRIPCION FROM USUARIOS US, CONF_PERFILES CP WHERE CP.FK_USUARIO = US.ID_USUARIO AND US.FECHA_FIN IS NULL");
            rst = pst.executeQuery();
            while (rst.next()) {
                listaperfil.add(Perfil.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaperfil;
    }

    public java.util.List listarRecursosByPerfil(int perfil) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaperfilrecursos = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT FK_RECURSO FROM  CONF_PERFIL_RECURSOS WHERE FK_PERFIL = ? AND FECHA_FINAL IS NULL ");
            pst.setInt(1, perfil);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaperfilrecursos.add(rst.getInt(1) + "");
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaperfilrecursos;
    }

    public void actualizarPerfilRecurso(long perfil, long recurso) throws SQLException {
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE CONF_PERFIL_RECURSOS SET FECHA_FINAL = SYSDATE WHERE FK_PERFIL = ? AND FK_RECURSO = ? AND FECHA_FINAL IS NULL ");
            pst.setLong(1, perfil);
            pst.setLong(2, recurso);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listarRecurso(int modulo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaRecursos = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * From conf_recursos where modulo=?");
            pst.setInt(1, modulo);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaRecursos.add(Recurso.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaRecursos;
    }

    //Creado by Jefrey
    public Agente consultarAgenteById(int id) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Agente agente = null;
        try {
            pst = con.prepareStatement("select * from agentes where id_agente = ?");
            pst.setInt(1, id);

            rst = pst.executeQuery();
            if (rst.next()) {
                agente = Agente.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return agente;

    }

    public Agente consultarAgente(int placa) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Agente agente = null;
        try {
            pst = con.prepareStatement("select * from agentes where placa = ?");
            pst.setInt(1, placa);

            rst = pst.executeQuery();
            if (rst.next()) {
                agente = Agente.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return agente;

    }

    public Rango consultar_Rango(long id_rango) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Rango rango = null;
        try {
            pst = con.prepareStatement("select * from rangos  where  id_rango = ?");
            pst.setLong(1, id_rango);

            rst = pst.executeQuery();
            if (rst.next()) {
                rango = Rango.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return rango;

    }

    public Agente consultar_Agente_PorId(long id_agente) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Agente agente = null;
        try {
            pst = con.prepareStatement("select * from agentes  where  id_agente = ?");
            pst.setLong(1, id_agente);

            rst = pst.executeQuery();
            if (rst.next()) {
                agente = Agente.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return agente;

    }

    public Licencia_Transito consultarLicenciaTransito(String numero) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Licencia_Transito lic_transito = null;
        try {
            pst = con.prepareStatement("select * from LICENCIA_TRANSITO  where NUMERO = ?");
            pst.setString(1, numero);

            rst = pst.executeQuery();
            if (rst.next()) {
                lic_transito = Licencia_Transito.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lic_transito;

    }

    public long consultarCarteraComparendo(long fk_concepto, String referencia, int estado) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        long id_cartera = 0;
        try {
            pst = con.prepareStatement("SELECT MAX(ID_CARTERA) FROM CARTERAS WHERE FK_CONCEPTO = ? AND REFERENCIA = ? AND ESTADO_CARTERA = ?");
            pst.setLong(1, fk_concepto);
            pst.setString(2, referencia);
            pst.setInt(3, estado);
            rst = pst.executeQuery();
            if (rst.next()) {
                id_cartera = rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return id_cartera;

    }

    public int consultarDiasLabores(java.sql.Date PARAM) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        int parametros = 0;
        try {
            pst = con.prepareStatement(" SELECT TO_NUMBER(SUBSTR(TO_DATE(SYSDATE,'DD/MM/YY') - ?,1,10))-(SELECT COUNT(*) FROM CALENDARIO_FESTIVOS WHERE FECHA BETWEEN ? AND TO_DATE(SYSDATE,'DD/MM/YY')) FROM DUAL");
            pst.setDate(1, PARAM);
            pst.setDate(2, PARAM);
            rst = pst.executeQuery();
            if (rst.next()) {
                parametros = rst.getInt(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return parametros;

    }

    public long consultarMaxRango() throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        long maxrango = 0;
        try {
            pst = con.prepareStatement("select max(id_rango) from  rangos");

            rst = pst.executeQuery();
            if (rst.next()) {
                maxrango = rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return maxrango;

    }

    public int consultar_Estado_Venales(long fk_rango, int estado) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        int resultado = 0;
        try {
            pst = con.prepareStatement("select count(*) from venales  where fk_rango = ? and estado = ?");
            pst.setLong(1, fk_rango);
            pst.setInt(2, estado);

            rst = pst.executeQuery();
            if (rst.next()) {
                resultado = rst.getInt(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return resultado;

    }

    public int consultar_Total_Venales(long fk_rango) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        int resultado = 0;
        try {
            pst = con.prepareStatement("select count(*) from venales  where fk_rango = ?");
            pst.setLong(1, fk_rango);

            rst = pst.executeQuery();
            if (rst.next()) {
                resultado = rst.getInt(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return resultado;

    }

    public Venal consultar_Venal(long id_venal) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        Venal venal = new Venal();
        try {
            pst = con.prepareStatement("select * from venales  where id_venal=? ");
            pst.setLong(1, id_venal);

            rst = pst.executeQuery();
            if (rst.next()) {
                venal = Venal.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return venal;

    }

    public Venal consultar_Venal(String numero, int estado) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        Venal venal = null;
        try {
            pst = con.prepareStatement("select * from venales  where NUMERO =? AND ESTADO = ?");
            pst.setString(1, numero);
            pst.setInt(2, estado);
            rst = pst.executeQuery();
            if (rst.next()) {
                venal = Venal.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return venal;

    }

    public java.util.List listarPatios(long fk_sede) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listPatios = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("select * from Patios where fk_sede=?");
            pst.setLong(1, fk_sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                listPatios.add(Patio.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listPatios;

    }

    public Patio consultarPatioComparendo(long fk_comparendo) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Patio patio = null;
        try {
            pst = con.prepareStatement("SELECT p.* FROM COMPARENDOS_PATIOS C, PATIOS P  WHERE C.FK_PATIO= P.ID_PATIO AND fk_comparendo=?");
            pst.setLong(1, fk_comparendo);

            rst = pst.executeQuery();
            if (rst.next()) {
                patio = Patio.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return patio;

    }

    public java.util.List listarDetalleConcepto(long fk_concepto_cartera, long fk_sede) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listDetalleConcepto = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("select * from DETALLE_CONCEPTOS where fk_concepto_cartera=? and fk_sede =? and fecha_fin is null");
            pst.setLong(1, fk_concepto_cartera);
            pst.setLong(2, fk_sede);

            rst = pst.executeQuery();
            while (rst.next()) {
                listDetalleConcepto.add(Detalle_Concepto.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listDetalleConcepto;
    }

    public java.util.List listConsultarRangos() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaRangos = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("select * from rangos order by 1");

            rst = pst.executeQuery();
            while (rst.next()) {
                listaRangos.add(Rango.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaRangos;
    }

    public String withZ(int n, String valor, String type, String lr) {
        String z = "";
        for (int i = 0; i < n - valor.length(); i++) {
            z += type;
        }
        if (lr.equals("l")) {
            return z + valor;
        } else {
            return valor + z;
        }
    }

    public java.util.Vector RangosPlacas(String inicio, String fin, int tipo) {
        java.util.Vector vectorRangos = new java.util.Vector();
        char[] vi = inicio.toCharArray();
        for (char l1 = vi[0]; l1 <= 'Z'; l1++) {
            vi[0] = 'A';
            for (char l2 = vi[1]; l2 <= 'Z'; l2++) {
                vi[1] = 'A';
                for (char l3 = vi[2]; l3 <= 'Z'; l3++) {
                    vi[2] = 'A';
                    for (char n1 = vi[3]; n1 <= '9'; n1++) {
                        vi[3] = '0';
                        vi[4] = ((tipo == 4 && vi[4] == '0' && n1 == '0') ? '1' : vi[4]);
                        for (char n2 = vi[4]; n2 <= '9'; n2++) {
                            vi[4] = '0';
                            for (char n3 = vi[5]; n3 <= (tipo != 4 ? '9' : vi[5]); n3++) {
                                vi[5] = (tipo != 4 ? '0' : vi[5]);
//                            	n2 = ((tipo == 0 && n2 == '0')? 1 : n2);
                                //System.out.println(l1+""+l2+""+l3+""+n1+""+n2+""+n3);
                                vectorRangos.addElement(l1 + "" + l2 + "" + l3 + "" + n1 + "" + n2 + "" + n3);
                                if ((l1 + "" + l2 + "" + l3 + "" + n1 + "" + n2 + "" + n3).equals(fin)) {
                                    return vectorRangos;
                                }
                            }
                        }
                    }
                }
            }
        }
        return null;
    }

    public java.util.Vector RangosPlacasInvertido(String inicio, String fin, int tipo) {
        java.util.Vector vectorRangos = new java.util.Vector();
        char[] vi = inicio.toCharArray();
        for (char l1 = vi[3]; l1 <= 'Z'; l1++) {
            vi[3] = 'A';
            for (char l2 = vi[4]; l2 <= 'Z'; l2++) {
                vi[4] = 'A';
                for (char l3 = vi[5]; l3 <= 'Z'; l3++) {
                    vi[5] = 'A';
                    for (char n1 = vi[0]; n1 <= '9'; n1++) {
                        vi[0] = '0';
                        vi[1] = ((tipo == 4 && vi[1] == '0' && n1 == '0') ? '1' : vi[1]);
                        for (char n2 = vi[1]; n2 <= '9'; n2++) {
                            vi[1] = '0';
                            for (char n3 = vi[2]; n3 <= (tipo != 4 ? '9' : vi[2]); n3++) {
                                vi[2] = (tipo != 4 ? '0' : vi[2]);
//                            	n2 = ((tipo == 0 && n2 == '0')? 1 : n2);
                                //System.out.println(l1+""+l2+""+l3+""+n1+""+n2+""+n3);
                                vectorRangos.addElement(n1 + "" + n2 + "" + n3 + "" + l1 + "" + l2 + "" + l3);
                                if ((n1 + "" + n2 + "" + n3 + "" + l1 + "" + l2 + "" + l3).equals(fin)) {
                                    return vectorRangos;
                                }
                            }
                        }
                    }
                }
            }
        }
        return null;
    }

    /**
     * **********************************************************************************************************************
     * *********************************************************************************************************************
     * ********************************8MARTES DIA
     * ANTES******************************************************************
     */
    public long adicionarTiquete(Tiquete tiquete) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("insert into tiquetes (numero_tiquete,fecha,valor_total_descuento,valor_total_iva,valor_total,estado,descripcion,fecha_proceso,fk_persona,fk_taquilla,fk_usuario,tipo_pago,referencia,fecha_referencia" + (tiquete.getFk_vehiculo() != 0 ? ",fk_vehiculo" : "") + (tiquete.getFk_banco() != 0 ? ",fk_banco" : "") + ",estado_preliquidacion) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?" + (tiquete.getFk_vehiculo() != 0 ? ",?" : "") + (tiquete.getFk_banco() != 0 ? ",?" : "") + ",?)", new String[]{"ID_TIQUETE"});

            // datos personales
            pst.setString(1, tiquete.getNumero_factura());
            pst.setDate(2, tiquete.getFecha());
            pst.setFloat(3, tiquete.getValor_total_descuento());
            pst.setFloat(4, tiquete.getValor_total_iva());
            pst.setFloat(5, tiquete.getValor_total());
            pst.setInt(6, tiquete.getEstado());
            pst.setString(7, tiquete.getDescripcion());
            pst.setTimestamp(8, tiquete.getFecha_proceso());
            pst.setLong(9, tiquete.getFk_persona());
            pst.setLong(10, tiquete.getFk_taquilla());
            pst.setLong(11, tiquete.getFk_usuario());
            pst.setInt(12, tiquete.getTipo_pago());
            pst.setString(13, tiquete.getReferencia());
            pst.setDate(14, tiquete.getFecha_referencia());

            int sig = 15;

            if (tiquete.getFk_vehiculo() != 0) {
                pst.setLong(15, tiquete.getFk_vehiculo());
                sig = 16;
            }
            if (tiquete.getFk_banco() != 0) {
                pst.setLong(sig, tiquete.getFk_banco());
                sig = 17;
            }

            if (tiquete.getEstado_preliquidacion() != 0) {
                pst.setInt(sig, tiquete.getEstado_preliquidacion());
            }

            pst.executeUpdate();

            rst = pst.getGeneratedKeys();
            if (rst != null) {
                if (rst.next()) {
                    return rst.getLong(1);
                }
            }
            return 0;

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
    }

    public Tiquete consultarTiqueteByFactura(String factura, java.sql.Date fecha) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM TIQUETES WHERE NUMERO_TIQUETE = ? AND FECHA = ?");
            pst.setString(1, factura);
            pst.setDate(2, fecha);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Tiquete.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;

    }

    public Tiquete consultarTiqueteByFactura(String factura) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM TIQUETES WHERE NUMERO_TIQUETE = ?");
            pst.setString(1, factura);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Tiquete.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;

    }

    public Pago consultarPagoByTiquete(long tiquete) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM PAGOS WHERE FK_TIQUETE = ?");
            pst.setLong(1, tiquete);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Pago.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;

    }

    public void actualizarConsecutivo(long fk_sede, int tipo, int vigencia) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE CONSECUTIVOS SET NUMERO = NUMERO + 1 WHERE FK_SEDE = ? AND TIPO = ? AND VIGENCIA = ?");
            pst.setLong(1, fk_sede);
            pst.setInt(2, tipo);
            pst.setInt(3, vigencia);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    // POR JAVIER 28 DE ENRO 21:12
    public void actualizarTaquilla(Taquilla taquilla, long id_taquilla)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update taquillas set valor_nota_debito = ?, valor_taquilla=?, estado=? ,fecha_fin = ? where id_taquilla= ?");
            pst.setFloat(1, taquilla.getValor_nota_debito());
            pst.setFloat(2, taquilla.getValor_taquilla());

            pst.setInt(3, taquilla.getEstado());
            pst.setTimestamp(4, taquilla.getFecha_fin());
            pst.setLong(5, id_taquilla);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
    // POR JAVIER 28 DE ENERO 21:13

    public long adicionarTaquilla(Taquilla taquilla) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("insert into taquillas (valor_nota_debito,valor_taquilla,estado,fk_sede,fk_caja,fk_usuario,fecha_ini,fecha_fin) values(?,?,?,?,?,?,?,?)", new String[]{"ID_TAQUILLA"});
            pst.setFloat(1, taquilla.getValor_nota_debito());
            pst.setFloat(2, taquilla.getValor_taquilla());
            pst.setInt(3, taquilla.getEstado());
            pst.setLong(4, taquilla.getFk_sede());
            pst.setLong(5, taquilla.getFk_caja());
            pst.setLong(6, taquilla.getFk_usuario());
            pst.setTimestamp(7, taquilla.getFecha_ini());
            pst.setTimestamp(8, taquilla.getFecha_fin());
            pst.execute();
            rst = pst.getGeneratedKeys();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    public void adicionarCaja(Caja caja) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into cajas (nombre,fk_sede,fecha_inicio) values(?,?,?)");
            pst.setString(1, caja.getNombre());
            pst.setLong(2, caja.getFk_sede());
            pst.setTimestamp(3, caja.getFecha_inicio());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Taquilla consultar_Taquilla(long fk_caja, long fk_sede, long fk_usuario) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select * from taquillas where fk_caja = ? and  fk_sede =? and fk_usuario = ? and fecha_fin IS NULL AND ESTADO = 1");
            pst.setLong(1, fk_caja);
            pst.setLong(2, fk_sede);
            pst.setLong(3, fk_usuario);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Taquilla.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Taquilla consultar_Taquilla_Actual(long fk_sede, long fk_usuario) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM TAQUILLAS WHERE FK_SEDE = ? AND FK_USUARIO = ? AND FECHA_FIN IS NULL AND ESTADO = 1");
            pst.setLong(1, fk_sede);
            pst.setLong(2, fk_usuario);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Taquilla.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List listarBanco() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listarBanco = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * From bancos where fecha_fin is null");
            rst = pst.executeQuery();
            while (rst.next()) {
                listarBanco.add(Banco.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listarBanco;
    }

    public java.util.List listarCaja() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listacaja = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("select * from cajas where fecha_fin is null");

            rst = pst.executeQuery();
            while (rst.next()) {
                listacaja.add(Caja.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listacaja;
    }

    public java.util.List listarPagos(int numero_factura, java.sql.Date fecha) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaPagos = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * From pagos where numero_factura=? and fecha=?");
            pst.setInt(1, numero_factura);
            pst.setDate(2, fecha);

            rst = pst.executeQuery();
            while (rst.next()) {
                listaPagos.add(Pago.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaPagos;
    }

    public java.util.List listarTaquilla(java.sql.Timestamp fecha_ini, java.sql.Timestamp fecha_fin, long fk_caja, long fk_usuario) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaTaquilla = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM TAQUILLAS WHERE (FECHA_INI BETWEEN ? AND ?) AND FK_CAJA = ? AND (FK_USUARIO = ? OR ? = 1) ORDER BY FECHA_INI");
            pst.setTimestamp(1, fecha_ini);
            pst.setTimestamp(2, fecha_fin);
            pst.setLong(3, fk_caja);
            pst.setLong(4, fk_usuario);
            pst.setLong(5, fk_usuario);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaTaquilla.add(Taquilla.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaTaquilla;
    }

    public java.util.List listarTiquete(long fk_taquilla) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaTiquete = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * From tiquetes  where fk_taquilla=? order by numero_tiquete");
            pst.setLong(1, fk_taquilla);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaTiquete.add(Tiquete.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaTiquete;
    }

    public float consultarValorTaquilla(long fk_taquilla) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        float valor_taquilla = 0;
        try {
            pst = con.prepareStatement("select sum(valor_total) from pagos where  fk_taquilla = ? and estado = 3");

            pst.setLong(1, fk_taquilla);

            rst = pst.executeQuery();
            if (rst.next()) {
                valor_taquilla = rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return valor_taquilla;

    }

    /**
     * **************************************** 29 de enero
     * **********************************************
     */
    public void actualizarCartera(long fk_cartera, float saldo, int estado, long fk_pago, java.sql.Date fecha_saldo, java.sql.Date fecha_estado, int tipo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        //Si tipo = 1, indica que modifica el saldo, el estado y el pago.
        //Si tipo = 2, indica que modifica unicamente el saldo.
        try {
            if (tipo == 1) {
                pst = con.prepareStatement("UPDATE CARTERAS SET SALDO = ?,ESTADO_CARTERA = ?,FK_PAGO = ?,FECHA_SALDO = ?,FECHA_ESTADO = ? WHERE ID_CARTERA = ?");
                pst.setFloat(1, saldo);
                pst.setInt(2, estado);
                pst.setLong(3, fk_pago);
                pst.setDate(4, fecha_saldo);
                pst.setDate(5, fecha_estado);
                pst.setLong(6, fk_cartera);
            } else if (tipo == 2) {
                pst = con.prepareStatement("UPDATE CARTERAS SET SALDO = ?,FECHA_SALDO = ? WHERE ID_CARTERA = ?");
                pst.setFloat(1, saldo);
                pst.setDate(2, fecha_saldo);
                pst.setLong(3, fk_cartera);
            } else if (tipo == 3) {
                pst = con.prepareStatement("UPDATE CARTERAS SET ESTADO_CARTERA = ? WHERE ID_CARTERA = ?");
                pst.setInt(1, estado);
                pst.setLong(2, fk_cartera);
            } else {
                pst = con.prepareStatement("UPDATE CARTERAS SET SALDO = ?,ESTADO_CARTERA = ?,FECHA_SALDO = ?,FECHA_ESTADO = ? WHERE ID_CARTERA = ?");
                pst.setFloat(1, saldo);
                pst.setInt(2, estado);
                pst.setDate(3, fecha_saldo);
                pst.setDate(4, fecha_estado);
                pst.setLong(5, fk_cartera);
            }
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarDetalleCartera(long detalle_cartera, int estado, long fk_pago, int tipo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            //Si tipo = 1 entonces modifica estado y pago
            //SI tipo = 2 entonces modifica solo estado
            if (tipo == 1) {
                pst = con.prepareStatement("UPDATE DETALLE_CARTERAS SET ESTADO = ?,FK_PAGO = ? WHERE ID_DETALLE_CARTERA = ? AND (VALOR >= 0 OR FK_CONCEPTO IN(1093,1094))");
                pst.setInt(1, estado);
                pst.setLong(2, fk_pago);
                pst.setLong(3, detalle_cartera);
            } else if (tipo == 2) {
                pst = con.prepareStatement("UPDATE DETALLE_CARTERAS SET ESTADO = ? WHERE ID_DETALLE_CARTERA = ? AND (VALOR >= 0 OR FK_CONCEPTO IN(1093,1094))");
                pst.setInt(1, estado);
                pst.setLong(2, detalle_cartera);
            }
            pst.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error Update 1094: " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.HashMap listarEspecificacionesVehiculo(String placa) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.HashMap hash = new java.util.HashMap();
        try {
            pst = con.prepareStatement("SELECT P.CODIGO,D.VALOR FROM DATOS_VEHICULOS D,VEHICULOS V,PARAMETROS P WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 2 AND "
                    + "D.PARAM_CODIGO = P.CODIGO AND P.FK_GRUPO = 40 AND D.FECHA_FIN IS NULL AND V.PLACA = ?"); // orden

            pst.setString(1, placa);
            rst = pst.executeQuery();
            while (rst.next()) {
                hash.put(rst.getString(1), rst.getString(2));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return hash;
    }

    public java.util.HashMap listarCaracteristicasVehiculo(String placa) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.HashMap hash = new java.util.HashMap();
        try {
            pst = con.prepareStatement("SELECT D.SUB_GRUPO_CODIGO,P.CODIGO FROM DATOS_VEHICULOS D,VEHICULOS V,PARAMETROS P,GRUPOS G WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 1 AND "
                    + "G.ID_GRUPO = D.SUB_GRUPO_CODIGO AND G.ID_GRUPO = P.FK_GRUPO AND D.VALOR = P.CODIGO AND D.FECHA_FIN IS NULL AND V.PLACA = ?"); // orden

            pst.setString(1, placa);
            rst = pst.executeQuery();
            while (rst.next()) {
                hash.put(rst.getString(1), rst.getString(2));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return hash;
    }

    public LinkedList lista_historico_color(String placa) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList historicos_colores = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM HISTORICO_COLOR H, VEHICULOS V WHERE H.FK_VEHICULO = V.ID_VEHICULO AND V.PLACA = ? AND FECHA_FIN IS NULL ORDER BY FECHA_INI DESC");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    historicos_colores.add(Historico_Color.load(rst));
                }
            }
        } catch (Exception e) {
            throw new SQLException("No se ha podido listar el historico color debido a  " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return historicos_colores;
    }

    /**
     * **** METODO QUE CONSULTA EL COLOR ******
     */
    public Color getColor(long id_color) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM COLORES WHERE ID_COLOR = ?");
            pst.setLong(1, id_color);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return Color.load(rst);
                }
            }
        } catch (Exception e) {
            throw new SQLException("No se ha podido un error al listar el historico color");
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    /**
     * ***** METODO PARA EXTRAER EL NOMBRE DEL DEPARTAMENTO Y EL MUNICPIO A
     * PARTIR DE UNA DIVISION POLITICA *******
     */
    public Divipo getDivipo(long id_divipo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM DIVIPO WHERE ID_DIVIPO = ?");
            pst.setLong(1, id_divipo);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return Divipo.load(rst);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar la Divipo de id " + id_divipo);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    /**
     * ************** METODO QUE CONSULTA LOS PROPIETARIOS DE UN VEHICULO
     * ***********************
     */
    public LinkedList consultaPropietarios(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList propietarios = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT P.* FROM PROPIETARIOS P, VEHICULOS V WHERE P.FK_VEHICULO = V.ID_VEHICULO AND V.PLACA = ? AND P.FECHA_FIN IS NULL");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    propietarios.add(Propietario.load(rst));
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar los propietarios del vehiculo de placa " + placa);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return propietarios;
    }

    /**
     * ********************METODO QUE CONSULTA LA ALERTA PARA UN
     * VEHICULO**********************
     */
    public Alerta consultarAlerta(long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM ALERTAS WHERE FK_VEHICULO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Alerta.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar las aletas debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    /**
     * ****************** METODO QUE GENERA LOS DATOS DE LA RADICACION
     * *******************
     */
    public long adicionarDatosRadicacion(Radicacion radicacion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RADICACIONES (NUMERO,FK_PERSONA,FK_SEDE,FK_USUARIO,ESTADO,OBSERVACIONES,FECHA) VALUES (?,?,?,?,?,?,?)", new String[]{"ID_RADICACION"});
            pst.setString(1, radicacion.getNumero());
            pst.setLong(2, radicacion.getFk_persona());
            pst.setLong(3, radicacion.getFk_sede());
            pst.setLong(4, radicacion.getFk_usuario());
            pst.setInt(5, radicacion.getEstado());
            pst.setString(6, radicacion.getObservaciones());
            pst.setDate(7, radicacion.getFecha());
            pst.execute();

            java.sql.ResultSet rst = pst.getGeneratedKeys();
            if (rst != null) {
                if (rst.next()) {
                    return rst.getLong(1);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al adicionar la radicacion " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    public long getId_radicacion(int consecutivo, java.sql.Date fecha, long fk_sede) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT ID_RADICACION FROM RADICACIONES WHERE NUMERO = ? AND FECHA = ? AND FK_SEDE = ?");
            pst.setInt(1, consecutivo);
            pst.setDate(2, fecha);
            pst.setLong(3, fk_sede);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return rst.getLong(1);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar el numero de la radicacion debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return -1;
    }

    /**
     * *********** METODO PARA CONSULTAR EL SEGURO ****************
     */
    public Seguro consultarSeguro(long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM SEGUROS WHERE FK_VEHICULO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return Seguro.load(rst);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar la aseguradora debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    /**
     * ****************** METODO PARA OBTENER LA LIOCENCIA DE TRANSITO MEDIANTE
     * EL ID DE UN VEHICULO *********************
     */
    public Licencia_Transito getLicencia(long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM LICENCIA_TRANSITO WHERE FK_VEHICULO = ? AND ESTADO = 1");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Licencia_Transito.load(rst);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al obtener la licencia de transito " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public boolean tieneAlertas(long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT COUNT(*) FROM ALERTAS WHERE FK_VEHICULO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    if (rst.getLong(1) > 0) {
                        return true;
                    }
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return false;
    }

    public boolean tieneEmbargos(long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT COUNT(*) FROM EMBARGOS WHERE FK_VEHICULO = ? AND FECHA_LEVANTAMIENTO IS NULL");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    if (rst.getLong(1) > 0) {
                        return true;
                    }
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return false;
    }

    /**
     * ***************************METODO PARA VALIDAR QUE LS SERIE NO EXISTA
     * PARA NINGUN VEHICULO ACTIVO*******************************
     */
    public String verificaSerie(String serie, String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT P.CODIGO,P.NOMBRE,D.VALOR FROM DATOS_VEHICULOS D,VEHICULOS V,PARAMETROS P WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 2 AND "
                    + "D.PARAM_CODIGO = P.CODIGO AND P.FK_GRUPO = 40 AND D.FECHA_FIN IS NULL AND V.PLACA != ? AND P.CODIGO = 21 AND D.VALOR = ? AND V.ESTADO IN(1,5)");
            pst.setString(1, placa);
            pst.setString(2, serie);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return rst.getString(1);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    /**
     * ***************************METODO PARA VALIDAR QUE EL MOTOR NO EXISTA
     * PARA NINGUN VEHICULO ACTIVO*******************************
     */
    public String verificaMotor(String motor, String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT P.CODIGO,P.NOMBRE,D.VALOR FROM DATOS_VEHICULOS D,VEHICULOS V,PARAMETROS P WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 2 AND "
                    + "D.PARAM_CODIGO = P.CODIGO AND P.FK_GRUPO = 40 AND D.FECHA_FIN IS NULL AND V.PLACA != ? AND P.CODIGO = 19 AND D.VALOR = ? AND V.ESTADO IN(1,5)");
            pst.setString(1, placa);
            pst.setString(2, motor);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return rst.getString(1);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    /**
     * ***************************METODO PARA VALIDAR QUE EL CHASIS NO EXISTA
     * PARA NINGUN VEHICULO ACTIVO*******************************
     */
    public String verificaChasis(String chasis) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT PLACA FROM VEHICULOS WHERE CHASIS = ? AND (ESTADO = 1 OR ESTADO = 5)");
            pst.setString(1, chasis);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return rst.getString(1);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
        return null;
    }

    /**
     * ***************** CONSULTA SUMATORIA DE LOS COMPARENDOS DE UNA PERSONA
     * *************************
     */
    public float consultaTotalCarterasPersona(long fk_persona) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT SUM(SALDO) FROM CARTERAS WHERE FK_PERSONA = ? AND ESTADO_CARTERA = 1 AND TIPO != 3 ");
            pst.setLong(1, fk_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    public HashMap getSaldoPropietarios(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        HashMap saldos = new HashMap();
        try {
            pst = con.prepareStatement("SELECT CAR.FK_PERSONA,SUM(CAR.SALDO) FROM CARTERAS CAR, PROPIETARIOS PRO,PERSONAS PER, VEHICULOS VEH WHERE "
                    + "CAR.FK_PERSONA = PRO.FK_PERSONA AND PRO.FK_VEHICULO = VEH.ID_VEHICULO AND PRO.FK_PERSONA = PER.ID_PERSONA "
                    + "AND  VEH.PLACA = ?  AND CAR.ESTADO_CARTERA = 1 AND PRO.FECHA_FIN IS NULL GROUP BY CAR.FK_PERSONA");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            while (rst.next()) {
                saldos.put(rst.getLong(1), rst.getLong(2));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return saldos;
    }

    // Modulos del Menu Tramites by Jefrey Padilla
    public java.util.List<Modulos> ConsultarModulosByUsuarioTramites(long fk_perfil) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Modulos> modulos = new java.util.LinkedList<Modulos>();
        try {
            pst = con.prepareStatement("select cr.modulo codigo, SUBSTR(p.NOMBRE,11) Modulo  from conf_perfil_recursos cp, conf_recursos cr, parametros p where fk_perfil = ? and cp.fk_recurso = cr.id_recurso and p.fk_grupo = 323 and p.nombre like 'MOD%' and p.codigo = cr.modulo and cr.tipo_menu is not null and cp.fecha_final is null and cr.modulo in (8,10,15,16) group by cr.modulo, p.nombre order by cr.modulo");
            pst.setLong(1, fk_perfil);
            rst = pst.executeQuery();
            while (rst.next()) {
                modulos.add(Modulos.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException(e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return modulos;
    }

    // Modulos del Menu by Jefrey Padilla
    public java.util.List<Modulos> ConsultarModulosByUsuario(long fk_perfil) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Modulos> modulos = new java.util.LinkedList<Modulos>();
        try {
            pst = con.prepareStatement("select cr.modulo codigo, SUBSTR(p.NOMBRE,11) Modulo  from conf_perfil_recursos cp, conf_recursos cr, parametros p where fk_perfil = ? and cp.fk_recurso = cr.id_recurso and p.fk_grupo = 323 and p.nombre like 'MOD%' and p.codigo = cr.modulo and cr.tipo_menu is not null and cp.fecha_final is null and cr.modulo not in (8,10,15,16) group by cr.modulo, p.nombre order by cr.modulo");
            pst.setLong(1, fk_perfil);
            rst = pst.executeQuery();
            while (rst.next()) {
                modulos.add(Modulos.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException(e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return modulos;
    }

    //Consultar Modulos por perfil - Creado por Jefrey Padilla 28/06/2012
    public java.util.List<ModulosPerfil> consultarModulosporPerfil(long modulo, long perfil, long tipo_menu) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<ModulosPerfil> modulosperfil = new java.util.LinkedList<ModulosPerfil>();
        try {
            pst = con.prepareStatement("select * from conf_recursos cr, conf_perfil_recursos cp where cr.modulo = ? and cr.descripcion like '%.jsp%' and cr.id_recurso = cp.fk_recurso and cp.fk_perfil = ? and cp.fecha_final is null and cr.tipo_menu is not null and tipo_menu = ? order by cr.nombre");

            pst.setLong(1, modulo);
            pst.setLong(2, perfil);
            pst.setLong(3, tipo_menu);

            rst = pst.executeQuery();
            while (rst.next()) {
                modulosperfil.add(ModulosPerfil.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return modulosperfil;
    }

    //Creado por Jefrey Padilla
    public Perfil consultarPerfilByUsuario(long fk_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {

            pst = con.prepareStatement("select * from conf_perfiles where fk_usuario = ?");
            pst.setLong(1, fk_usuario);

            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    Perfil perfil = Perfil.load(rst);

                    return perfil;
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Usuario consultarUsuario(String user, String password) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
//            pst = con.prepareStatement("UPDATE USUARIOS SET PASSWORD = ? WHERE NOMBRE = ?");
//            pst.setString(1, password);
//            pst.setString(2, user);
//            pst.execute();
//            pst = con.prepareStatement("SELECT PASSWORD FROM USUARIOS U WHERE U.NOMBRE = ?");
//            pst.setString(1, user);
//            rst = pst.executeQuery();
//            if (rst.next()) {
//                System.out.println("Usuario :"+user+" Password :"+Encrypt.desencriptar(rst.getString(1)));
//            }

            pst = con.prepareStatement("SELECT U.* FROM USUARIOS U WHERE U.NOMBRE = ? AND U.FECHA_FIN IS NULL AND U.PASSWORD = ?");
            pst.setString(1, user);
            pst.setString(2, password);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    Usuario usuario = Usuario.load(rst);
                    //userHandler = consultarPersona(usuario.getId_persona()).getDocumento();
                    //passUserHandler = password;
                    return usuario;
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    //Consultar Usuarios By identificacion, nombre, password - Creado por Jefrey Padilla
    public Usuario consultarPerfilByPersona(long fk_persona) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {

            pst = con.prepareStatement("SELECT * FROM USUARIOS WHERE FK_PERSONA = ?");
            pst.setLong(1, fk_persona);

            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    Usuario usuario = Usuario.load(rst);

                    return usuario;
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List consultarCajasUsuario(long id_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM USUARIO_CAJAS WHERE FK_USUARIO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, id_usuario);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    lista.add(UsuarioCaja.load(rst));
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public UsuarioCaja getCajaUsuario(long id_cajaUsuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM USUARIO_CAJAS WHERE ID_USUARIO_CAJA = ?");
            pst.setLong(1, id_cajaUsuario);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return UsuarioCaja.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Tiquete consultarTiquete(long fk_taquilla) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM Tiquetes WHERE fk_taquilla = ?");
            pst.setLong(1, fk_taquilla);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    Tiquete.load(rst);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar las aletas debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Taquilla consultarTaquillaActivaByUsuario(long fk_usuario) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select  * from taquillas where fk_usuario = ? and estado = 1 and fecha_fin is null");
            pst.setLong(1, fk_usuario);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Taquilla.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Taquilla consultarTaquillaById(long id_taquilla) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select * from taquillas where id_taquilla = ?");
            pst.setLong(1, id_taquilla);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Taquilla.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Licencia_Conduccion consultarLicencia(long id_licencia)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Licencia_Conduccion licencia = new Licencia_Conduccion();
        try {
            pst = con.prepareStatement("SELECT * FROM LICENCIAS_CONDUCCION WHERE ID_LICENCIA_CONDUCCION = ?");
            pst.setLong(1, id_licencia);
            rst = pst.executeQuery();
            if (rst.next()) {
                licencia = Licencia_Conduccion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return licencia;
    }

    public long consultarMaxLicencia() throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        long maxlic = 0;
        try {
            pst = con.prepareStatement("select max(ID_LICENCIA_CONDUCCION) from LICENCIAS_CONDUCCION");

            rst = pst.executeQuery();
            if (rst.next()) {
                maxlic = rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return maxlic;

    }

    public void adicionarLicencia(Licencia_Conduccion licencia) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO LICENCIAS_CONDUCCION (FK_SEDE,FK_PERSONA,NUMERO_LICENCIA,FK_TRAMITE,CATEGORIA,ESTADO_LICENCIA,ESTADO_IMPRESION,CERTIFICADO_MEDICO,CERTIFICADO_ESCUELA,NUMERO_SUSTRATO,NUMERO_RESOLUCION,MOTIVO_CANCELACION,FK_USUARIO,FECHA_VENCIMIENTO,FECHA_REGISTRO,FK_RADICACION_LICENCIA) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setLong(1, licencia.getFk_sede());
            pst.setLong(2, licencia.getFk_persona());
            pst.setString(3, licencia.getNumeroLicencia());
            pst.setLong(4, licencia.getFk_tramite());
            pst.setString(5, licencia.getCategoria());
            pst.setInt(6, licencia.getEstadoLicencia());
            pst.setString(7, licencia.getEstadoImpresion());
            pst.setString(8, licencia.getCertificadoAptitudFisica());
            pst.setString(9, licencia.getCertificadoCentroEnsenanza());
            pst.setString(10, licencia.getNumeroSustrato());
            pst.setString(11, licencia.getNumeroResolucion());
            pst.setString(12, licencia.getMotivoCancelacion());
            pst.setLong(13, licencia.getFk_usuario());
            pst.setDate(14, licencia.getFechaVencimiento());
            pst.setTimestamp(15, licencia.getFechaRegistro());
            pst.setLong(16, licencia.getFk_radicacionLicencia());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarPropietario(Propietario propietario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into propietarios (porcentaje,fecha_ini,fecha_fin,fk_persona,fk_vehiculo,tipo_propiedad,pro_indiviso,fk_usuario) values(?,?,?,?,?,?,?,?)");
            pst.setInt(1, propietario.getPorcentaje());
            pst.setDate(2, propietario.getFecha_inicio());
            pst.setDate(3, propietario.getFecha_final());
            pst.setLong(4, propietario.getFk_persona());
            pst.setLong(5, propietario.getFk_vehiculo());
            pst.setString(6, propietario.getTipoPropiedad());
            pst.setString(7, propietario.getProIndiviso());
            pst.setLong(8, propietario.getFk_usuario());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarHistoricoColor(Historico_Color historico_color) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO HISTORICO_COLOR(FK_COLOR,FK_VEHICULO,GAMA,SECUENCIA,FECHA_INI,FK_USUARIO) VALUES(?,?,?,?,?,?) ");
            pst.setLong(1, historico_color.getFk_color());
            pst.setLong(2, historico_color.getFk_vehiculo());
            pst.setString(3, historico_color.getGama());
            pst.setInt(4, historico_color.getSecuencia());
            pst.setDate(5, historico_color.getFecha_ini());
            pst.setLong(6, historico_color.getFk_usuario());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public void adicionarAlerta(Alerta alerta) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into alertas (fk_persona,fk_vehiculo ,tipo,fecha_ini,observaciones,usuario,fecha_fin,grado) values(?,?,?,?,?,?,?,?)");
            pst.setLong(1, alerta.getFk_persona());
            pst.setLong(2, alerta.getFk_vehiculo());
            pst.setInt(3, alerta.getTipo());
            pst.setDate(4, alerta.getFecha_ini());
            pst.setString(5, alerta.getObservaciones());
            pst.setLong(6, alerta.getUsuario());
            pst.setDate(7, alerta.getFecha_fin());
            pst.setInt(8, alerta.getGrado());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarComparendo(long fk_cartera, int estado) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE COMPARENDOS SET ESTADO = ? WHERE FK_CARTERA = ?");
            pst.setInt(1, estado);
            pst.setLong(2, fk_cartera);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    /**
     * **** METODOS INSERTADOS EL DIA 4 DE FEBRERO *****
     */
    public boolean verificarModelo(String modelo) {
        return Integer.parseInt(modelo) > java.util.Calendar.getInstance().get(java.util.Calendar.YEAR) ? false : true;
    }

    public boolean tramitePago(long fk_tramite, long fk_persona, long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM DETALLE_TIQUETES D,TIQUETES T,PAGOS P WHERE D.FK_TIQUETE = T.ID_TIQUETE AND T.ID_TIQUETE = P.FK_TIQUETE"
                    + "AND D.ESTADO = T.ESTADO AND D.ESTADO = 1 AND D.FK_TRAMITE = ? AND (T.FK_PERSONA = ?"
                    + "OR T.FK_VEHICULO = ?)");
            pst.setLong(1, fk_tramite);
            pst.setLong(2, fk_persona);
            pst.setLong(3, fk_vehiculo);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return true;
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return false;
    }

    public Marca getMarca(long id_marca) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM MARCAS WHERE CODIGO = ?");
            pst.setLong(1, id_marca);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Marca.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Linea getLinea(long id_linea, long fk_marca) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM LINEAS WHERE ID_LINEA = ? AND FK_MARCA = ?");
            pst.setLong(1, id_linea);
            pst.setLong(2, fk_marca);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Linea.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Linea getLinea(long id_linea) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM LINEAS WHERE ID_LINEA = ?");
            pst.setLong(1, id_linea);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Linea.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void radicar_color(Historico_Color historico_color, long fk_formulario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RADICACION_COLORES(FK_COLOR,FK_FORMULARIO,GAMA,SECUENCIA) VALUES(?,?,?,?) ");
            pst.setLong(1, historico_color.getFk_color());
            pst.setLong(2, fk_formulario);
            pst.setString(3, historico_color.getGama());
            pst.setInt(4, historico_color.getSecuencia());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public LinkedList listadoColores() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaColores = new LinkedList();

        try {

            pst = con.prepareStatement("select * from COLORES order by NOMBRE");
            rst = pst.executeQuery();

            while (rst.next()) {

                listaColores.add(Color.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar los colores ");

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return listaColores;
    }

    public LinkedList listadoColoresByNombre(String nombre) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaColores = new LinkedList();

        try {

            pst = con.prepareStatement("SELECT * FROM COLORES WHERE NOMBRE LIKE ? ORDER BY NOMBRE");
            pst.setString(1, nombre + "%");
            rst = pst.executeQuery();

            while (rst.next()) {

                listaColores.add(Color.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar los colores ");

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return listaColores;
    }

    public void adicionarRadicacionPropietarios(Radicacion_Propietario rp) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RADICACION_PROPIETARIO (FK_FORMULARIO,FK_PERSONA,PORCENTAJE,TIPO_PROPIEDAD,PRO_INDIVISO) VALUES (?,?,?,?,?)");
            pst.setLong(1, rp.getFk_formulario());
            pst.setLong(2, rp.getFk_persona());
            pst.setFloat(3, rp.getPorcentaje());
            pst.setString(4, rp.getTipoPropiedad());
            pst.setString(5, rp.getProIndiviso());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public Propietario getPropietario(long fk_propietario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM PROPIETARIOS WHERE ID_PROPIETARIO = ?");
            pst.setLong(1, fk_propietario);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Propietario.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Formulario consultarFormulario(String numero, java.sql.Timestamp fecha_tramite)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM FORMULARIOS WHERE NUMERO = ? AND FECHA_TRAMITE = ?");
            pst.setString(1, numero);
            pst.setTimestamp(2, fecha_tramite);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Formulario.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List consultarFormularios(long fk_radicacion)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT * FROM FORMULARIOS WHERE FK_RADICACION = ? ORDER BY ID_FORMULARIO");
            pst.setLong(1, fk_radicacion);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Formulario.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public Formulario consultarUltimoFormulario(String placa)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM FORMULARIOS WHERE ID_FORMULARIO = (SELECT MAX(ID_FORMULARIO) FROM FORMULARIOS WHERE PLACA = ?)");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Formulario.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List listarFormulariosByRadicacion(String numero, java.sql.Date fecha, long fk_sede)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT F.* FROM FORMULARIOS F, RADICACIONES R WHERE F.FK_RADICACION = R.ID_RADICACION AND R.NUMERO = ? AND R.FECHA = ? AND R.FK_SEDE = ? ORDER BY R.ID_RADICACION");
            pst.setString(1, numero);
            pst.setDate(2, fecha);
            pst.setLong(3, fk_sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Formulario.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public LinkedList Listar_Propietarios(long fk_persona) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaPropietarios = new LinkedList();
        try {
            //pst = con.prepareStatement("select * from Propietarios where fk_persona= ? and fecha_fin is null order by fecha_fin desc"); // orden
            pst = con.prepareStatement("select * from Propietarios where fk_persona= ? order by fecha_fin desc"); // orden

            pst.setLong(1, fk_persona);
            // sql
            rst = pst.executeQuery();

            while (rst.next()) {
                listaPropietarios.add(Propietario.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaPropietarios;
    }

    public LinkedList Listar_Comparendos(long fk_persona) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList lista = new LinkedList();
        try {
            pst = con.prepareStatement("select * from comparendos where fk_persona= ? "); // orden

            pst.setLong(1, fk_persona);
            // sql
            rst = pst.executeQuery();

            while (rst.next()) {
                lista.add(Comparendo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List listarCajaBySede(long fk_sede) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listacaja = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("select * from cajas where fecha_fin is null and fk_sede = ?");
            pst.setLong(1, fk_sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                listacaja.add(Caja.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listacaja;
    }

    public String verificaChasis(String chasis, String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT P.CODIGO,P.NOMBRE,D.VALOR FROM DATOS_VEHICULOS D,VEHICULOS V,PARAMETROS P WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 2 AND "
                    + "D.PARAM_CODIGO = P.CODIGO AND P.FK_GRUPO = 40 AND D.FECHA_FIN IS NULL AND V.PLACA != ? AND P.CODIGO = 20 AND D.VALOR = ? AND V.ESTADO IN(1,5)");
            pst.setString(1, placa);
            pst.setString(2, chasis);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return rst.getString(1);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public LinkedList crear_Lista_Propietarios(long fk_vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaPropietarios = new LinkedList();
        try {
            pst = con.prepareStatement("select * from Propietarios where fk_vehiculo= ? order by fecha_fin desc"); // orden

            pst.setLong(1, fk_vehiculo);
            // sql
            rst = pst.executeQuery();

            while (rst.next()) {
                listaPropietarios.add(Propietario.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaPropietarios;
    }

    public Usuario consultarUsuario(long id_usuario)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Usuario usuario = new Usuario();
        try {
            pst = con.prepareStatement("Select * From usuarios Where id_usuario =?");
            pst.setLong(1, id_usuario);
            rst = pst.executeQuery();
            if (rst.next()) {
                usuario = Usuario.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return usuario;
    }

    public java.util.List listarDatosVehiculo(long fk_vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM DATOS_VEHICULOS WHERE FK_VEHICULO =  ?"); // orden
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(DatosVehiculo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    //Nuevo ingreso My birthday..
    public Grupo consultarGrupo(int grupo)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("Select * From grupos where id_grupo = ?");
            pst.setInt(1, grupo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Grupo.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void adicionar_Control_Rango(Control_Rango control) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into control_rangos (fk_rango,clase,servicio) values(?,?,?)");
            pst.setLong(1, control.getFk_rango());
            pst.setInt(2, control.getClase());
            pst.setInt(3, control.getServicio());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void eliminar_Control_Rango(long fk_rango) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("delete control_rangos where fk_rango= ?");
            pst.setLong(1, fk_rango);

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listar_Control_Rango(long fk_rango) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM CONTROL_RANGOS WHERE FK_RANGO =  ?"); // orden
            pst.setLong(1, fk_rango);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Control_Rango.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    /*METODOS AGREGADOS EL 17 DE FEBRERO 2009 : 10:09 AM*/
    /**
     * **** METODO QUE OBTIENE LE LISTADO DE LAS ENTIDADES DE DISTRIBUCION
     * ******
     */

    /*10:10 AM*/
    /**
     * ****** METODO PARA CONSULTAR UN BANCO TENIENDO UNA ID *******
     */
    public Banco get_banco(long id_banco) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM BANCOS WHERE ID_BANCO = ?");
            pst.setLong(1, id_banco);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Banco.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public LinkedList listado_licencias() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listado_licencias = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM LICENCIA_TRANSITO WHERE FECHA_IMPRESION IS NULL AND ESTADO = 1");
            rst = pst.executeQuery();
            while (rst.next()) {
                listado_licencias.add(Licencia_Transito.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listado_licencias;
    }

    /**
     * ****** AGREGADO EL DIA 13-02-2009 ; 16:50 ********
     */
    /**
     * ****** METODO PARA OBTENER EL LISTADO DE DIRECCIONES DE UNA PERSONA
     * *******
     */
    public LinkedList listado_direcciones_persona(long fk_persona) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException();
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listado_direcciones_persona = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM DIRECCIONES WHERE FK_PERSONA = ? AND ESTADO = 1");
            pst.setLong(1, fk_persona);
            rst = pst.executeQuery();
            while (rst.next()) {
                listado_direcciones_persona.add(Direccion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listado_direcciones_persona;
    }

    public LinkedList listado_entidades_distribucion() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listado_entidades_de_distribucion = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM ENTIDAD_DISTRIBUCION ORDER BY ID_ENTIDAD_DISTRIBUCION");
            rst = pst.executeQuery();
            while (rst.next()) {
                listado_entidades_de_distribucion.add(Entidad_Distribucion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listado_entidades_de_distribucion;
    }

    /**
     * *** METODO AGREGADO EL 17/02/2009 : 15:18 PM *****
     */
    /**
     * **** METODO PARA OBTENER EL LISTADO DE LOS BANCOS ******
     */
    public LinkedList listado_bancos() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listado_bancos = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM BANCOS");
            rst = pst.executeQuery();
            while (rst.next()) {
                listado_bancos.add(Banco.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listado_bancos;
    }

    public void adicionar_entidad_distribucion(Entidad_Distribucion nueva_entidad) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO ENTIDAD_DISTRIBUCION (FK_PERSONA,FK_BANCO,DEFECTO,CUENTA)VALUES(?,?,?,?)");
            pst.setLong(1, nueva_entidad.getFk_persona());
            pst.setLong(2, nueva_entidad.getFk_banco());
            pst.setInt(3, nueva_entidad.getDefecto());
            pst.setString(4, nueva_entidad.getCuenta());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public void actualizar_entidad_distribucion(Entidad_Distribucion entidad_actualizada) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE ENTIDAD_DISTRIBUCION SET FK_PERSONA = ?, FK_BANCO = ?, DEFECTO = ?, CUENTA = ? WHERE "
                    + "ID_ENTIDAD_DISTRIBUCION = ?");
            pst.setLong(1, entidad_actualizada.getFk_persona());
            pst.setLong(2, entidad_actualizada.getFk_banco());
            pst.setInt(3, entidad_actualizada.getDefecto());
            pst.setString(4, entidad_actualizada.getCuenta());
            pst.setLong(5, entidad_actualizada.getId_entidad_distribucion());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public Entidad_Distribucion getEntidad_distribucion(long id_entidad_distribucion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM ENTIDAD_DISTRIBUCION WHERE ID_ENTIDAD_DISTRIBUCION = ?");
            pst.setLong(1, id_entidad_distribucion);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Entidad_Distribucion.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public LinkedList listado_sedes() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listado_sedes = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM SEDES ORDER BY NOMBRE_CORTO");
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    listado_sedes.add(Sede.Load(rst));
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listado_sedes;
    }

    public LinkedList listadoConceptosSedeTramite(long fk_sede) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listado_conceptos_x_sede = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT C.* FROM CONCEPTOS C,SEDE_CONCEPTOS S WHERE C.ID_CONCEPTO = S.FK_CONCEPTO AND "
                    + "S.FECHA_FIN IS NULL AND S.FK_SEDE = ? ORDER BY C.ID_CONCEPTO");
            pst.setLong(1, fk_sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                listado_conceptos_x_sede.add(Concepto.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listado_conceptos_x_sede;
    }

    public LinkedList listadoConceptosSede(long fk_sede) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listado_conceptos_x_sede = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT C.* FROM CONCEPTOS C,SEDE_TRAMITE_CONCEPTOS V WHERE C.ID_CONCEPTO = V.FK_CONCEPTO "
                    + "AND V.FECHA_FIN IS NULL AND FK_SEDE = ? ORDER BY C.ID_CONCEPTO");
            pst.setLong(1, fk_sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                listado_conceptos_x_sede.add(Concepto.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listado_conceptos_x_sede;
    }

    public boolean isEnable(java.util.List fk_tramites, int fk_recurso) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        String ini = "(";
        String del = "";
        for (int i = 0; i < fk_tramites.size(); i++) {
            ini = ini + del + fk_tramites.get(i);
            del = ",";
            break;
        }
        if (fk_tramites.size() == 0) {
            ini = "(0)";
        } else {
            ini = ini + ")";
        }

        try {
            pst = con.prepareStatement("SELECT COUNT(*) FROM CONFIGURACION_TRAMITES WHERE FK_TRAMITE IN " + ini + " AND FK_RECURSO = ? AND FECHA_FIN IS NULL");
            pst.setInt(1, fk_recurso);
            rst = pst.executeQuery();
            if (rst.next()) {
                if (rst.getInt(1) > 0) {
                    return true;
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return false;
    }

    public void updateDefecto(Entidad_Distribucion entidad_distribucion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE ENTIDAD_DISTRIBUCION SET DEFECTO = 0 WHERE DEFECTO = 1 AND ID_ENTIDAD_DISTRIBUCION != ?");
            pst.setLong(1, entidad_distribucion.getId_entidad_distribucion());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    /**
     * ** METODO NUEVO REALIZADO EL 24-02-2009 ; 14:02pm ***
     */
    /**
     * ****** METODO QUE OBTIENE EL PORCENTAJE DE DISTRIBUCION TENIENDO EN
     * CUENTA EL CONCEPTO LA SEDE Y LA ENTIDAD *********
     */
    public float getPorcentaje_distribucion(long fk_sede, long fk_concepto, long fk_entidad_distribucion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT PORCENTAJE FROM CONFIGURACION_DISTRIBUCION WHERE FK_SEDE = ? AND FK_CONCEPTO = ? AND "
                    + "FK_ENTIDAD_DISTRIBUCION = ? AND FECHA_FIN IS NULL GROUP BY PORCENTAJE");
            pst.setLong(1, fk_sede);
            pst.setLong(2, fk_concepto);
            pst.setLong(3, fk_entidad_distribucion);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    public Configuracion_distribucion getConfiguracion_distribucion(long fk_sede, long fk_concepto, long fk_entidad_distribucion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM CONFIGURACION_DISTRIBUCION WHERE FK_SEDE = ? AND FK_CONCEPTO = ? AND "
                    + "FK_ENTIDAD_DISTRIBUCION = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, fk_sede);
            pst.setLong(2, fk_concepto);
            pst.setLong(3, fk_entidad_distribucion);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Configuracion_distribucion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public HashMap getHash_configuracion_distribucion(long fk_sede) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        HashMap hash_configuracion_distribucion = new HashMap();
        try {
            pst = con.prepareStatement("SELECT * FROM CONFIGURACION_DISTRIBUCION WHERE FK_SEDE = ? AND FECHA_FIN IS NULL ");
            pst.setLong(1, fk_sede);
            rst = pst.executeQuery();

            while (rst.next()) {
                Configuracion_distribucion conf_dist = Configuracion_distribucion.load(rst);
                hash_configuracion_distribucion.put(conf_dist.getFk_entidad_distribucion() + "" + conf_dist.getFk_concepto(), conf_dist);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return hash_configuracion_distribucion;
    }

    public boolean verifica_porcentaje_distribucion(long fk_sede, long fk_concepto, int porcentaje) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT SUM(PORCENTAJE) FROM CONFIGURACION_DISTRIBUCION WHERE FK_SEDE = ? AND FK_CONCEPTO = ? AND FECHA_FIN IS NULL ");
            pst.setLong(1, fk_sede);
            pst.setLong(2, fk_concepto);
            rst = pst.executeQuery();
            if (rst.next()) {
                int suma_porcentaje = rst.getInt(1);
                if (suma_porcentaje < 100) {
                    if ((suma_porcentaje + porcentaje) < 100) {
                        return true;
                    }
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return false;
    }

    public void finalizar_configuracion_distribucion(long fk_sede, long fk_concepto, long fk_entidad) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE CONFIGURACION_DISTRIBUCION SET FECHA_FIN = SYSDATE WHERE FK_SEDE = ? AND FK_CONCEPTO = ? AND FK_ENTIDAD_DISTRIBUCION = ?");
            pst.setLong(1, fk_sede);
            pst.setLong(2, fk_concepto);
            pst.setLong(3, fk_entidad);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public void adicionar_configuracion_distribucion(Configuracion_distribucion conf_dist) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO CONFIGURACION_DISTRIBUCION (FK_SEDE,FK_ENTIDAD_DISTRIBUCION,FK_CONCEPTO,PORCENTAJE,FECHA_INI) VALUES (?,?,?,?,?)");
            pst.setLong(1, conf_dist.getFk_sede());
            pst.setLong(2, conf_dist.getFk_entidad_distribucion());
            pst.setLong(3, conf_dist.getFk_concepto());
            pst.setDouble(4, conf_dist.getPorcentaje());
            pst.setDate(5, conf_dist.getFecha_ini());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }

    }

    /**
     * **** ADICION DE METODOS DESPUES DE LA ULTIMA UNION DE LOS ELEMENTOS****
     * MARZO 2 DE 2009
     */
    public String verificaFUN(String fun) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT PLACA FROM FORMULARIOS F,RADICACIONES R WHERE F.FK_RADICACION = R.ID_RADICACION AND F.NUMERO = ? AND R.ESTADO IN(1,2,5,6)");
            pst.setString(1, fun);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List getSecuenciaByTramite(int tramite) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT NOMBRE_CORTO FROM CONFIGURACION_TRAMITES,PARAMETROS WHERE FK_RECURSO = CODIGO AND FK_GRUPO = 326 AND FECHA_FIN IS NULL AND FK_TRAMITE = ? GROUP BY NOMBRE_CORTO ORDER BY MAX(ID_PARAMETRO)");
            pst.setInt(1, tramite);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(rst.getString(1));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public LinkedList listaTiposFinanciaciones() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaTipos = new LinkedList();

        try {

            pst = con.prepareStatement("select * from TIPO_FINANCIACION where FECHA_FIN IS NULL ORDER BY ID_TIPO_FINANCIACION");
            rst = pst.executeQuery();
            while (rst.next()) {
                listaTipos.add(Linea.load(rst));
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar los tipos de financiacion ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return listaTipos;
    }

    public void adicionarLicenciaTransito(Licencia_Transito licencia_transito) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO LICENCIA_TRANSITO (FK_RADICACION,NUMERO,FECHA_EXPEDICION,ESTADO,FK_SEDE,FK_USUARIO,NUMERO_SUSTRATO) VALUES(?,?,?,?,?,?,?)");
            pst.setLong(1, licencia_transito.getFk_radicacion());
            pst.setString(2, licencia_transito.getNumero());
            pst.setDate(3, licencia_transito.getFecha_expedicion());
            pst.setInt(4, licencia_transito.getEstado());
            pst.setLong(5, licencia_transito.getFk_sede());
            pst.setLong(6, licencia_transito.getFk_usuario());
            pst.setString(7, licencia_transito.getNumero_sustrato());

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Licencia_Transito consultarLicenciaTransito(long fk_vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM LICENCIA_TRANSITO WHERE FK_VEHICULO = ? AND ESTADO = 1");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Licencia_Transito.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void actualizarEstadoRadicacion(long radicacion, int estado) throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RADICACIONES SET ESTADO = ? WHERE ID_RADICACION = ?");
            pst.setInt(1, estado);
            pst.setLong(2, radicacion);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarObservacionRadicacion(long radicacion, String observacion) throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RADICACIONES SET OBSERVACIONES = ? WHERE ID_RADICACION = ?");
            pst.setString(1, observacion);
            pst.setLong(2, radicacion);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarEmbargo(Embargo embargo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO EMBARGOS (ID_EMBARGO,FK_PERSONA,FK_USUARIO,PROCESO,"
                    + "TIPO,FECHA_OFICIO,OFICIO,NRO_LEVANTAMIENTO,FECHA_LEVANTAMIENTO,OBSERVACIONES,"
                    + "FECHA_PROCESO,FK_OFICINA,FK_VEHICULO,FK_SEDE,FK_DIVIPO,DEMANDANTE,NRO_RADICACION,"
                    + "FECHA_RADICACION) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setLong(1, embargo.getId_embargo());
            pst.setLong(2, embargo.getFk_persona());
            pst.setLong(3, embargo.getFk_usuario());
            pst.setInt(4, embargo.getProceso());
            pst.setInt(5, embargo.getTipo());
            pst.setDate(6, embargo.getFecha_oficio());
            pst.setString(7, embargo.getOficio());
            pst.setString(8, embargo.getNro_levantamiento());
            pst.setDate(9, embargo.getFecha_levantamiento());
            pst.setString(10, embargo.getObservaciones());
            pst.setTimestamp(11, embargo.getFecha_proceso());
            pst.setLong(12, embargo.getFk_oficina());
            pst.setLong(13, embargo.getFk_vehiculo());
            pst.setLong(14, embargo.getFk_sede());
            pst.setLong(15, embargo.getFk_divipo());
            pst.setString(16, embargo.getDemandante());
            pst.setString(17, embargo.getNro_radicacion());
            pst.setDate(18, embargo.getFecha_radicacion());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public LinkedList consultarEmbargos(long fk_vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList lista = new LinkedList();

        try {

            pst = con.prepareStatement("SELECT * FROM EMBARGOS WHERE FK_VEHICULO = ?");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Embargo.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido listar los tipos de financiacion ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return lista;
    }

    public void adicionarOficinaJuridica(Oficina_Juridica oficina_juridica) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO OFICINAS_JURIDICAS (NOMBRE,NUMERO,FK_SEDE,REPRESENTANTE,CARGO,DIRECCION,FK_DIVIPO) values(?,?,?,?,?,?,?)");
            pst.setString(1, oficina_juridica.getNombre());
            pst.setString(2, oficina_juridica.getNumero());
            pst.setLong(3, oficina_juridica.getFk_sede());
            pst.setString(4, oficina_juridica.getRepresentante());
            pst.setString(5, oficina_juridica.getCargo());
            pst.setString(6, oficina_juridica.getDireccion());
            pst.setLong(7, oficina_juridica.getFk_divipo());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarOficinaJuridicaById(String nombre, long id_oficina) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE OFICINAS_JURIDICAS SET NOMBRE = ? WHERE ID_OFICINA = ?");
            pst.setString(1, nombre);
            pst.setLong(2, id_oficina);

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Oficina_Juridica consultarOficinaJuridica(long fk_oficina) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM OFICINAS_JURIDICAS WHERE ID_OFICINA = ?");
            pst.setLong(1, fk_oficina);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Oficina_Juridica.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido listar los tipos de financiacion ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return null;
    }

    public LinkedList consultarOficinasJuridicas() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList lista = new LinkedList();

        try {
            pst = con.prepareStatement("SELECT * FROM OFICINAS_JURIDICAS");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Oficina_Juridica.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido listar las oficinas juridicas..");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return lista;
    }

    public java.util.List consultarAlertas(long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM ALERTAS WHERE FK_VEHICULO = ?");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Alerta.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar las aletas debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public DatosVehiculo consultarDatosVehiculo(long id_dato_vehiculo)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM DATOS_VEHICULOS D WHERE ID_DATO_VEHICULO = ?");
            pst.setLong(1, id_dato_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return DatosVehiculo.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public DatosVehiculo consultarDatosVehiculo(long fk_vehiculo, int grupo, int subGrupo)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM DATOS_VEHICULOS D WHERE FK_VEHICULO = ? AND GRUPO_CODIGO = ? AND SUB_GRUPO_CODIGO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, fk_vehiculo);
            pst.setInt(2, grupo);
            pst.setInt(3, subGrupo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return DatosVehiculo.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List consultarDetalleTiquete(long fk_tiquete) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM DETALLE_TIQUETES WHERE FK_TIQUETE = ?");
            pst.setLong(1, fk_tiquete);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Detalle_Tiquete.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public LinkedList consultarConceptosSedeTramites(long fk_sede, long fk_tramite) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listado_conceptos_x_sede = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT C.* FROM CONCEPTOS C,SEDE_TRAMITE_CONCEPTOS V WHERE C.ID_CONCEPTO = V.FK_CONCEPTO "
                    + "AND V.FK_TRAMITE = ? AND V.FECHA_FIN IS NULL AND FK_SEDE = ? ORDER BY C.ID_CONCEPTO");
            pst.setLong(1, fk_tramite);
            pst.setLong(2, fk_sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                listado_conceptos_x_sede.add(Concepto.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listado_conceptos_x_sede;
    }

    public java.util.List consultarDistribucionSedeConceptos(long fk_sede, long fk_concepto) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM CONFIGURACION_DISTRIBUCION WHERE FK_SEDE = ? AND FK_CONCEPTO = ? AND FECHA_FIN IS NULL ");
            pst.setLong(1, fk_sede);
            pst.setLong(2, fk_concepto);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Configuracion_distribucion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public void adicionarDistribucion(Distribucion distribucion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO DISTRIBUCION (FK_SEDE,FK_ENTIDAD_DISTRIBUCION,FK_CONCEPTO_DISTRIBUCION,FK_PAGO,VALOR_BASE,VALOR,FECHA_PROCESO) VALUES (?,?,?,?,?,?,?)");
            pst.setLong(1, distribucion.getFk_sede());
            pst.setLong(2, distribucion.getFk_entidad_distribucion());
            pst.setLong(3, distribucion.getFk_concepto_distribucion());
            pst.setLong(4, distribucion.getFk_pago());
            pst.setDouble(5, distribucion.getValor_base());
            pst.setDouble(6, distribucion.getValor());
            pst.setTimestamp(7, distribucion.getFecha_proceso());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public java.util.List consultarDistribucionbyFecha(java.sql.Timestamp inicio, java.sql.Timestamp fin) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM DISTRIBUCION WHERE FK_PAGO IN(SELECT ID_PAGO FROM PAGOS WHERE FK_TAQUILLA IN("
                    + "SELECT ID_TAQUILLA FROM TAQUILLAS WHERE FECHA_INI >= ? AND FECHA_FIN <= ?) AND ESTADO = 3)");
            pst.setTimestamp(1, inicio);
            pst.setTimestamp(2, fin);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Distribucion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public Pago consultarPago(long id_pago) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("Select * From pagos where id_pago=?");
            pst.setLong(1, id_pago);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Pago.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void actualizarLicenciaTransito(long id_licenciaTransito, long fk_vehiculo, String numeroSustrato, java.sql.Date fechaImpresion)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            if (fk_vehiculo != 0) {
                pst = con.prepareStatement("UPDATE LICENCIA_TRANSITO SET FK_VEHICULO = ? WHERE ID_LIC_TRANSITO = ?");
                pst.setLong(1, fk_vehiculo);
            } else if (numeroSustrato != null) {
                pst = con.prepareStatement("UPDATE LICENCIA_TRANSITO SET NUMERO_SUSTRATO = ? WHERE ID_LIC_TRANSITO = ?");
                pst.setString(1, numeroSustrato);
            } else if (fechaImpresion != null) {
                pst = con.prepareStatement("UPDATE LICENCIA_TRANSITO SET FECHA_IMPRESION = ? WHERE ID_LIC_TRANSITO = ?");
                pst.setDate(1, fechaImpresion);
            }
            pst.setLong(2, id_licenciaTransito);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    /* INICIO DE NUEVAS MODIFICACIONES A LA APLICACION
     *
     */
    public boolean liquidacionExiste(java.util.List lista, long id, int tipo) {

        for (int i = 0; i < lista.size(); i++) {
            Liquidacion liquidat = (Liquidacion) lista.get(i);
            if (liquidat.getId_liquidacion() == id && liquidat.getTipo() == tipo) {
                return true;
            }
        }
        return false;
    }

    public boolean requiereLiquidacionRUNT(java.util.List lista) {

        for (int i = 0; i < lista.size(); i++) {
            Liquidacion liquidat = (Liquidacion) lista.get(i);
            if (liquidat.getTipo() == 2) {
                return true;
            }
        }
        return false;
    }


    /*
     *
     * *************************************** MODELACION DE CONEXION A BASE DE DATOS RUNT *********************************************
     *
     */
    public void registrarEmpresa(Empresa empresa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO EMPRESA (fk_divipo,fecha,razon_social,sigla,"
                    + "tipo_entidad,tipo_sociedad,prestador_servicio,email,telefono,celular,capital_pagado,patrimonio_liquido,"
                    + "nro_certificado,fk_representante,nit,tipo_documento)VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setLong(1, empresa.getFk_divipo());
            pst.setDate(2, (Date) empresa.getFecha_exp());
            pst.setString(3, empresa.getRazon_social());
            pst.setString(4, empresa.getSigla());
            pst.setString(5, empresa.getTipo_entidad());
            pst.setString(6, empresa.getTipo_sociedad());
            pst.setString(7, empresa.getPrestador_servicio());
            pst.setString(8, empresa.getEmail());
            pst.setString(9, empresa.getTelefono());
            pst.setString(10, empresa.getCelular());
            pst.setString(11, empresa.getCapital_pagado());
            pst.setString(12, empresa.getPatrimonio_liquido());
            pst.setString(13, empresa.getNro_certificado());
            pst.setLong(14, empresa.getFk_representante());
            pst.setString(15, empresa.getNit());
            pst.setLong(16, empresa.getTipo_documento());

            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public Empresa consultarEmpresa(int tipo, String documento)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Empresa empresa = null;
        try {
            pst = con.prepareStatement("Select * From empresa Where tipo_documento=? and nit=?");
            pst.setInt(1, tipo);
            pst.setString(2, documento);
            rst = pst.executeQuery();
            if (rst.next()) {
                empresa = Empresa.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return empresa;
    }

    public void adicionarRepresentante(Representante repres) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO REPRESENTANTES (fk_persona,tipo_contrato,"
                    + "fecha_inicio_representacion,estado_representacion,fecha_vigencia)VALUES (?,?,?,?,?)");
            pst.setLong(1, repres.getFk_persona());
            pst.setString(2, repres.getTipo_contrato());
            pst.setDate(3, (Date) repres.getFecha_inicio_representacion());
            pst.setString(4, repres.getEstado_representacion());
            pst.setDate(5, (Date) repres.getFecha_vigencia());

            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public Representante consultarRepresentante(long id_representante)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Representante representante = null;
        try {
            pst = con.prepareStatement("Select * From representantes Where id_representante = ?");
            pst.setLong(1, id_representante);
            rst = pst.executeQuery();
            if (rst.next()) {
                representante = Representante.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return representante;
    }

    public Representante consultarRepresentantebyPersona(long fk_persona)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Representante representante = null;
        try {
            pst = con.prepareStatement("Select * From representantes Where fk_persona = ?");
            pst.setLong(1, fk_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                representante = Representante.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return representante;
    }

    public boolean registrarLiquidacionRUNT(com.heinsohn.runt.general.solicitudes.LiquidacionOutDTO liquidacionOutDTO, long fk_pago, String placa, long fk_persona, int estado, long fk_tramite, long fk_usuario) throws Exception {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RUNT_LIQUIDACION (NUMERO_LIQUIDACION,VALOR_TOTAL,FK_PAGO,PLACA,FK_PERSONA,FK_TRAMITE,ESTADO,FK_USUARIO) VALUES (?,?,?,?,?,?,?,?)");
            pst.setString(1, liquidacionOutDTO.getNumeroLiquidacion());
            pst.setDouble(2, liquidacionOutDTO.getValorTotal());
            pst.setLong(3, fk_pago);
            pst.setString(4, placa);
            pst.setLong(5, fk_persona);
            pst.setLong(6, fk_tramite);
            pst.setInt(7, estado);
            pst.setLong(8, fk_usuario);
            return pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public String[] consultarTramiteRUNT(long id_tramite, int clase_vehiculo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        String[] dupla = new String[2];

        try {
            pst = con.prepareStatement("SELECT T.ID_RUNT_TRAMITE,P.TARIFA FROM RUNT_TRAMITES T,RUNT_TIPIFICACION P WHERE T.ID_RUNT_TRAMITE = P.FK_TRAMITE AND T.FK_TRAMITE = ? AND P.CLASE_VEHICULO = ?");
            pst.setLong(1, id_tramite);
            pst.setInt(2, clase_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                dupla[0] = rst.getString(1);
                dupla[1] = rst.getString(2);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return dupla;
    }

    public long consultarTramiteRUNT(long id_tramite) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT ID_RUNT_TRAMITE FROM RUNT_TRAMITES WHERE FK_TRAMITE = ?");
            pst.setLong(1, id_tramite);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    public int consultarClaseTipificacionRUNT(int clase_vehiculo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT CLASE_TIPIFICACION FROM RUNT_CLASIFICACION WHERE ID_CLASE_VEHICULO = ?");
            pst.setInt(1, clase_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getInt(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    public Aseguradora consultarAseguradora(long id_aseguradora) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {

            pst = con.prepareStatement("SELECT * FROM ASEGURADORAS WHERE ID_ASEGURADORA = ?");
            pst.setLong(1, id_aseguradora);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Aseguradora.load(rst);
            }
        } catch (Exception e) {
            System.out.println("Error al consultar la aseguradora " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }

            pst = null;
            rst = null;

        }

        return null;
    }

    public LinkedList consultarParametrosRUNT(int tabla) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaParametros = new LinkedList();

        try {
            pst = con.prepareStatement("SELECT PARAMETRO,DESCRIPCION FROM RUNT_PARAMETROS WHERE TABLA = ? ORDER BY PARAMETRO");
            pst.setInt(1, tabla);
            rst = pst.executeQuery();
            while (rst.next()) {
                String dual[] = new String[2];
                dual[0] = rst.getString(1);
                dual[1] = rst.getString(2);
                listaParametros.add(dual);
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new SQLException(" Error! no se ha podido listar los parametros ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaParametros;
    }

    public String consultarTablaRUNT(int tabla)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT NOMBRE FROM RUNT_TABLAS WHERE ID_RUNT_TABLA = ?");
            pst.setInt(1, tabla);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return "";
    }

    public String consultarEspecificacionRUNT(int especificacion)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT NOMBRE FROM RUNT_ESPECIFICACIONES WHERE ID_RUNT_ESPECIFICACION = ?");
            pst.setInt(1, especificacion);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return "";
    }

    public LinkedList consultarConfiguracionTramitesRUNT(long tramite) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList lista = new LinkedList();

        try {
            pst = con.prepareStatement("SELECT TIPO,GRUPO FROM RUNT_CONFIGURACION_TRAMITES WHERE FK_TRAMITE = ? AND FIN IS NULL ORDER BY ID_RUNT_CONFIGURACION_TRAMITE");
            pst.setLong(1, tramite);
            rst = pst.executeQuery();
            while (rst.next()) {
                int dupla[] = new int[2];
                dupla[0] = rst.getInt(1);
                dupla[1] = rst.getInt(2);
                lista.add(dupla);
            }
        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido listar la configuracion ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;
    }

    public boolean registrarRadicacionTramiteRUNT(long fk_formulario, int tipo, int grupo, String referencia) throws Exception {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RUNT_RADICACION_TRAMITES (FK_FORMULARIO,TIPO,GRUPO,REFERENCIA) VALUES (?,?,?,?)");
            pst.setLong(1, fk_formulario);
            pst.setInt(2, tipo);
            pst.setInt(3, grupo);
            pst.setString(4, referencia);
            return pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public String consultarRadicacionesTramitesRUNT(long fk_formulario, int tipo, int grupo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT REFERENCIA FROM RUNT_RADICACION_TRAMITES WHERE FK_FORMULARIO = ? AND TIPO = ? AND GRUPO = ?");
            pst.setLong(1, fk_formulario);
            pst.setInt(2, tipo);
            pst.setInt(3, grupo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido consultar la caracteristica/especificacion");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public String consultarRadicacionesEspecificaciones(long fk_formulario, int grupo, int parametro)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT VALOR FROM RADICACION_DATOS_VEHICULO WHERE FK_FORMULARIO = ? AND GRUPO = ? AND PARAMETRO = ?");
            pst.setLong(1, fk_formulario);
            pst.setInt(2, grupo);
            pst.setInt(3, parametro);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;
    }

    public long consultarRadicacionColor(long fk_formulario)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT MAX(FK_COLOR) FROM RADICACION_COLOR WHERE FK_FORMULARIO = ? AND SECUENCIA = 1");
            pst.setLong(1, fk_formulario);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return 0;

    }

    public boolean registrarSolicitudRUNT(com.heinsohn.runt.general.solicitudes.RadicarSolicitudOutDTO radicarSolicitudOutDTO, long radicacion, int tipo) throws Exception {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RUNT_SOLICITUDES (NUMERO_SOLICITUD,FECHA_SOLICITUD,RESULTADO,ESTADO,FK_RADICACION,TIPO) VALUES (?,?,?,?,?,?)");
            pst.setString(1, radicarSolicitudOutDTO.getIdSolicitud());
            pst.setDate(2, new java.sql.Date(radicarSolicitudOutDTO.getFechaRadicacion().getYear() - 1900, radicarSolicitudOutDTO.getFechaRadicacion().getMonth() - 1, radicarSolicitudOutDTO.getFechaRadicacion().getDay()));
            pst.setString(3, radicarSolicitudOutDTO.getResultado());
            pst.setString(4, radicarSolicitudOutDTO.getStatus().getStatusCode());
            pst.setLong(5, radicacion);
            pst.setInt(6, tipo);
            return pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public String consultarSolicitudRadicacionRUNT(long radicacion, int tipo) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT NUMERO_SOLICITUD FROM RUNT_SOLICITUDES WHERE FK_RADICACION = ? AND TIPO = ? ORDER BY ID_RUNT_SOLICITUD DESC");
            pst.setLong(1, radicacion);
            pst.setInt(2, tipo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Divipo getDivipobyCodigo(String codigo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM DIVIPO WHERE CODIGO = ?");
            pst.setString(1, codigo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Divipo.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar la Divipo de id " + codigo);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void actualizarBiometrico(Biometrico biometrico) throws Exception {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            File f = new File("C:\\Civitrans\\BiometricosRUNT\\" + biometrico.getId_persona());
            FileOutputStream fos;
            if (!f.exists()) {
                f.mkdirs();
            }
            String dirBidimensional = "";
            String dirFirma = "";
            String dirFoto = "";
            String dirHuella1 = "";
            String dirHuella2 = "";
            String dirTemplate = "";
            if (biometrico.getBidimensional() != null) {
                fos = new FileOutputStream(f.getAbsolutePath() + "\\Bidimensional." + biometrico.getId_persona());
                fos.write(biometrico.getBidimensional());
                fos.flush();
                fos.close();
                dirBidimensional = f.getAbsolutePath() + "\\Bidimensional." + biometrico.getId_persona();
                pst = con.prepareStatement("UPDATE PERSONAS SET BIDIMENSIONAL = ? WHERE ID_PERSONA = ?");
                pst.setString(1, dirBidimensional);
                pst.setLong(2, biometrico.getId_persona());
                pst.executeUpdate();
                pst.close();
            }
            if (biometrico.getFirma() != null) {
                fos = new FileOutputStream(f.getAbsolutePath() + "\\Firma." + biometrico.getId_persona());
                fos.write(biometrico.getFirma());
                fos.flush();
                fos.close();
                dirFirma = f.getAbsolutePath() + "\\Firma." + biometrico.getId_persona();
                pst = con.prepareStatement("UPDATE PERSONAS SET FIRMA = ? WHERE ID_PERSONA = ?");
                pst.setString(1, dirFirma);
                pst.setLong(2, biometrico.getId_persona());
                pst.executeUpdate();
                pst.close();
            }
            if (biometrico.getFoto() != null) {
                fos = new FileOutputStream(f.getAbsolutePath() + "\\Foto." + biometrico.getId_persona());
                fos.write(biometrico.getFoto());
                fos.flush();
                fos.close();
                dirFoto = f.getAbsolutePath() + "\\Foto." + biometrico.getId_persona();
                pst = con.prepareStatement("UPDATE PERSONAS SET FOTO = ? WHERE ID_PERSONA = ?");
                pst.setString(1, dirFoto);
                pst.setLong(2, biometrico.getId_persona());
                pst.executeUpdate();
                pst.close();
            }
            if (biometrico.getHuella1() != null) {
                fos = new FileOutputStream(f.getAbsolutePath() + "\\Huella_1." + biometrico.getId_persona());
                fos.write(biometrico.getHuella1());
                fos.flush();
                fos.close();
                dirHuella1 = f.getAbsolutePath() + "\\Huella_1." + biometrico.getId_persona();
                pst = con.prepareStatement("UPDATE PERSONAS SET HUELLA1 = ?,DEDO1= ? WHERE ID_PERSONA = ?");
                pst.setString(1, dirHuella1);
                pst.setInt(2, biometrico.getDedo1());
                pst.setLong(3, biometrico.getId_persona());
                pst.executeUpdate();
                pst.close();
            }
            if (biometrico.getHuella2() != null) {
                fos = new FileOutputStream(f.getAbsolutePath() + "\\Huella_2." + biometrico.getId_persona());
                fos.write(biometrico.getHuella2());
                fos.flush();
                fos.close();
                dirHuella2 = f.getAbsolutePath() + "\\Huella_2." + biometrico.getId_persona();
                pst = con.prepareStatement("UPDATE PERSONAS SET HUELLA2 = ?,DEDO2 = ? WHERE ID_PERSONA = ?");
                pst.setString(1, dirHuella2);
                pst.setInt(2, biometrico.getDedo2());
                pst.setLong(3, biometrico.getId_persona());
                pst.executeUpdate();
                pst.close();
            }
            if (biometrico.getTemplate() != null) {
                fos = new FileOutputStream(f.getAbsolutePath() + "\\Template." + biometrico.getId_persona());
                fos.write(biometrico.getTemplate());
                fos.flush();
                fos.close();
                dirTemplate = f.getAbsolutePath() + "\\Template." + biometrico.getId_persona();
                pst = con.prepareStatement("UPDATE PERSONAS SET TEMPLATE = ? WHERE ID_PERSONA = ?");
                pst.setString(1, dirTemplate);
                pst.setLong(2, biometrico.getId_persona());
                pst.executeUpdate();
                pst.close();
            }
            if (biometrico.getMotivoRechazo() != 0) {
                pst = con.prepareStatement("UPDATE PERSONAS SET MOTIVO_RECHAZO = ? WHERE ID_PERSONA = ?");
                pst.setInt(1, biometrico.getMotivoRechazo());
                pst.setLong(2, biometrico.getId_persona());
                pst.executeUpdate();
                pst.close();
            }
        } catch (Exception ref) {
            ref.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    public Biometrico consultarBiometrico(long id_persona) throws Exception {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT BIDIMENSIONAL,FIRMA,FOTO,DEDO1,DEDO2,HUELLA1,HUELLA2,TEMPLATE,MOTIVO_RECHAZO FROM PERSONAS WHERE ID_PERSONA = ?");
            pst.setLong(1, id_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Biometrico.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public byte[] consultarBiometricoTipoByte(long id_persona, String tipo) throws Exception {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.io.FileInputStream fis = null;
        byte[] bytes = null;
        try {
            pst = con.prepareStatement("SELECT " + tipo + " FROM PERSONAS WHERE ID_PERSONA = ?");
            pst.setLong(1, id_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                try {
                    String dir = rst.getString(1);
                    if (dir != null) {
                        java.io.File fs = new java.io.File(dir);
                        if (fs.exists()) {
                            fis = new java.io.FileInputStream(fs);
                            bytes = new byte[(int) fs.length()];
                            if (fis.read(bytes) != -1) {
                                fis.close();
                                return bytes;
                            }
                        }
                    }
                } catch (Exception exc) {
                    exc.printStackTrace();
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void actualizarDireccion(Direccion direccion)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DIRECCIONES SET DESCRIPCION = ?,UBICACION = ?,FECHA = ?,ESTADO = ?,FK_DIVIPO = ?,TELEFONO = ? WHERE FK_PERSONA = ?");
            pst.setString(1, direccion.getDescripcion());
            pst.setInt(2, direccion.getUbicacion());
            pst.setDate(3, direccion.getFecha());
            pst.setInt(4, direccion.getEstado());
            pst.setLong(5, direccion.getFk_divipo());
            pst.setString(6, direccion.getTelefono());
            pst.setLong(7, direccion.getFk_persona());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarEmpresa(Empresa empresa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE EMPRESA SET fk_divipo = ?,fecha = ?,razon_social = ?,sigla = ?,"
                    + "tipo_entidad = ?,tipo_sociedad = ?,prestador_servicio = ?,email = ?,telefono = ?,celular = ?,capital_pagado = ?,patrimonio_liquido = ?,"
                    + "nro_certificado = ?,fk_representante = ? WHERE ID_EMPRESA = ?");
            pst.setLong(1, empresa.getFk_divipo());
            pst.setDate(2, (Date) empresa.getFecha_exp());
            pst.setString(3, empresa.getRazon_social());
            pst.setString(4, empresa.getSigla());
            pst.setString(5, empresa.getTipo_entidad());
            pst.setString(6, empresa.getTipo_sociedad());
            pst.setString(7, empresa.getPrestador_servicio());
            pst.setString(8, empresa.getEmail());
            pst.setString(9, empresa.getTelefono());
            pst.setString(10, empresa.getCelular());
            pst.setString(11, empresa.getCapital_pagado());
            pst.setString(12, empresa.getPatrimonio_liquido());
            pst.setString(13, empresa.getNro_certificado());
            pst.setLong(14, empresa.getFk_representante());
            pst.setLong(15, empresa.getId_empresa());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public void actualizarRepresentante(Representante repres) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE REPRESENTANTES SET fk_persona = ?,tipo_contrato = ?,"
                    + "fecha_inicio_representacion = ?,estado_representacion = ?,fecha_vigencia = ? WHERE ID_REPRESENTANTE = ?");
            pst.setLong(1, repres.getFk_persona());
            pst.setString(2, repres.getTipo_contrato());
            pst.setDate(3, (Date) repres.getFecha_inicio_representacion());
            pst.setString(4, repres.getEstado_representacion());
            pst.setDate(5, (Date) repres.getFecha_vigencia());
            pst.setLong(6, repres.getId_representante());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public void adicionarRadicacionApoderados(Radicacion_Apoderado ra) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            if (ra.getFk_apoderado() != ra.getFk_propietario()) {
                pst = con.prepareStatement("INSERT INTO RADICACION_APODERADOS (FK_FORMULARIO,FK_PROPIETARIO,FK_APODERADO,FECHA_INICIO) VALUES (?,?,?,?)");
                pst.setLong(1, ra.getFk_formulario());
                pst.setLong(2, ra.getFk_propietario());
                pst.setLong(3, ra.getFk_apoderado());
                pst.setDate(4, ra.getFecha_inicio());
                pst.execute();
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public java.util.List consultarRadicacionesApoderados(long fk_formulario, long fk_persona)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("Select * From RADICACION_APODERADOS WHERE fk_formulario = ? and fk_propietario = ? and fecha_fin is null");
            pst.setLong(1, fk_formulario);
            pst.setLong(2, fk_persona);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Radicacion_Apoderado.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lista;

    }

    public String consultarParametroRUNT(String tabla, String codigo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaParametros = new LinkedList();

        try {
            pst = con.prepareStatement("SELECT DESCRIPCION FROM RUNT_PARAMETROS WHERE TABLA = ? AND PARAMETRO = ?");
            pst.setString(1, tabla);
            pst.setString(2, codigo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new SQLException(" Error! no se ha podido listar los parametros ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return "";
    }

    public String consultarParametroNameRUNT(String tabla, String codigo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaParametros = new LinkedList();

        try {
            pst = con.prepareStatement("SELECT DESCRIPCION FROM RUNT_PARAMETROS WHERE TABLA = ? AND PARAMETRO = ?");
            pst.setString(1, tabla);
            pst.setString(2, codigo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new SQLException(" Error! no se ha podido listar los parametros  ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return "";
    }

    public String obtenerPosiblePagoRUNT(String placa, long fk_persona, long fk_tramite, int tipo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            if (tipo == 1) {
                pst = con.prepareStatement("SELECT L.NUMERO_LIQUIDACION FROM RUNT_LIQUIDACION L WHERE L.PLACA = ? AND FK_TRAMITE = ? AND ESTADO = 1 ORDER BY L.NUMERO_LIQUIDACION DESC");
                pst.setString(1, placa.toUpperCase());
                pst.setLong(2, fk_tramite);
            } else {
                pst = con.prepareStatement("SELECT L.NUMERO_LIQUIDACION FROM RUNT_LIQUIDACION L WHERE L.FK_PERSONA = ? AND FK_TRAMITE = ? AND ESTADO = 1 ORDER BY L.NUMERO_LIQUIDACION DESC");
                pst.setLong(1, fk_persona);
                pst.setLong(2, fk_tramite);
            }
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return "";
    }

    public String obtenerPosiblePagoTRANSITO(String placa, long tramite) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT T.NUMERO_TIQUETE FROM TIQUETES T,DETALLE_TIQUETES D,PAGOS P "
                    + "WHERE T.ID_TIQUETE = D.FK_TIQUETE "
                    + "AND P.FK_TIQUETE = T.ID_TIQUETE "
                    + "AND D.FK_TRAMITE = ? "
                    + "AND ((T.FK_VEHICULO = (SELECT MAX(ID_VEHICULO) FROM VEHICULOS WHERE PLACA = ? and estado in  (1,5,3,4))) OR (T.DESCRIPCION = ?)) "
                    + "AND D.ESTADO = 1 "
                    + "AND T.ESTADO = 3 "
                    + "AND P.ID_PAGO NOT IN(SELECT R.FK_PAGO FROM RECLAMOS_PAGOS R WHERE R.PLACA IS NOT NULL AND R.ESTADO = 1) "
                    + "ORDER BY T.NUMERO_TIQUETE");
            pst.setLong(1, tramite);
            pst.setString(2, placa);
            pst.setString(3, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return "";
    }

    public String obtenerPosiblePagoTRANSITO(String placa, long tramite, String factura) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT T.NUMERO_TIQUETE FROM PAGOS P,TIQUETES T,DETALLE_TIQUETES D "
                    + "WHERE P.FK_TIQUETE = T.ID_TIQUETE "
                    + "AND T.ID_TIQUETE = D.FK_TIQUETE "
                    + "AND D.FK_TRAMITE = ? "
                    + "AND ((T.FK_VEHICULO = (SELECT max(ID_VEHICULO) FROM VEHICULOS WHERE PLACA = ? and  estado in (1,5))) OR (T.DESCRIPCION = ?)) "
                    + "AND D.ESTADO = 1 "
                    + "AND P.ESTADO = 3 "
                    + "AND T.NUMERO_TIQUETE = ? "
                    + "ORDER BY P.NUMERO_FACTURA");
            pst.setLong(1, tramite);
            pst.setString(2, placa);
            pst.setString(3, placa);
            pst.setString(4, factura);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } catch (Exception e) {
            System.out.println("obtenerPosiblePagoTRANSITO : /* " + e.getMessage() + " */");
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return "";
    }

    public void finalizarAlertas(long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE ALERTAS SET FECHA_FIN = ? WHERE FK_VEHICULO = ?");
            pst.setDate(1, new java.sql.Date(new java.util.Date().getTime()));
            pst.setLong(2, fk_vehiculo);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public String consultarConfiguracionAvaluo(int tipo, int vigencia, String referencia) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            if (tipo == 1) {
                pst = con.prepareStatement("SELECT VALOR FROM CONFIGURACION_AVALUOS WHERE TIPO_REGISTRO = ? AND VIGENCIA = ? AND REFERENCIA_1 = ?");
                pst.setInt(1, tipo);
                pst.setInt(2, vigencia);
                pst.setString(3, referencia);
            }
            if (tipo == 2) {
                pst = con.prepareStatement("SELECT VALOR FROM CONFIGURACION_AVALUOS WHERE TIPO_REGISTRO = ? AND VIGENCIA = ? AND REFERENCIA_1 <= ? AND (REFERENCIA_2 >= ? OR REFERENCIA_2 IS NULL)");
                pst.setInt(1, tipo);
                pst.setInt(2, vigencia);
                pst.setInt(3, Integer.parseInt(referencia));
                pst.setInt(4, Integer.parseInt(referencia));
            }
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public float consultarAvaluo(int tipo, int vigencia, String grupoLinea, int modelo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            if (tipo == 1) {
                pst = con.prepareStatement("SELECT VALOR FROM AVALUOS WHERE TIPO_REGISTRO = ? AND VIGENCIA = ? AND GRUPO_LINEA = ? AND MODELO = ?");
                pst.setInt(1, tipo);
                pst.setInt(2, vigencia);
                pst.setString(3, grupoLinea);
                pst.setInt(4, modelo);
            }
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return 0;
    }

    public boolean actualizarInteresesCostasVehiculos(long fk_vehiculo, long usuario) throws Exception {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            System.out.println("FK_Vehiculo: " + fk_vehiculo);
            procesos.calcularIntereses calcularI = new procesos.calcularIntereses();
            int s = consultarMaxCodigo();
            String tasas[][] = getIntereses();
            calcularI.setTasas("s", s, tasas);
            pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE FK_VEHICULO = ? AND ESTADO_CARTERA = 1  AND TIPO = 2 ORDER BY FECHA_CREACION,REFERENCIA");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            con.setAutoCommit(false);
            List<String> Permitidas = new ArrayList<String>();
            while (rst.next()) {
                Cartera cartera = Cartera.Load(rst);                

                /*   if(sw==1){
                long descuento = consultarDescuentoInternacion(fk_vehiculo , 1);
                if(descuento==0){
                if(referencia==2013){
                Detalle_Cartera dtcartera = consultarDetalleCartera(cartera.getId_cartera(), 1093);
                if(dtcartera!=null){
                eliminarDescuentoInternacionDC(dtcartera.getFk_cartera(), dtcartera.getReferencia(), 1093);
                }
                }
                }
                }*/
                int idc = cartera.getTipo() == 1 ? 318 : cartera.getTipo() == 2 ? 249 : 319;
                java.util.Date fechaInicio = new java.util.Date(cartera.getFecha_saldo().getTime());
                java.util.Date fechaRef = new java.util.Date(tasas[0][0]);
                java.util.Date fechaActual = new java.util.Date();
                fechaInicio = fechaInicio.getTime() < fechaRef.getTime() ? fechaRef : fechaInicio;
                float valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 3);
                System.out.println("fecha ini=" + fechaInicio + " fecha actual=" + fechaActual + " valor real=" + valorReal);
                float interes = calcularI.getValor(fechaInicio, fechaActual, valorReal);
                float descuento = 0;
                System.out.println("interes  erty =" + interes);
                int interesR = Math.round(interes);
                //    System.out.println("interesR="+interesR);
                interesR = interesR <= 0 ? 0 : interesR;
                boolean existeC = existeConcepto(idc, cartera.getId_cartera());
                String fecha_hoy = new java.text.SimpleDateFormat("dd/MM/yyyy").format(new java.util.Date());
                /*Nuevo*/
                Conf_Descuento cd = null;//new Conf_Descuento().getCnf_des(this, 1, idc, fecha_hoy);
                if (cd != null) {
                    boolean ws = false;
                    if (Permitidas.isEmpty()) {
                        for (int i = Integer.parseInt(cd.getVig_inicial()); i <= Integer.parseInt(cd.getVig_final()); i++) {
                            Permitidas.add(i + "");
                        }
                    }

                    if (!Permitidas.contains(cartera.getReferencia())) {
                        //null
                    } else {
                        int interesD = (int) ((interesR * cd.getPorcentaje()) / 100);
                        descuento = -interesD;

                        if (!existeConcepto((int) cd.getFk_concepto_desc(), cartera.getId_cartera())) {
                            Detalle_Cartera dc = new Detalle_Cartera();
                            dc.setEstado(1);
                            dc.setFecha(cartera.getFecha_creacion());
                            dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                            dc.setFk_cartera(cartera.getId_cartera());
                            dc.setFk_concepto(cd.getFk_concepto_desc());
                            dc.setFk_usuario(usuario);
                            dc.setReferencia(cartera.getReferencia());
                            dc.setValor(-interesD);
                            adicionarDetalleCartera(dc);
                        } else {
                            actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) -interesD);
                        }
                        ws = true;
                    }
                } else {
                    new Conf_Descuento().eliminarDescuento(this, fk_vehiculo, consultarUsuario(usuario), 1);
                }
                /*Nuevo*/
 /*if(sw==2){
                boolean ws = false;
                if(new java.text.SimpleDateFormat("dd/MM/yyyy").parse(new java.text.SimpleDateFormat("dd/MM/yyyy").format(fechaActual)).getTime() <= new java.text.SimpleDateFormat("dd/MM/yyyy").parse("26/09/2013").getTime()){
                if(!cartera.getReferencia().equals("2011") && !cartera.getReferencia().equals("2012") && !cartera.getReferencia().equals("2013")){
                int interesD =(int)((interesR*80)/100);
                System.out.println("/*interesD"+interesD);
                System.out.println("/*interesR"+interesR);
                interesR = interesR - interesD;
                System.out.println("/*interesRD"+interesR);
                ws=true;
                }
                }
                }*/
                java.text.SimpleDateFormat formato = new java.text.SimpleDateFormat("dd/MM/yyyy");
                String fechaInicio2 = formato.format(fechaInicio);
                //    System.out.println("Fecha inicio= "+fechaInicio2);

                String fechaActual2 = formato.format(fechaActual);
                //     System.out.println("Fecha Actual= "+fechaActual2);

                //java.util.Date fechaActual3 = formato.parse(fechaActual2);
                //java.util.Date fechaInicio3 = formato.parse(fechaInicio2);
                if (!fechaInicio2.equals(fechaActual2) || fechaInicio.after(fechaActual)) {
                    if (!existeC) {
                        if (interesR > 0) {
                            Detalle_Cartera dc = new Detalle_Cartera();
                            dc.setEstado(1);
                            dc.setFecha(cartera.getFecha_creacion());
                            dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                            dc.setFk_cartera(cartera.getId_cartera());
                            dc.setFk_concepto(idc);
                            dc.setFk_usuario(usuario);
                            dc.setReferencia(cartera.getReferencia());
                            dc.setValor(interesR);
                            adicionarDetalleCartera(dc);
                        }
                    } else {
                        actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) interesR);
                    }

                    if (interesR >= 0) {
                        idc = cartera.getTipo() == 1 ? 302 : cartera.getTipo() == 2 ? 276 : 303;
                        interes = Float.parseFloat(consultarPorcentajeCostas(cartera.getEstado_vigencia(), cartera.getFk_concepto()));
                        valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 4);
                        float costas = (float) ((valorReal + descuento) * interes);
                        int costasR = Math.round(costas);
                        costasR = costasR < 0 ? 0 : costasR;
                        costasR = interesR == 0 ? 0 : costasR;
                        existeC = existeConcepto(idc, cartera.getId_cartera());
                        if (!existeC) {
                            if (costasR > 0) {
                                Detalle_Cartera dc = new Detalle_Cartera();
                                dc.setEstado(1);
                                dc.setFecha(cartera.getFecha_creacion());
                                dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                                dc.setFk_cartera(cartera.getId_cartera());
                                dc.setFk_concepto(idc);
                                dc.setFk_usuario(usuario);
                                dc.setReferencia(cartera.getReferencia());
                                float iva = ((costasR * 19) / 100);
                                System.out.println("Iva :" + iva);
                                costasR += iva;
                                dc.setValor(costasR);
                                adicionarDetalleCartera(dc);
                            }
                        } else {
                            float iva = ((costasR * 19) / 100);
                            System.out.println("Iva :" + iva);
                            costasR += iva;
                            actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) costasR);
                        }
                    }
                    actualizarValoresCartera(cartera.getId_cartera());
                    con.commit();
                }
            }
            System.out.println("Actualizo los Intereses");
            return true;
        } catch (Exception exc) {
            System.out.println("No se actualizo intereses " + exc);
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
            }
        }

        return false;
    }

    /*prueba WS interes Descuento*/
    public boolean actualizarInteresesCostasVehiculos(long fk_vehiculo, long usuario, java.sql.Date fechaPago) throws Exception {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            System.out.println("Ws FK_Vehiculo: " + fk_vehiculo);
            procesos.calcularIntereses calcularI = new procesos.calcularIntereses();
            int s = consultarMaxCodigo();
            String tasas[][] = getIntereses();
            calcularI.setTasas("s", s, tasas);
            pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE FK_VEHICULO = ? AND ESTADO_CARTERA = 1 ORDER BY FECHA_CREACION,REFERENCIA");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            con.setAutoCommit(false);
            List<String> Permitidas = new ArrayList<String>();
            while (rst.next()) {
                Cartera cartera = Cartera.Load(rst);
                long referencia = Long.parseLong(cartera.getReferencia());

                /*   if(sw==1){
                long descuento = consultarDescuentoInternacion(fk_vehiculo , 1);
                if(descuento==0){
                if(referencia==2013){
                Detalle_Cartera dtcartera = consultarDetalleCartera(cartera.getId_cartera(), 1093);
                if(dtcartera!=null){
                eliminarDescuentoInternacionDC(dtcartera.getFk_cartera(), dtcartera.getReferencia(), 1093);
                }
                }
                }
                }*/
                int idc = cartera.getTipo() == 1 ? 318 : cartera.getTipo() == 2 ? 249 : 319;
                java.util.Date fechaInicio = new java.util.Date(cartera.getFecha_saldo().getTime());
                java.util.Date fechaRef = new java.util.Date(tasas[0][0]);
                java.util.Date fechaActual = new java.util.Date();
                java.util.Date fechaP = new java.util.Date(fechaPago.getTime());
                fechaInicio = fechaInicio.getTime() < fechaRef.getTime() ? fechaRef : fechaInicio;
                float valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 3);
                System.out.println("fecha ini=" + fechaInicio + " fecha actual=" + fechaActual + " valor real=" + valorReal);
                float interes = calcularI.getValor(fechaInicio, fechaActual, valorReal);
                float descuento = 0;
                System.out.println("interes  erty =" + interes);
                int interesR = Math.round(interes);
                //    System.out.println("interesR="+interesR);
                interesR = interesR <= 0 ? 0 : interesR;
                boolean existeC = existeConcepto(idc, cartera.getId_cartera());
                String fecha_hoy = new java.text.SimpleDateFormat("dd/MM/yyyy").format(fechaP);
                /*Nuevo*/
                Conf_Descuento cd = null;// new Conf_Descuento().getCnf_des(this, 1, idc, fecha_hoy);
                if (cd != null) {
                    if (Permitidas.isEmpty()) {
                        for (int i = Integer.parseInt(cd.getVig_inicial()); i <= Integer.parseInt(cd.getVig_final()); i++) {
                            Permitidas.add(i + "");
                        }
                    }

                    if (!Permitidas.contains(cartera.getReferencia())) {
                        //null
                    } else {
                        int interesD = (int) ((interesR * cd.getPorcentaje()) / 100);
                        descuento = -interesD;

                        if (!existeConcepto((int) cd.getFk_concepto_desc(), cartera.getId_cartera())) {
                            Detalle_Cartera dc = new Detalle_Cartera();
                            dc.setEstado(1);
                            dc.setFecha(cartera.getFecha_creacion());
                            dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                            dc.setFk_cartera(cartera.getId_cartera());
                            dc.setFk_concepto(cd.getFk_concepto_desc());
                            dc.setFk_usuario(usuario);
                            dc.setReferencia(cartera.getReferencia());
                            dc.setValor(-interesD);
                            adicionarDetalleCartera(dc);
                        } else {
                            actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) -interesD);
                        }
                    }
                } else {
                    new Conf_Descuento().eliminarDescuento(this, fk_vehiculo, consultarUsuario(usuario), 1);
                }
                /*Nuevo*/
                java.text.SimpleDateFormat formato = new java.text.SimpleDateFormat("dd/MM/yyyy");
                String fechaInicio2 = formato.format(fechaInicio);
                System.out.println("Fecha inicio= " + fechaInicio2);

                String fechaActual2 = formato.format(fechaP);
                System.out.println("Fecha Actual= " + fechaActual2);

                //java.util.Date fechaActual3 = formato.parse(fechaActual2);
                //java.util.Date fechaInicio3 = formato.parse(fechaInicio2);
                if (!fechaInicio2.equals(fechaActual2) || fechaInicio.after(fechaP)) {
                    if (!existeC) {
                        if (interesR > 0) {
                            Detalle_Cartera dc = new Detalle_Cartera();
                            dc.setEstado(1);
                            dc.setFecha(cartera.getFecha_creacion());
                            dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                            dc.setFk_cartera(cartera.getId_cartera());
                            dc.setFk_concepto(idc);
                            dc.setFk_usuario(usuario);
                            dc.setReferencia(cartera.getReferencia());
                            dc.setValor(interesR);
                            adicionarDetalleCartera(dc);
                        }
                    } else {
                        actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) interesR);
                    }

                    if (interesR >= 0) {
                        System.out.println("Descuento: " + descuento);
                        idc = cartera.getTipo() == 1 ? 302 : cartera.getTipo() == 2 ? 276 : 303;
                        interes = Float.parseFloat(consultarPorcentajeCostas(cartera.getEstado_vigencia(), cartera.getFk_concepto()));
                        valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 4);
                        System.out.println("Valor :" + valorReal + " > " + interes);
                        float costas = (float) ((valorReal + descuento) * interes);
                        int costasR = Math.round(costas);
                        costasR = costasR < 0 ? 0 : costasR;
                        costasR = interesR == 0 ? 0 : costasR;
                        existeC = existeConcepto(idc, cartera.getId_cartera());
                        if (!existeC) {
                            if (costasR > 0) {
                                Detalle_Cartera dc = new Detalle_Cartera();
                                dc.setEstado(1);
                                dc.setFecha(cartera.getFecha_creacion());
                                dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                                dc.setFk_cartera(cartera.getId_cartera());
                                dc.setFk_concepto(idc);
                                dc.setFk_usuario(usuario);
                                dc.setReferencia(cartera.getReferencia());
                                float iva = ((costasR * 19) / 100);
                                System.out.println("Iva :" + iva);
                                costasR += iva;
                                dc.setValor(costasR);
                                adicionarDetalleCartera(dc);
                            }
                        } else {
                            float iva = ((costasR * 19) / 100);
                            System.out.println("Iva :" + iva);
                            costasR += iva;
                            actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) costasR);
                        }
                    }
                    actualizarValoresCartera(cartera.getId_cartera());
                    con.commit();
                }
            }
            return true;
        } catch (Exception exc) {
            System.out.println("No se actualizo intereses " + exc);
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
            }
        }
        return false;
    }

    /*END PRUEBA*/
 /*
    public void actualizarInteresesCostasVehiculos(long fk_vehiculo, long usuario) throws Exception {
    if (!hayConexion()) {
    throw new SQLException("NO HAY CONEXION");
    }
    PreparedStatement pst = null;
    ResultSet rst = null;
    try {
    procesos.calcularIntereses calcularI = new procesos.calcularIntereses();
    int s = consultarMaxCodigo();
    String tasas[][] = getIntereses();
    calcularI.setTasas("s", s, tasas);
    pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE FK_VEHICULO = ? AND ESTADO_CARTERA = 1 ORDER BY FECHA_CREACION,REFERENCIA");
    pst.setLong(1, fk_vehiculo);
    rst = pst.executeQuery();
    while (rst.next()) {
    Cartera cartera = Cartera.Load(rst);
    int idc = cartera.getTipo() == 1 ? 318 : cartera.getTipo() == 2 ? 249 : 319;
    java.util.Date fechaInicio = new java.util.Date(cartera.getFecha_saldo().getTime());
    java.util.Date fechaRef = new java.util.Date(tasas[0][0]);
    java.util.Date fechaActual = new java.util.Date();
    fechaInicio = fechaInicio.getTime() < fechaRef.getTime() ? fechaRef : fechaInicio;
    float valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 3);
    float interes = calcularI.getValor(fechaInicio, fechaActual, valorReal);
    int interesR = Math.round(interes);
    interesR = interesR <= 0 ? 0 : interesR;
    boolean existeC = existeConcepto(idc, cartera.getId_cartera());
    if (!existeC) {
    if (interesR > 0) {
    Detalle_Cartera dc = new Detalle_Cartera();
    dc.setEstado(1);
    dc.setFecha(cartera.getFecha_creacion());
    dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
    dc.setFk_cartera(cartera.getId_cartera());
    dc.setFk_concepto(idc);
    dc.setFk_usuario(usuario);
    dc.setReferencia(cartera.getReferencia());
    dc.setValor(interesR);
    adicionarDetalleCartera(dc);
    }
    } else {
    actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) interesR);
    }
    if (interesR >= 0) {
    idc = cartera.getTipo() == 1 ? 302 : cartera.getTipo() == 2 ? 276 : 303;
    interes = Float.parseFloat(consultarPorcentajeCostas(cartera.getEstado_vigencia(), cartera.getFk_concepto()));
    valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 4);
    float costas = (float) (valorReal * interes);
    int costasR = Math.round(costas);
    costasR = costasR < 0 ? 0 : costasR;
    costasR = interesR == 0 ? 0 : costasR;
    existeC = existeConcepto(idc, cartera.getId_cartera());
    if (!existeC) {
    if (costasR > 0) {
    Detalle_Cartera dc = new Detalle_Cartera();
    dc.setEstado(1);
    dc.setFecha(cartera.getFecha_creacion());
    dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
    dc.setFk_cartera(cartera.getId_cartera());
    dc.setFk_concepto(idc);
    dc.setFk_usuario(usuario);
    dc.setReferencia(cartera.getReferencia());
    dc.setValor(costasR);
    adicionarDetalleCartera(dc);
    }
    } else {
    actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) costasR);
    }
    }
    actualizarValoresCartera(cartera.getId_cartera());
    con.commit();
    }
    } catch (Exception exc) {
    System.out.println("No se actualizo intereses " + exc);
    } finally {
    if (rst != null) {
    rst.close();
    }
    if (pst != null) {
    pst.close();
    }
    }


    }*/
    public String consultarPorcentajeCostas(int estado, long concepto) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT INTERES FROM COSTAS WHERE FK_CONCEPTO = ? AND ESTADO_CONCEPTO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, concepto);
            pst.setInt(2, estado);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return "0";

    }

    public int consultarMaxCodigo() throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT MAX(ID_INTERESES) FROM INTERESES");
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getInt(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return 0;

    }

    public String[][] getIntereses() throws Exception {

        PreparedStatement pst = null;
        ResultSet rst = null;
        String tasa[][] = new String[consultarMaxCodigo()][3];
        try {
            pst = con.prepareStatement("SELECT FECHA_INICIO,FECHA_FIN,TASA FROM INTERESES ORDER BY ID_INTERESES");
            rst = pst.executeQuery();
            int i = 0;
            while (rst.next()) {
                tasa[i][0] = rst.getString(1);
                tasa[i][1] = rst.getString(2);
                tasa[i][2] = rst.getString(3);
                i++;
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return tasa;
    }

    public boolean existeConcepto(int concepto, long cartera) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT FK_CONCEPTO FROM DETALLE_CARTERAS WHERE FK_CARTERA = ? AND FK_CONCEPTO = ? AND ESTADO = 1");
            pst.setLong(1, cartera);
            pst.setInt(2, concepto);
            rst = pst.executeQuery();
            if (rst.next()) {
                if (rst.getString(1) != null) {
                    return true;
                }
            }
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
                pst = null;
            }
        }
        return false;
    }

    public void actualizarDetalleCartera(long fk_cartera, int estado, long fk_concepto, double valor) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DETALLE_CARTERAS SET VALOR = ? WHERE FK_CARTERA = ? AND FK_CONCEPTO = ? AND ESTADO = ?");
            pst.setDouble(1, valor);
            pst.setLong(2, fk_cartera);
            pst.setLong(3, fk_concepto);
            pst.setInt(4, estado);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public LinkedList consultarColoresPlaca(String placa) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList historicos_colores = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM HISTORICO_COLOR H, VEHICULOS V WHERE H.FK_VEHICULO = V.ID_VEHICULO AND V.PLACA = ? ORDER BY FECHA_INI");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    historicos_colores.add(Historico_Color.load(rst));
                }
            }
        } catch (Exception e) {
            throw new SQLException("No se ha podido listar el historico color debido a  " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return historicos_colores;
    }

    public Historico_Color consultarHistoricoColor(long id_historico) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM HISTORICO_COLOR WHERE ID_HISTORICO = ?");
            pst.setLong(1, id_historico);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Historico_Color.load(rst);
                }
            }
        } catch (Exception e) {
            throw new SQLException("No se ha podido listar el historico color debido a  " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public java.util.List consultarTiposDeFinanciacion(long sede) throws SQLException {
        /*
         * Jorge Lopez
         */

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT * FROM tipo_financiacion WHERE fk_sede = ? and fecha_fin is null");
            pst.setLong(1, sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Tipo_Financiacion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return lista;

    }

    public long consultarCartera(long fk_sede, int tipo, String referencia, long fk_concepto) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT ID_CARTERA FROM CARTERAS WHERE FK_SEDE = ? AND TIPO = ? AND REFERENCIA = ? AND FK_CONCEPTO = ?");
            pst.setLong(1, fk_sede);
            pst.setInt(2, tipo);
            pst.setString(3, referencia);
            pst.setLong(4, fk_concepto);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return 0;

    }

    public Financiacion consultarFinanciacion(long idFinanciacion) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM FINANCIACIONES WHERE ID_FINANCIACION = ?");
            pst.setLong(1, idFinanciacion);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Financiacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }

    public Tipo_Financiacion consultarTipoDeFinanciacion(long id_tipo_financiacion)
            throws SQLException {
        /*
         * fecha 20/02/2010
         * Jorge Lopez
         */

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM tipo_financiacion WHERE ID_TIPO_FINANCIACION = ? and fecha_fin is null");
            pst.setLong(1, id_tipo_financiacion);
            rst = pst.executeQuery();
            while (rst.next()) {
                return Tipo_Financiacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return null;

    }

    public static String edicionFechas(long id, String fechaInicio, String fechaFin, java.util.List colores) {
        int sips = 1;
        try {
            java.sql.Date fi = new java.sql.Date(new java.text.SimpleDateFormat("dd/MM/yyyy").parse(fechaInicio).getTime());
            java.sql.Date ff = null;
            if (fechaFin != null) {
                if (fechaFin.length() == 10) {
                    ff = new java.sql.Date(new java.text.SimpleDateFormat("dd/MM/yyyy").parse(fechaFin).getTime());
                    if (fi.getTime() > ff.getTime()) {
                        return "Fecha final debe ser mayor o igual que la inicial";//Fecha inicio debe ser menor que fecha fin
                    }
                }
            }
            for (int i = 0; i < colores.size(); i++) {
                Historico_Color hc = (Historico_Color) colores.get(i);
                if (hc.getId_historico() == id) {
                    colores.remove(i);
                }
            }
            if (colores.size() - 1 > 0) {
                for (int i = 0; i < colores.size() - 1; i++) {
                    Historico_Color hc0 = (Historico_Color) colores.get(i);
                    Historico_Color hc1 = (Historico_Color) colores.get(i + 1);
                    if (hc1.getFecha_fin() == null) {
                        if (ff != null) {
                            if ((fi.getTime() >= hc0.getFecha_fin().getTime() && ff.getTime() <= hc1.getFecha_ini().getTime()) || (ff.getTime() <= hc0.getFecha_ini().getTime() && ff.getTime() >= fi.getTime())) {
                                sips++;
                            } else {
                                return "Las fechas se cruzan con los registros existentes";
                            }
                        } else {
                            return "No pueden existir dos registros con fechas finales nulas";
                        }
                    } else if (ff != null) {
                        if ((fi.getTime() >= hc0.getFecha_fin().getTime() && ff.getTime() <= hc1.getFecha_ini().getTime()) || (ff.getTime() <= hc0.getFecha_ini().getTime() && ff.getTime() >= fi.getTime()) || (fi.getTime() >= hc1.getFecha_fin().getTime() && ff.getTime() >= fi.getTime())) {
                            sips++;
                        } else {
                            return "Las fechas se cruzan con los registros existentes";
                        }
                    } else if (fi.getTime() >= hc1.getFecha_fin().getTime()) {
                        sips++;
                    } else {
                        return "Las fechas se cruzan con los registros existentes";
                    }
                }
            } else {
                Historico_Color hc = (Historico_Color) colores.get(0);
                if (hc.getFecha_fin() != null) {
                    if (ff != null) {
                        if (hc.getFecha_fin().getTime() <= fi.getTime() || hc.getFecha_ini().getTime() >= ff.getTime()) {
                            return "";
                        } else {
                            return "Las fechas se cruzan con los registros existentes1";
                        }
                    } else if (fi.getTime() >= hc.getFecha_fin().getTime()) {
                        return "";
                    } else {
                        return "Las fechas se cruzan con los registros existentes2";
                    }
                } else if (ff == null) {
                    return "No pueden existir dos registros con fechas finales nulas3";
                } else if (ff.getTime() <= hc.getFecha_ini().getTime()) {
                    return "";
                } else {
                    return "Las fechas se cruzan con los registros existentes4" + (ff.getTime() <= hc.getFecha_ini().getTime()) + " - " + ff.getTime() + "<=" + hc.getFecha_ini().getTime();
                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        if (colores.size() != sips) {
            return "Las fechas se cruzan con los registros existentes";
        }

        return "";
    }

    public static String edicionFechas2(long id, String fechaInicio, String fechaFin, java.util.List datosVehiculos) {
        int sips = 1;
        try {
            java.sql.Date fi = new java.sql.Date(new java.text.SimpleDateFormat("dd/MM/yyyy").parse(fechaInicio).getTime());
            java.sql.Date ff = null;
            if (fechaFin != null) {
                if (fechaFin.length() == 10) {
                    ff = new java.sql.Date(new java.text.SimpleDateFormat("dd/MM/yyyy").parse(fechaFin).getTime());
                    if (fi.getTime() > ff.getTime()) {
                        return "Fecha final debe ser mayor o igual que la inicial";//Fecha inicio debe ser menor que fecha fin
                    }
                }
            }
            for (int i = 0; i < datosVehiculos.size(); i++) {
                DatosVehiculo hc = (DatosVehiculo) datosVehiculos.get(i);
                if (hc.getId_datoVehiculo() == id) {
                    datosVehiculos.remove(i);
                }
            }
            if (datosVehiculos.size() - 1 > 0) {
                for (int i = 0; i < datosVehiculos.size() - 1; i++) {
                    DatosVehiculo hc0 = (DatosVehiculo) datosVehiculos.get(i);
                    DatosVehiculo hc1 = (DatosVehiculo) datosVehiculos.get(i + 1);
                    if (hc1.getFecha_fin() == null) {
                        if (ff != null) {
                            if ((fi.getTime() >= hc0.getFecha_fin().getTime() && ff.getTime() <= hc1.getFecha_ini().getTime()) || (ff.getTime() <= hc0.getFecha_ini().getTime() && ff.getTime() >= fi.getTime())) {
                                sips++;
                            } else {
                                return "Las fechas se cruzan con los registros existentes";
                            }
                        } else {
                            return "No pueden existir dos registros con fechas finales nulas";
                        }
                    } else if (ff != null) {
                        if ((fi.getTime() >= hc0.getFecha_fin().getTime() && ff.getTime() <= hc1.getFecha_ini().getTime()) || (ff.getTime() <= hc0.getFecha_ini().getTime() && ff.getTime() >= fi.getTime()) || (fi.getTime() >= hc1.getFecha_fin().getTime() && ff.getTime() >= fi.getTime())) {
                            sips++;
                        } else {
                            return "Las fechas se cruzan con los registros existentes";
                        }
                    } else if (fi.getTime() >= hc1.getFecha_fin().getTime()) {
                        sips++;
                    } else {
                        return "Las fechas se cruzan con los registros existentes";
                    }
                }
            } else {
                DatosVehiculo hc = (DatosVehiculo) datosVehiculos.get(0);
                if (hc.getFecha_fin() != null) {
                    if (ff != null) {
                        if (hc.getFecha_fin().getTime() <= fi.getTime() || hc.getFecha_ini().getTime() >= ff.getTime()) {
                            return "";
                        } else {
                            return "Las fechas se cruzan con los registros existentes1";
                        }
                    } else if (fi.getTime() >= hc.getFecha_fin().getTime()) {
                        return "";
                    } else {
                        return "Las fechas se cruzan con los registros existentes2";
                    }
                } else if (ff == null) {
                    return "No pueden existir dos registros con fechas finales nulas3";
                } else if (ff.getTime() <= hc.getFecha_ini().getTime()) {
                    return "";
                } else {
                    return "Las fechas se cruzan con los registros existentes4" + (ff.getTime() <= hc.getFecha_ini().getTime()) + " - " + ff.getTime() + "<=" + hc.getFecha_ini().getTime();
                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        if (datosVehiculos.size() != sips) {
            return "Las fechas se cruzan con los registros existentes";
        }

        return "";
    }

    public void actualizarHistoricoColor(Historico_Color historico_color) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE HISTORICO_COLOR SET FK_COLOR = ?,FK_VEHICULO = ?,GAMA = ?,SECUENCIA = ?,FECHA_INI = ?,FECHA_FIN = ?,FK_USUARIO = ? WHERE ID_HISTORICO = ?");
            pst.setLong(1, historico_color.getFk_color());
            pst.setLong(2, historico_color.getFk_vehiculo());
            pst.setString(3, historico_color.getGama());
            pst.setInt(4, historico_color.getSecuencia());
            pst.setDate(5, historico_color.getFecha_ini());
            pst.setDate(6, historico_color.getFecha_fin());
            pst.setLong(7, historico_color.getFk_usuario());
            pst.setLong(8, historico_color.getId_historico());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public long adicionarFinanciacion(Financiacion financiacion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet srk = null;
        try {
            pst = con.prepareStatement("insert into financiaciones (fk_usuario,fecha,numero,"
                    + "valor,cuotas,cuota_inicial,periodo_gracia,estado,fecha_proceso,observacion,fk_tipo_financiacion,"
                    + "fk_persona,fk_sede"
                    + "" + (financiacion.getFk_vehiculo() != 0 ? ",fk_vehiculo" : "") + ")"
                    + " values(?,?,?,?,?,?,?,?,?,?,?,?,?" + (financiacion.getFk_vehiculo() != 0 ? ",?" : "") + ")", new String[]{"ID_FINANCIACION"});

            pst.setLong(1, financiacion.getFk_usuario());
            pst.setDate(2, financiacion.getFecha());
            pst.setString(3, financiacion.getNumero());
            pst.setFloat(4, financiacion.getValor());
            pst.setInt(5, financiacion.getCuotas());
            pst.setFloat(6, financiacion.getCuota_inicial());
            pst.setInt(7, financiacion.getPeriodo_gracia());
            pst.setInt(8, financiacion.getEstado());
            pst.setTimestamp(9, financiacion.getFecha_proceso());
            pst.setString(10, financiacion.getObservacion());
            pst.setLong(11, financiacion.getFk_tipo_financiacion());
            pst.setLong(12, financiacion.getFk_persona());
            pst.setLong(13, financiacion.getFk_sede());

            if (financiacion.getFk_vehiculo() != 0) {
                pst.setLong(14, financiacion.getFk_vehiculo());
            }
            pst.executeUpdate();
            srk = pst.getGeneratedKeys();
            if (srk != null) {
                if (srk.next()) {
                    return srk.getLong(1);
                }
            }

        } finally {
            if (srk != null) {
                srk.close();
            }
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    public HashMap detalleCarterasFinanciacion(java.util.List id_carteras) throws SQLException {
        java.util.HashMap<Long, Float> mapa = new java.util.HashMap<Long, Float>();
        float total = 0;
        for (int i = 0; i < id_carteras.size(); i++) {
            long id = Long.parseLong(id_carteras.get(i).toString());
            java.util.List<Detalle_Cartera> lista_dc = listarDetalleCartera(id);
            for (int j = 0; j < lista_dc.size(); j++) {
                Detalle_Cartera detalle_Cartera = lista_dc.get(j);
                if (!mapa.containsKey(detalle_Cartera.getFk_concepto())) {
                    mapa.put(detalle_Cartera.getFk_concepto(), detalle_Cartera.getValor());
                } else {
                    float valor = mapa.get(detalle_Cartera.getFk_concepto());
                    mapa.put(detalle_Cartera.getFk_concepto(), valor + detalle_Cartera.getValor());
                }
                total += detalle_Cartera.getValor();
            }
        }
        float diferencia = 0;
        long key = 0;
        float porcentaje = 0;
        for (Iterator<Long> it = mapa.keySet().iterator(); it.hasNext();) {
            key = it.next();
            porcentaje = (float) (mapa.get(key) / total);
            mapa.put(key, porcentaje);
            diferencia += porcentaje;
        }
        diferencia = 1 - diferencia;
        mapa.put(key, porcentaje + diferencia);
        return mapa;
    }

    public void adicionarDetalleFinanciacion(Detalle_Financiacion detalle_financiacion)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO DETALLES_FINANCIACIONES(FK_FINANCIACION,FK_CARTERA,CUOTA,VALOR,SALDO,ESTADO,INTERESES,FECHA_PAGO,FECHA_PROCESO) VALUES(?,?,?,?,?,?,?,?,?)");
            pst.setLong(1, detalle_financiacion.getFk_financiacion());
            pst.setLong(2, detalle_financiacion.getFk_cartera());
            pst.setInt(3, detalle_financiacion.getCuota());
            pst.setFloat(4, detalle_financiacion.getValor());
            pst.setFloat(5, detalle_financiacion.getSaldo());
            pst.setInt(6, detalle_financiacion.getEstado());
            pst.setFloat(7, detalle_financiacion.getIntereses());
            pst.setDate(8, detalle_financiacion.getFecha_pago());
            pst.setTimestamp(9, detalle_financiacion.getFecha_proceso());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarFinanciacionCartera(Financiacion_Cartera financiacion_cartera)
            /*
             * Author     : Jorge Lopez
             */
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO FINANCIACION_CARTERA(FK_FINANCIACION,FK_CARTERA) VALUES(?,?)");
            pst.setLong(1, financiacion_cartera.getFk_financiacion());
            pst.setLong(2, financiacion_cartera.getFk_cartera());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public float valorDetalleCarteraAtributos(long fk_cartera, long fk_sede, int atributo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT NVL(SUM(D.VALOR),0) FROM DETALLE_CARTERAS D,ATRIBUTO_CONCEPTOS A WHERE D.FK_CARTERA = ? AND A.FK_SEDE = ? AND D.ESTADO = 1 AND A.FK_CONCEPTO = D.FK_CONCEPTO AND A.TIPO_ATRIBUTO = ? AND A.VALOR = 1 ");
            pst.setLong(1, fk_cartera);
            pst.setLong(2, fk_sede);
            pst.setInt(3, atributo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return 0;
    }

    public boolean tienePermiso(long fk_usuario, int fk_recurso) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT COUNT(*) FROM USUARIOS US,CONF_USUARIO_PERFILES UP,CONF_PERFIL_RECURSOS PR "
                    + "WHERE US.ID_USUARIO = UP.FK_USUARIO AND UP.FK_PERFIL = PR.FK_PERFIL AND US.ID_USUARIO = ? "
                    + "AND PR.FK_RECURSO = ? AND PR.FECHA_FINAL IS NULL");
            pst.setLong(1, fk_usuario);
            pst.setInt(2, fk_recurso);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getInt(1) >= 1;
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return false;
    }

    public Movimiento ConsultarMovimientoVehiculo(long id_vehiculo) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM movimientos WHERE fk_vehiculo = ? AND ESTADO = 1 order by Fecha_Movimiento desc");
            pst.setLong(1, id_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Movimiento.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return null;
    }

    public void adicionarMovimientoVehiculo(Movimiento mov) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {
            pst = con.prepareStatement("INSERT INTO MOVIMIENTOS(FK_SEDE,NUMERO_LICENCIA,FECHA_MOVIMIENTO,FK_USUARIO_MOVIMIENTO,FK_VEHICULO,TIPO_MOVIMIENTO,ESTADO) VALUES(?,?,?,?,?,?,?)");
            pst.setLong(1, mov.getFk_sede());
            pst.setString(2, mov.getNumero_licencia());
            pst.setTimestamp(3, mov.getFecha_movimiento());
            pst.setLong(4, mov.getFk_usuario_movimiento());
            pst.setLong(5, mov.getFk_vehiculo());
            pst.setInt(6, mov.getTipo_movimiento());
            pst.setInt(7, mov.getEstado());
            pst.execute();

        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido adicionar el movimiento : " + e.toString());
        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

    }

    public void actualizarMovimientoVehiculo(Movimiento mov) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {
            if (mov.getTipo_movimiento() == 1) {
                pst = con.prepareStatement("UPDATE movimientos SET fk_sede = ?, numero_licencia = ?,estado = ? WHERE id_movimiento = ?");
                pst.setLong(1, mov.getFk_sede());
                pst.setString(2, mov.getNumero_licencia());
                pst.setInt(3, mov.getEstado());
                pst.setLong(4, mov.getId_movimiento());
            } else {
                pst = con.prepareStatement("UPDATE movimientos SET fk_sede = ?, numero_licencia = ?, fecha_movimiento = ?, numero_guia = ?,"
                        + " responsable_envio =?, fecha_envio = ?, estado_envio = ?,fk_usuario_envio = ?,estado = ? WHERE id_movimiento = ?");
                pst.setLong(1, mov.getFk_sede());
                pst.setString(2, mov.getNumero_licencia());
                pst.setTimestamp(3, mov.getFecha_movimiento());
                pst.setString(4, mov.getNumero_guia());
                pst.setString(5, mov.getResponsable_envio());
                pst.setTimestamp(6, mov.getFecha_envio());
                pst.setInt(7, mov.getEstado_envio());
                pst.setLong(8, mov.getFk_usuario_envio());
                pst.setInt(9, mov.getEstado());
                pst.setLong(10, mov.getId_movimiento());
            }

            pst.execute();

        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido modificar el movimiento : " + e.toString());
        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

    }

    public java.util.List listarPagosVehiculo(long fk_vehiculo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaPagos = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT P.* FROM PAGOS P,TIQUETES T,VEHICULOS V WHERE P.FK_TIQUETE = T.ID_TIQUETE AND (T.FK_VEHICULO = V.ID_VEHICULO OR T.DESCRIPCION = V.PLACA) AND V.ID_VEHICULO = ? ORDER BY T.FECHA");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaPagos.add(Pago.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaPagos;
    }

    public LinkedList<Financiacion> consultarFinanciacionesPersona(long fk_persona) throws SQLException {
        /**
         * Creado : 03/03/2010 16:14:56 Autor : Jorge Lopez
         */
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList<Financiacion> Financiaciones = new LinkedList();
        try {

            pst = con.prepareStatement("select * from financiaciones t where t.fk_persona = ?");

            pst.setLong(1, fk_persona);
            // sql
            rst = pst.executeQuery();

            if (rst != null) {
                while (rst.next()) {
                    Financiaciones.add(Financiacion.load(rst));
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return Financiaciones;
    }

    public Embargo consultarEmbargo(long Id_embargo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {

            pst = con.prepareStatement("SELECT * FROM embargos WHERE Id_embargo = ?");
            pst.setLong(1, Id_embargo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Embargo.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido consultar el embargo ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return null;
    }

//Modificado por Ricardo E. Cantillo. 22/01/2013
    public void actualizarEmbargo(Embargo embargo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("UPDATE embargos e SET e.fk_persona = ?, e.proceso = ?,e.tipo = ?, e.fecha_oficio = ?,"
                    + "e.oficio = ?, e.observaciones = ?, e.fk_oficina = ?,e.fk_divipo = ?,e.demandante = ?,e.nro_levantamiento = ?,e.fecha_levantamiento = ?, e.nro_radicacion = ? ,e.fecha_radicacion = ?, e.fk_usuario=?"
                    + "WHERE e.id_embargo = ?");
            pst.setLong(1, embargo.getFk_persona());
            pst.setInt(2, embargo.getProceso());
            pst.setInt(3, embargo.getTipo());
            pst.setDate(4, embargo.getFecha_oficio());
            pst.setString(5, embargo.getOficio());
            pst.setString(6, embargo.getObservaciones());
            pst.setLong(7, embargo.getFk_oficina());
            pst.setLong(8, embargo.getFk_divipo());
            pst.setString(9, embargo.getDemandante());
            pst.setString(10, embargo.getNro_levantamiento());
            pst.setDate(11, embargo.getFecha_levantamiento());
            pst.setString(12, embargo.getNro_radicacion());
            pst.setDate(13, embargo.getFecha_radicacion());
            pst.setLong(14, embargo.getFk_usuario());
            pst.setLong(15, embargo.getId_embargo());

            pst.execute();

        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido modificar el Embargo : " + e.toString());
        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

    }

    //Hecho por Jefrey
    public LinkedList consultarEmbargosaLevantar(long fk_vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList lista = new LinkedList();

        try {

            pst = con.prepareStatement("SELECT * FROM EMBARGOS WHERE FK_VEHICULO = ? AND NRO_LEVANTAMIENTO IS NULL AND FECHA_LEVANTAMIENTO IS NULL");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Embargo.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido listar los tipos de financiacion ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return lista;
    }

    //Hecho por Jefrey
    public void actualizarLevantamientoEmbargo(String nro_levantamiento, Date fecha_levantamiento, long id_embargo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("update embargos set nro_levantamiento = ? ,fecha_levantamiento = ? where id_embargo = ?");
            pst.setString(1, nro_levantamiento);
            pst.setDate(2, fecha_levantamiento);
            pst.setLong(3, id_embargo);
            pst.executeUpdate();

        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido modificar el Embargo : " + e.toString());
        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

    }

    /**
     * *********************************05032010***************************************
     */
    public Alerta consultarAlertaPorId(long id_alerta) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM ALERTAS WHERE ID_ALERTA = ?");
            pst.setLong(1, id_alerta);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Alerta.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar la aleta [" + id_alerta + "] :" + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    /**
     * ******************************08-03-2010****************************************
     */
    public void actualizarAlerta(Alerta alerta) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE alertas SET fk_persona = ?,tipo = ?, fecha_ini = ?,observaciones = ?,grado = ?,fecha_fin = ?,usuario = ?  WHERE id_alerta = ?");
            pst.setLong(1, alerta.getFk_persona());
            pst.setInt(2, alerta.getTipo());
            pst.setDate(3, alerta.getFecha_ini());
            pst.setString(4, alerta.getObservaciones());
            pst.setInt(5, alerta.getGrado());
            pst.setDate(6, alerta.getFecha_fin());
            pst.setLong(7, alerta.getUsuario());
            pst.setLong(8, alerta.getId_alerta());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void editarDatosVehiculos(DatosVehiculo datos, int flag)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DATOS_VEHICULOS SET GRUPO_CODIGO = ?,PARAM_CODIGO = ?,VALOR = ?,FECHA_INI = ?,FECHA_FIN = ?,SUB_GRUPO_CODIGO = ?,FK_USUARIO = ?,FLAG = ? WHERE ID_DATO_VEHICULO = ?");
            pst.setInt(1, datos.getGrupo_codigo());
            pst.setInt(2, datos.getParam_codigo());
            pst.setString(3, datos.getValor());
            pst.setDate(4, datos.getFecha_ini());
            pst.setDate(5, datos.getFecha_fin());
            pst.setInt(6, datos.getSub_grupo_codigo());
            pst.setLong(7, datos.getFk_usuario());
            pst.setInt(8, flag);
            pst.setLong(9, datos.getId_datoVehiculo());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    public LinkedList<Pago> consultarPagosPersona(long fk_persona) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList<Pago> ListaPagos = null;
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        try {
            ListaPagos = new LinkedList();
            pst = con.prepareStatement("Select * From pagos where fk_persona = ?");
            pst.setLong(1, fk_persona);
            rst = pst.executeQuery();
            while (rst.next()) {
                ListaPagos.add(Pago.load(rst));
            }

        } catch (Exception e) {
            throw new SQLException("Error al consultar pago persona id [" + fk_persona + "] :" + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return ListaPagos;
    }

    public void adicionarTiqueteConcepto(Tiquete_Concepto tiqueteConcepto) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO TIQUETE_CONCEPTOS (FK_DETALLE_TIQUETE,FK_CONCEPTO,VALOR,ESTADO,SECUENCIA) VALUES(?,?,?,?,?)");
            pst.setLong(1, tiqueteConcepto.getFk_detalleTiquete());
            pst.setLong(2, tiqueteConcepto.getFk_concepto());
            pst.setFloat(3, tiqueteConcepto.getValor());
            pst.setInt(4, tiqueteConcepto.getEstado());
            pst.setInt(5, tiqueteConcepto.getSecuencia());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public long consultarDetalleTiquete(long fk_tiquete, String label, long fk_tramite_concepto) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT ID_DET_TIQUETE FROM DETALLE_TIQUETES WHERE FK_TIQUETE = ? AND " + label + " = ?");
            pst.setLong(1, fk_tiquete);
            pst.setLong(2, fk_tramite_concepto);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return 0;

    }

    public Tiquete consultarTiquetePorID(long id_tiquete) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM Tiquetes WHERE id_tiquete = ?");
            pst.setLong(1, id_tiquete);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Tiquete.load(rst);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar las aletas debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public void actualizarEstadoTiquete(Tiquete tiquete)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE tiquetes SET estado= ?, fk_taquilla = ?, fk_usuario = ?, estado_preliquidacion = ? WHERE id_tiquete = ?");
            pst.setInt(1, tiquete.getEstado());
            pst.setLong(2, tiquete.getFk_taquilla());
            pst.setLong(3, tiquete.getFk_usuario());
            pst.setLong(4, tiquete.getEstado_preliquidacion());
            pst.setLong(5, tiquete.getId_tiquete());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    //Consultar Tiquetes Activos
    public java.util.List<Tiquete> consultarTiquetePreliquidados(int estado_preliquidacion, long fk_taquilla, long fk_usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Tiquete> lista = new java.util.LinkedList<Tiquete>();
        try {
            pst = con.prepareStatement("SELECT * FROM TIQUETES WHERE FK_USUARIO = ? AND ESTADO_PRELIQUIDACION = ? AND NUMERO_TIQUETE IN (SELECT NUMERO_FACTURA FROM PAGOS WHERE FK_TAQUILLA = ?)");
            pst.setLong(1, fk_usuario);
            pst.setInt(2, estado_preliquidacion);
            pst.setLong(3, fk_taquilla);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Tiquete.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar detalles_concepto debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;

    }

    public java.util.List<java.util.HashMap> listarDetalleTiquete(long id_tiquete) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<java.util.HashMap> lista = new java.util.LinkedList<java.util.HashMap>();
        try {
            pst = con.prepareStatement("SELECT P.ID_CONCEPTO CODIGO,P.NOMBRE CONCEPTO,C.REFERENCIA REFERENCIA,D.CANTIDAD CANTIDAD,D.VALOR_TOTAL VALOR "
                    + "FROM TIQUETES T,DETALLE_TIQUETES D,CARTERAS C,CONCEPTOS P "
                    + "WHERE T.ID_TIQUETE = D.FK_TIQUETE "
                    + "AND D.FK_CARTERA = C.ID_CARTERA "
                    + "AND C.FK_CONCEPTO = P.ID_CONCEPTO "
                    + "AND T.ID_TIQUETE = ? "
                    + "UNION "
                    + "SELECT P.ID_CONCEPTO CODIGO, P.NOMBRE CONCEPTO,M.ABREVIATURA REFERENCIA,COUNT(TC.SECUENCIA) CANTIDAD,SUM(TC.VALOR) VALOR "
                    + "FROM TIQUETES T,DETALLE_TIQUETES D,TIQUETE_CONCEPTOS TC,CONCEPTOS P,TRAMITES M "
                    + "WHERE T.ID_TIQUETE = D.FK_TIQUETE "
                    + "AND D.ID_DET_TIQUETE = TC.FK_DETALLE_TIQUETE "
                    + "AND TC.FK_CONCEPTO = P.ID_CONCEPTO "
                    + "AND D.FK_TRAMITE = M.ID_TRAMITE "
                    + "AND T.ID_TIQUETE = ? "
                    + "GROUP BY P.ID_CONCEPTO,P.NOMBRE,M.ABREVIATURA "
                    + "UNION "
                    + "SELECT P.ID_CONCEPTO CODIGO,P.NOMBRE CONCEPTO,'' REFERENCIA,D.CANTIDAD CANTIDAD,D.VALOR_TOTAL VALOR "
                    + "FROM TIQUETES T,DETALLE_TIQUETES D,CONCEPTOS P "
                    + "WHERE T.ID_TIQUETE = D.FK_TIQUETE "
                    + "AND D.FK_CONCEPTO = P.ID_CONCEPTO "
                    + "AND T.ID_TIQUETE = ? "
                    + "ORDER BY REFERENCIA,CONCEPTO ");
            pst.setLong(1, id_tiquete);
            pst.setLong(2, id_tiquete);
            pst.setLong(3, id_tiquete);
            rst = pst.executeQuery();
            while (rst.next()) {
                ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap<String, String> hash = new java.util.HashMap<String, String>();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    hash.put(rsmd.getColumnName(i + 1), rst.getString(i + 1));
                }
                lista.add(hash);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar detalles_tiquete debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;

    }

    public java.util.List<Tiquete_Concepto> consultarTiqueteTramiteConcepto(long id_detalle_tiquete) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Tiquete_Concepto> lista = new java.util.LinkedList<Tiquete_Concepto>();
        try {
            pst = con.prepareStatement("SELECT * FROM TIQUETE_CONCEPTOS TC WHERE TC.FK_DETALLE_TIQUETE = ?");
            pst.setLong(1, id_detalle_tiquete);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Tiquete_Concepto.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar detalles_concepto debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;

    }

    public Licencia_Conduccion consultarLicencia(String numero)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("Select * From LICENCIAS_CONDUCCION Where NUMERO_LICENCIA =?");
            pst.setString(1, numero);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Licencia_Conduccion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public Licencia_Conduccion consultarLicenciaIdPersona(long id_persona)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("Select * From LICENCIAS_CONDUCCION WHERE FK_PERSONA = ? AND ESTADO_LICENCIA = 1");
            pst.setLong(1, id_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Licencia_Conduccion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public void actualizarPropietario(Propietario propietario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE propietarios SET porcentaje=?, tipo_propiedad=?,pro_indiviso=?,fecha_ini=? ,fecha_fin=?,fk_usuario = ? WHERE id_propietario = ?");
            pst.setInt(1, propietario.getPorcentaje());
            pst.setString(2, propietario.getTipoPropiedad());
            pst.setString(3, propietario.getProIndiviso());
            pst.setDate(4, propietario.getFecha_inicio());
            pst.setDate(5, propietario.getFecha_final());
            pst.setLong(6, propietario.getFk_usuario());
            pst.setLong(7, propietario.getId_propietario());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List<Detalle_Financiacion> consultarDetalleFinanciacion(long id_financiacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Detalle_Financiacion> lista = new java.util.LinkedList<Detalle_Financiacion>();
        try {
            pst = con.prepareStatement("SELECT * FROM DETALLES_FINANCIACIONES WHERE FK_FINANCIACION = ? ORDER BY CUOTA");
            pst.setLong(1, id_financiacion);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Detalle_Financiacion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;

    }

    public java.util.List<java.util.HashMap> consultarCarteraFinanciacion(long id_financiacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<java.util.HashMap> lista = new java.util.LinkedList<java.util.HashMap>();
        try {
            pst = con.prepareStatement("select c.fecha_creacion FECHA_CREACION,c.referencia REFERENCIA,(SELECT NOMBRE FROM PARAMETROS PAR WHERE PAR.FK_GRUPO=21 AND PAR.CODIGO=c.estado_cartera) ESTADO,co.nombre NOMBRE "
                    + "from carteras c,detalles_financiaciones df, conceptos co "
                    + "where c.id_cartera=df.fk_cartera and c.fk_concepto=co.id_concepto and df.fk_financiacion=?");
            pst.setLong(1, id_financiacion);
            rst = pst.executeQuery();
            while (rst.next()) {
                ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap<String, String> hash = new java.util.HashMap<String, String>();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    hash.put(rsmd.getColumnName(i + 1), rst.getString(i + 1));
                }
                lista.add(hash);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar consultarCarteraFinanciacion debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;

    }

    public String consultarCarteraTotal(long id_vehiculo) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT MIN(REFERENCIA) MINIMA,MAX(REFERENCIA) MAXIMA,SUM(SALDO) FROM CARTERAS WHERE ESTADO_CARTERA = 1 AND FK_VEHICULO = ?");
            pst.setLong(1, id_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                String minima = rst.getString(1);
                String maxima = rst.getString(2);
                long total = rst.getLong(3);
                if (total > 0) {
                    return minima + " - " + maxima + " = $" + total;
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
            }
        }
        return "";
    }

    public Caja consultarCaja(long id_caja) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM CAJAS WHERE ID_CAJA = ?");
            pst.setLong(1, id_caja);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Caja.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
            if (rst != null) {
                rst.close();
            }
            rst = null;
        }
        return null;
    }

    public String getPlacaDisponible(long fk_sede, int tipo, long fk_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT V.NUMERO FROM RANGOS R,VENALES V WHERE R.FK_SEDE = ? AND R.ESTADO = 1 AND R.TIPO = ? AND V.FECHA_UTILIZACION IS NULL AND V.FK_RANGO = R.ID_RANGO AND ((V.ESTADO = 5 AND V.FK_USUARIO = ?) OR (V.ESTADO = 1)) ORDER BY V.ESTADO DESC,NUMERO");
            pst.setLong(1, fk_sede);
            pst.setInt(2, tipo);
            pst.setLong(3, fk_usuario);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1).trim();
            }
        } catch (Exception e) {
            throw new SQLException("Error al obtener la especie venal " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void adicionarPreasignacion(Preasignacion preasignacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RUNT_PREASIGNACION (PLACA,MOTOR,CHASIS,SERIE,VIN,SERVICIO,CLASE,ORIGEN_REGISTRO,TIPO,ESTADO,FECHA,MARCA,LINEA,MODELO,ACTA_IMPORTACION,ESTADO_AUTOMOTOR,NUMERO_SOLICITUD,ESTADO_SOLICITUD,FK_USUARIO,FK_PERSONA) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setString(1, preasignacion.getPlaca());
            pst.setString(2, preasignacion.getMotor());
            pst.setString(3, preasignacion.getChasis());
            pst.setString(4, preasignacion.getSerie());
            pst.setString(5, preasignacion.getVin());
            pst.setInt(6, preasignacion.getServicio());
            pst.setInt(7, preasignacion.getClase());
            pst.setInt(8, preasignacion.getOrigenRegistro());
            pst.setInt(9, preasignacion.getTipo());
            pst.setInt(10, preasignacion.getEstado());
            pst.setTimestamp(11, preasignacion.getFecha());
            pst.setInt(12, preasignacion.getMarca());
            pst.setInt(13, preasignacion.getLinea());
            pst.setInt(14, preasignacion.getModelo());
            pst.setString(15, preasignacion.getActaImportacion());
            pst.setString(16, preasignacion.getEstadoAutomotor());
            pst.setString(17, preasignacion.getNumeroSolicitud());
            pst.setString(18, preasignacion.getEstadoSolicitud());
            pst.setLong(19, preasignacion.getFk_usuario());
            pst.setLong(20, preasignacion.getFk_persona());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Licencia_Transito consultarLicenciaTransitoRadicacion(long fk_radicacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM LICENCIA_TRANSITO WHERE FK_RADICACION = ?");
            pst.setLong(1, fk_radicacion);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Licencia_Transito.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Preasignacion consultarPreasignacion(String placa) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM RUNT_PREASIGNACION WHERE PLACA = ? AND ESTADO = 1");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Preasignacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void adicionarTablaRunt(String tabla, String nombre) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RUNT_TABLAS2 (ID_RUNT_TABLA,NOMBRE) VALUES(?,?)");
            pst.setString(1, tabla);
            pst.setString(2, nombre);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarParametroRunt(String tabla, String parametro, String descripcion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RUNT_PARAMETROS2 (TABLA,PARAMETRO,DESCRIPCION) VALUES(?,?,?)");
            pst.setString(1, tabla);
            pst.setString(2, parametro);
            pst.setString(3, descripcion);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List<Empresa> consultarEmpresaRazonSocial(String razonS) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Empresa> empresa = new java.util.LinkedList<Empresa>();

        try {
            pst = con.prepareStatement("Select * From empresa Where upper(razon_social) like ?");
            pst.setString(1, "%" + razonS.toUpperCase() + "%");
            rst = pst.executeQuery();
            while (rst.next()) {
                empresa.add(Empresa.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return empresa;
    }

    public java.util.List<Persona> consultarPersonaNatural(String nombre1, String nombre2, String apellido1, String apellido2) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Persona> persona = new java.util.LinkedList<Persona>();

        try {
            pst = con.prepareStatement("Select *  From personas Where upper(nombre_1) like ? AND (upper(nombre_2) like ? or nombre_2 is null) AND upper(apellido_1) like ? AND (upper(apellido_2) like ? or apellido_2 is null)");
            pst.setString(1, "%" + nombre1.toUpperCase() + "%");
            pst.setString(2, "%" + nombre2.toUpperCase() + "%");
            pst.setString(3, "%" + apellido1.toUpperCase() + "%");
            pst.setString(4, "%" + apellido2.toUpperCase() + "%");
            rst = pst.executeQuery();
            while (rst.next()) {
                persona.add(Persona.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return persona;
    }

    //Adicionar Nuevo perfil de usuario - Creado por Jefrey Padilla
    public void adicionarPerfilUsuarios(long usuario, String descripcion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO CONF_PERFILES (FK_USUARIO,DESCRIPCION)VALUES(?,?)");
            pst.setLong(1, usuario);
            pst.setString(2, descripcion);
            pst.executeQuery();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List obtenerPermisos(long fk_usuario) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT CR.DESCRIPCION FROM USUARIOS US,CONF_USUARIO_PERFILES UP,CONF_PERFIL_RECURSOS PR,CONF_RECURSOS CR "
                    + "WHERE US.ID_USUARIO = UP.FK_USUARIO AND UP.FK_PERFIL = PR.FK_PERFIL AND US.ID_USUARIO = ? "
                    + "AND PR.FK_RECURSO = CR.ID_RECURSO AND PR.FECHA_FINAL IS NULL AND CR.DESCRIPCION IS NOT NULL");
            pst.setLong(1, fk_usuario);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(rst.getString(1));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public void actualizarEstadoDetalleTiquete(long idDetalleTiquete, int estado) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DETALLE_TIQUETES SET ESTADO = ? WHERE ID_DET_TIQUETE = ?");
            pst.setInt(1, estado);
            pst.setLong(2, idDetalleTiquete);

            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarEstadoDetalleTiqueteConcepto(long idDetalleTiqueteConcepto, int estado, int secuencia) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE TIQUETE_CONCEPTOS SET ESTADO = ? WHERE FK_DETALLE_TIQUETE = ? AND SECUENCIA = ?");
            pst.setInt(1, estado);
            pst.setLong(2, idDetalleTiqueteConcepto);
            pst.setInt(3, secuencia);

            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Creado por Jefrey Padilla 28/08/2012
    public void actualizarEstadoTiqueteByID(long id_tiquete, long estado_tiquete) throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE tiquetes SET estado= ? WHERE id_tiquete = ?");
            pst.setLong(1, estado_tiquete);
            pst.setLong(2, id_tiquete);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    //Creado por Jefrey Padilla 28/08/2012
    public void actualizarEstadoPagoByFk_tiquete(long fk_tiquete, long estado_tiquete) throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE pagos SET estado= ? WHERE fk_tiquete = ?");
            pst.setLong(1, estado_tiquete);
            pst.setLong(2, fk_tiquete);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    public void actualizarEstadoPago(long idPago, int estado, String observacion, long fk_taquilla, long fk_usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE PAGOS SET ESTADO = ?,FK_TAQUILLA = ?, FK_USUARIO = ? ,OBSERVACION = ? WHERE ID_PAGO = ?");
            pst.setInt(1, estado);
            pst.setLong(2, fk_taquilla);
            pst.setLong(3, fk_usuario);
            pst.setString(4, observacion);
            pst.setLong(5, idPago);

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void renovarCartera(long idCartera, long fkPago) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }

        renovarDetalleCartera(idCartera, fkPago);
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE CARTERAS SET FK_PAGO = NULL,ESTADO_CARTERA = 1,FECHA_SALDO = FECHA_ESTADO WHERE ID_CARTERA = ?");
            pst.setLong(1, idCartera);

            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void renovarDetalleCartera(long idCartera, long fk_pago) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DETALLE_CARTERAS SET ESTADO = 1,FK_PAGO = NULL WHERE FK_CARTERA = ? AND FK_PAGO = ?");
            pst.setLong(1, idCartera);
            pst.setLong(2, fk_pago);
            pst.executeUpdate();

            pst = con.prepareStatement("UPDATE DETALLE_CARTERAS SET ESTADO = 3 WHERE FK_CARTERA = ? AND REFERENCIA = ? AND FK_CONCEPTO IN(57,68,69)");
            pst.setLong(1, idCartera);
            pst.setString(2, fk_pago + "");
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.HashMap consultarDistribucionTotalbyFecha(java.sql.Date inicio, java.sql.Date fin, long id_usuario, long id_caja) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.HashMap<Long, Float> lista = new java.util.HashMap<Long, Float>();
        String f_inicio = new java.text.SimpleDateFormat("dd/MM/yyyy").format(inicio);
        String f_fin = new java.text.SimpleDateFormat("dd/MM/yyyy").format(fin);
        try {
            pst = con.prepareStatement("SELECT FK_ENTIDAD_DISTRIBUCION,SUM(VALOR) FROM DISTRIBUCION WHERE FK_PAGO IN(SELECT ID_PAGO FROM PAGOS WHERE FK_TAQUILLA IN("
                    + "SELECT ID_TAQUILLA FROM TAQUILLAS WHERE (FK_USUARIO = ? OR ? = 0) AND TO_DATE(TO_CHAR(FECHA_INI,'dd/MM/yyyy'),'dd/MM/yyyy') "
                    + "BETWEEN TO_DATE(?,'dd/MM/yyyy') AND TO_DATE(?,'dd/MM/yyyy') AND ESTADO = 5 AND (FK_CAJA = ? OR ? = 0)) and estado=3) GROUP BY FK_ENTIDAD_DISTRIBUCION");
            pst.setLong(1, id_usuario);
            pst.setLong(2, id_usuario);
            pst.setString(3, f_inicio);
            pst.setString(4, f_fin);
            pst.setLong(5, id_caja);
            pst.setLong(6, id_caja);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.put(rst.getLong(1), rst.getFloat(2));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public Formulario consultarFormularioByTramite(long fk_radicacion, long fk_tramite)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM FORMULARIOS WHERE FK_RADICACION = ? AND FK_TRAMITE = ?");
            pst.setLong(1, fk_radicacion);
            pst.setLong(2, fk_tramite);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Formulario.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List consultarRadicacionesTramitesRUNT(long fk_formulario, long fkTramite) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT RCT.TIPO,RCT.GRUPO,NVL((SELECT RRT.REFERENCIA FROM RUNT_RADICACION_TRAMITES RRT WHERE RRT.TIPO = RCT.TIPO AND RCT.GRUPO = RRT.GRUPO AND RRT.FK_FORMULARIO = ?),'') REFERENCIA FROM RUNT_CONFIGURACION_TRAMITES RCT WHERE RCT.FK_TRAMITE = ? AND RCT.FIN IS NULL");
            pst.setLong(1, fk_formulario);
            pst.setLong(2, fkTramite);
            rst = pst.executeQuery();
            while (rst.next()) {
                String triple[] = new String[3];
                triple[0] = rst.getString(1);
                triple[1] = rst.getString(2);
                triple[2] = rst.getString(3);
                lista.add(triple);
            }
        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido consultar la caracteristica/especificacion");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;
    }

    public void editarFormularioTramite(long idFormulario, String runt, String runt2, String motor, String chasis, String serie, String simit, String observ) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE FORMULARIOS SET RUNT = ?, MOTOR = ?, CHASIS = ?,SERIE = ?,SIMIT = ?,OBSERVACIONES = ?,RUNT2 = ? WHERE ID_FORMULARIO = ?");
            pst.setString(1, runt);
            pst.setString(2, motor);
            pst.setString(3, chasis);
            pst.setString(4, serie);
            pst.setString(5, simit);
            pst.setString(6, observ);
            pst.setString(7, runt2);
            pst.setLong(8, idFormulario);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void eliminarRadicacionesPropietariosApoderados(long idFormulario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("DELETE FROM RADICACION_PROPIETARIO WHERE FK_FORMULARIO = ?");
            pst.setLong(1, idFormulario);
            pst.executeUpdate();

            pst = con.prepareStatement("DELETE FROM RADICACION_APODERADOS WHERE FK_FORMULARIO = ?");
            pst.setLong(1, idFormulario);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void eliminarRuntRadicacionesTramite(long idFormulario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("DELETE FROM RUNT_RADICACION_TRAMITES WHERE FK_FORMULARIO = ?");
            pst.setLong(1, idFormulario);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Formulario consultarFormulario(long idFormulario)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM FORMULARIOS WHERE ID_FORMULARIO = ?");
            pst.setLong(1, idFormulario);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Formulario.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void actualizarSolicitanteRadicacion(long radicacion, long persona) throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RADICACIONES SET FK_PERSONA = ? WHERE ID_RADICACION = ?");
            pst.setLong(1, persona);
            pst.setLong(2, radicacion);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Municipio consultarMunicipioByCodigo(long idMunicipio)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Municipio municipio = null;
        try {
            pst = con.prepareStatement("Select m.id_municipio,m.Nombre,m.fk_departamento from Municipios m where m.id_municipio = ?");
            pst.setLong(1, idMunicipio);
            rst = pst.executeQuery();
            if (rst.next()) {
                municipio = Municipio.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return municipio;

    }

    public void registrarActaImportacion(Acta_Importacion actaImportacion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO ACTA_IMPORTACION (FECHA_REG,PLACA,FK_PERSONA_IMPORTADOR,FECHA_MANIFIESTO,"
                    + "NUMERO_MANIFIESTO,TIPO_REGISTRO,FECHA_LEVANTE,NUMERO_LEVANTE,PAIS_ORIGEN,FK_DIVIPO,CLASE,CARROCERIA,FK_LINEA,MODELO,COMBUSTIBLE,MOTOR,CHASIS,SERIE,VIN,EJES,CILINDRAJE,"
                    + "PASAJEROS,FICHA_HOMOLOGACION,TIPO_AUTOMOTOR,PESO_BRUTO,PUERTAS,ORIGEN,FK_USUARIO,FK_MARCA)VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setTimestamp(1, actaImportacion.getFecha_reg());
            pst.setString(2, actaImportacion.getPlaca());
            pst.setLong(3, actaImportacion.getFk_persona_importador());
            pst.setDate(4, actaImportacion.getFecha_manifiesto());
            pst.setString(5, actaImportacion.getNumeroManifiesto());
            pst.setString(6, actaImportacion.getTipoRegistro());
            pst.setDate(7, actaImportacion.getFecha_levante());
            pst.setString(8, actaImportacion.getNumeroLevante());
            pst.setString(9, actaImportacion.getPaisOrigen());
            pst.setLong(10, actaImportacion.getFk_divipo());
            pst.setString(11, actaImportacion.getClase());
            pst.setString(12, actaImportacion.getCarroceria());
            pst.setLong(13, actaImportacion.getFk_linea());
            pst.setString(14, actaImportacion.getModelo());
            pst.setString(15, actaImportacion.getCombustible());
            pst.setString(16, actaImportacion.getMotor());
            pst.setString(17, actaImportacion.getChasis());
            pst.setString(18, actaImportacion.getSerie());
            pst.setString(19, actaImportacion.getVin());
            pst.setString(20, actaImportacion.getEjes());
            pst.setString(21, actaImportacion.getCilindraje());
            pst.setInt(22, actaImportacion.getPasajeros());
            pst.setString(23, actaImportacion.getFichaHomologacion());
            pst.setString(24, actaImportacion.getTipoAutomotor());
            pst.setString(25, actaImportacion.getPesoBruto());
            pst.setInt(26, actaImportacion.getPuertas());
            pst.setString(27, actaImportacion.getOrigen());
            pst.setLong(28, actaImportacion.getFk_usuario());
            pst.setLong(29, actaImportacion.getFk_marca());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public void adicionarUsuarioRunt(UsuarioRunt usuarioRunt) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RUNT_USUARIOS(FK_USUARIO,CODIGO,PASSWORD,TEMPLATE,FECHA_INI) VALUES(?,?,?,?,?)");
            pst.setLong(1, usuarioRunt.getFk_usuario());
            pst.setString(2, usuarioRunt.getCodigo());
            pst.setString(3, usuarioRunt.getPassword());
            pst.setString(4, usuarioRunt.getTemplate());
            pst.setDate(5, usuarioRunt.getFecha_ini());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public UsuarioRunt consultarUsuarioRunt(long id_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM RUNT_USUARIOS WHERE FK_USUARIO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, id_usuario);
            rst = pst.executeQuery();
            if (rst.next()) {
                return UsuarioRunt.load(rst);
            }
        } catch (Exception Ex) {
            System.out.println("consultarUsuarioRunt");
            Ex.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public HashMap<Long, Float> consultarDetallesCartera(String tipo, String vigencia) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException();
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList lista = new LinkedList();
        HashMap<Long, Float> mapa = new HashMap<Long, Float>();
        try {
            pst = con.prepareStatement("SELECT CONCEPTO,VALOR FROM DETALLES2 WHERE TIPO = ? AND VIGENCIA = ?");
            pst.setString(1, tipo);
            pst.setString(2, vigencia);
            rst = pst.executeQuery();
            while (rst.next()) {
                mapa.put(rst.getLong(1), rst.getFloat(2));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
            if (rst != null) {
                rst.close();
            }
            rst = null;
        }
        return mapa;
    }

    public float consultarTotalDetallesCartera(String tipo, String vigencia) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException();
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList lista = new LinkedList();
        HashMap<Long, Float> mapa = new HashMap<Long, Float>();
        try {
            pst = con.prepareStatement("SELECT SUM(VALOR) FROM DETALLES2 WHERE TIPO = ? AND VIGENCIA = ?");
            pst.setString(1, tipo);
            pst.setString(2, vigencia);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
            if (rst != null) {
                rst.close();
            }
            rst = null;
        }
        return 0;
    }

    public void adicionarFormularioLicencia(Formulario_Licencia formularioLicencia) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO FORMULARIO_LICENCIAS(FK_RADICACION,FK_TRAMITE,FK_PERSONA,FK_PAGO,CATEGORIA,RUNT,SIMIT,FECHA_PROCESO,LICENCIA_ANTERIOR,CATEGORIA_ANTERIOR,RUNT2) VALUES(?,?,?,?,?,?,?,?,?,?,?)");
            pst.setLong(1, formularioLicencia.getFk_radicacion());
            pst.setLong(2, formularioLicencia.getFk_tramite());
            pst.setLong(3, formularioLicencia.getFk_persona());
            pst.setLong(4, formularioLicencia.getFk_pago());
            pst.setString(5, formularioLicencia.getCategoria());
            pst.setString(6, formularioLicencia.getRunt());
            pst.setString(7, formularioLicencia.getSimit());
            pst.setTimestamp(8, formularioLicencia.getFechaProceso());
            pst.setString(9, formularioLicencia.getLicencia_anterior());
            pst.setString(10, formularioLicencia.getCategoria_anterior());
            pst.setString(11, formularioLicencia.getRunt2());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public boolean consultarTramitesPlaca(String placa) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT COUNT(*) FROM RADICACIONES R,FORMULARIOS F WHERE R.ID_RADICACION = F.FK_RADICACION AND F.PLACA = ? AND R.ESTADO NOT IN(5,7,8,9)");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getInt(1) > 0;
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return false;
    }

    public java.util.List<Radicacion> consultarRadicacionesPlaca(String placa) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Radicacion> lista = new java.util.LinkedList<Radicacion>();
        try {
            pst = con.prepareStatement("SELECT R.* FROM RADICACIONES R WHERE R.ID_RADICACION IN(SELECT F.FK_RADICACION FROM FORMULARIOS F WHERE F.PLACA = ?)");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Radicacion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;
    }

    public String consultarPlacaVehiculoMotorChasisSerieVin(int parametro, String valor) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT V.PLACA FROM DATOS_VEHICULOS DV, VEHICULOS V WHERE DV.GRUPO_CODIGO = 2 AND V.ID_VEHICULO = DV.FK_VEHICULO AND DV.PARAM_CODIGO = ? AND DV.VALOR = ? ");
            pst.setInt(1, parametro);
            pst.setString(2, valor);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return rst.getString(1);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public Formulario_Licencia consultarFormularioLicencia(long fk_radicacion)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM FORMULARIO_LICENCIAS WHERE FK_RADICACION = ?");
            pst.setLong(1, fk_radicacion);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Formulario_Licencia.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void actualizarPreasignacion(long idPreasignacion, int estado) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RUNT_PREASIGNACION SET ESTADO = ? WHERE ID_PREASIGNACION = ?");
            pst.setInt(1, estado);
            pst.setLong(2, idPreasignacion);

            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public long adicionarDatosRadicacionLicencia(Radicacion_Licencia radicacionLicencia) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RADICACION_LICENCIAS (NUMERO,FK_PERSONA,FK_SEDE,FK_USUARIO,ESTADO,OBSERVACIONES,FECHA) VALUES (?,?,?,?,?,?,?)", new String[]{"ID_RADICACION_LICENCIA"});
            pst.setString(1, radicacionLicencia.getNumero());
            pst.setLong(2, radicacionLicencia.getFk_persona());
            pst.setLong(3, radicacionLicencia.getFk_sede());
            pst.setLong(4, radicacionLicencia.getFk_usuario());
            pst.setInt(5, radicacionLicencia.getEstado());
            pst.setString(6, radicacionLicencia.getObservaciones());
            pst.setDate(7, radicacionLicencia.getFecha());
            pst.execute();

            java.sql.ResultSet rst = pst.getGeneratedKeys();
            if (rst != null) {
                if (rst.next()) {
                    return rst.getLong(1);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al adicionar la radicacion " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    public Radicacion_Licencia consultar_RadicacionLicencia(long id_radicacionLicencia)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Radicacion_Licencia radicacionLicencia = null;
        try {
            pst = con.prepareStatement("Select * From radicacion_licencias Where  id_radicacion_licencia=?");
            pst.setLong(1, id_radicacionLicencia);
            rst = pst.executeQuery();
            if (rst.next()) {
                radicacionLicencia = Radicacion_Licencia.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return radicacionLicencia;

    }

    public void actualizarEstadoRadicacionLicencia(long radicacionLicencia, int estado) throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RADICACION_LICENCIAS SET ESTADO = ? WHERE ID_RADICACION_LICENCIA = ?");
            pst.setInt(1, estado);
            pst.setLong(2, radicacionLicencia);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarObservacionRadicacionLicencia(long radicacionLicencia, String observacion) throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RADICACION_LICENCIAS SET OBSERVACIONES = ? WHERE ID_RADICACION_LICENCIA = ?");
            pst.setString(1, observacion);
            pst.setLong(2, radicacionLicencia);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Infraccion consultarInfraccionByNumero(String numero) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Infraccion infraccion = null;
        try {
            pst = con.prepareStatement("select * from infracciones  where  numero = ?");
            pst.setString(1, numero);
            rst = pst.executeQuery();
            if (rst.next()) {
                infraccion = Infraccion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return infraccion;

    }

    public void actualizarNumeroSustrato(long radicacion, String sustrato, int tipo) throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            if (tipo == 1) {
                pst = con.prepareStatement("UPDATE LICENCIA_TRANSITO SET NUMERO_SUSTRATO = ? WHERE FK_RADICACION = ?");
                pst.setString(1, sustrato);
                pst.setLong(2, radicacion);
                pst.executeUpdate();
            } else {
                pst = con.prepareStatement("UPDATE LICENCIAS_CONDUCCION SET NUMERO_SUSTRATO = ? WHERE FK_RADICACION_LICENCIA = ?");
                pst.setString(1, sustrato);
                pst.setLong(2, radicacion);
                pst.executeUpdate();
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarDocumento(Documento documento) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement("INSERT INTO DOCUMENTOS (NUMERO,TIPO,REFERENCIA,FK_VEHICULO,FK_PERSONA,ESTADO,FECHA_EXPEDICION,FECHA_IMPRESION,OBSERVACION,DIRECCION,FK_USUARIO) VALUES(?,?,?,?,?,?,?,?,?,?,?)");
            pstmt.setString(1, documento.getNumero());
            pstmt.setInt(2, documento.getTipo());
            pstmt.setString(3, documento.getReferencia());
            pstmt.setLong(4, documento.getFk_vehiculo());
            pstmt.setLong(5, documento.getFk_Persona());
            pstmt.setInt(6, documento.getEstado());
            pstmt.setDate(7, documento.getFecha_expedicion());
            pstmt.setDate(8, documento.getFecha_impresion());
            pstmt.setString(9, documento.getObservacion());
            pstmt.setString(10, documento.getDireccion());
            pstmt.setLong(11, documento.getFk_usuario());
            pstmt.executeUpdate();

        } finally {
            if (pstmt != null) {
                pstmt.close();
            }
        }
    }

    public Documento consultarDocumentoByFkVehiculo(long fk_vehiculo, int tipo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement prst = null;
        ResultSet rst = null;

        try {

            prst = con.prepareStatement("SELECT * FROM DOCUMENTOS WHERE FK_VEHICULO = ? AND ESTADO = 1 AND TIPO = ? "
                    + "AND FECHA_EXPEDICION = ( SELECT MAX(FECHA_EXPEDICION) FROM DOCUMENTOS D "
                    + "WHERE D.FK_VEHICULO = ? AND D.ESTADO = 1 AND TIPO = ?)");
            prst.setLong(1, fk_vehiculo);
            prst.setInt(2, tipo);
            prst.setLong(3, fk_vehiculo);
            prst.setInt(4, tipo);
            rst = prst.executeQuery();

            while (rst.next()) {
                return Documento.load(rst);
            }

        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (prst != null) {
                prst.close();
                prst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public Documento consultarDocumentoByFkPersona(long fk_persona, int tipo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement prst = null;
        ResultSet rst = null;

        try {

            prst = con.prepareStatement(" SELECT * FROM DOCUMENTOS WHERE FK_PERSONA = ? AND TIPO = ? AND ESTADO = 1");
            prst.setLong(1, fk_persona);
            prst.setInt(2, tipo);
            rst = prst.executeQuery();

            while (rst.next()) {
                return Documento.load(rst);
            }

        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (prst != null) {
                prst.close();
                prst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public String consultarColor(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement prst = null;
        ResultSet rst = null;
        try {
            prst = con.prepareStatement("SELECT C.NOMBRE FROM  COLORES C, HISTORICO_COLOR H WHERE H.FK_VEHICULO = (SELECT max(ID_VEHICULO) FROM VEHICULOS  WHERE PLACA = ? AND ESTADO IN (1,5)) AND H.FK_COLOR = C.ID_COLOR AND H.FECHA_FIN IS NULL");
            prst.setString(1, placa);
            rst = prst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return rst.getString(1);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar el parametro debido a " + e);
        } finally {
            if (prst != null) {
                prst.close();
            }
            prst = null;
        }
        return null;
    }

    //Modificado por Ricardo E. Cantillo. 22/01/2013
    public java.util.List listarUsuarios(long fkSede) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT * FROM USUARIOS WHERE FK_SEDE = ? ORDER BY NOMBRE ASC");
            pst.setLong(1, fkSede);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Usuario.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List<Radicacion_Licencia> consultarRadicacionesLicencias(String fechaI, String fechaF, long fk_sede)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Radicacion_Licencia> radicacionesLicencias = new java.util.LinkedList<Radicacion_Licencia>();

        try {
            pst = con.prepareStatement("SELECT * FROM RADICACION_LICENCIAS WHERE (FECHA BETWEEN ? and ?) AND FK_SEDE = ? ORDER BY ID_RADICACION_LICENCIA");
            pst.setString(1, fechaI);
            pst.setString(2, fechaF);
            pst.setLong(3, fk_sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                radicacionesLicencias.add(Radicacion_Licencia.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return radicacionesLicencias;

    }

    public java.util.List<Radicacion_Licencia> consultarRadicacionesLicenciasPersona(long fk_persona)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Radicacion_Licencia> radicacionesLicencias = new java.util.LinkedList<Radicacion_Licencia>();

        try {
            pst = con.prepareStatement("SELECT * FROM RADICACION_LICENCIAS WHERE FK_PERSONA = ?");
            pst.setLong(1, fk_persona);
            rst = pst.executeQuery();
            while (rst.next()) {
                radicacionesLicencias.add(Radicacion_Licencia.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return radicacionesLicencias;

    }

    public Radicacion_Licencia consultarRadicacionLicencia(String numero, java.sql.Date fecha, long fk_sede)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("Select * From RADICACION_LICENCIAS Where numero = ? and fk_sede = ?");
            pst.setString(1, numero);
            pst.setLong(2, fk_sede);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Radicacion_Licencia.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;

    }

    public void adicionarCarpeta(Carpetas carpeta) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement("INSERT INTO CARPETAS (fk_vehiculo,estado,folios,fk_sede,observacion) VALUES(?,?,?,?,?)");
            pstmt.setLong(1, carpeta.getFk_vehiculo());
            pstmt.setInt(2, carpeta.getEstado());
            pstmt.setInt(3, carpeta.getFolios());
            pstmt.setInt(4, carpeta.getFk_sede());
            pstmt.setString(5, carpeta.getObservacion());
            pstmt.execute();

        } finally {
            if (pstmt != null) {
                pstmt.close();
            }
        }
    }

    public void adicionarPrestamos(Prestamos_Carpeta prestamoC) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement("insert into prestamos_carpetas (fk_carpeta,fecha_prestamo,fecha_entrega,estado,fk_usuario,motivo,tramite,observacion,fecha_solicitud) values(?,?,?,?,?,?,?,?,?)");
            pstmt.setLong(1, prestamoC.getFk_carpeta());
            pstmt.setDate(2, prestamoC.getFecha_prestamo());
            pstmt.setDate(3, prestamoC.getFecha_entrega());
            pstmt.setInt(4, prestamoC.getEstado());
            pstmt.setLong(5, prestamoC.getFk_usuario());
            pstmt.setInt(6, prestamoC.getMotivo());
            pstmt.setInt(7, prestamoC.getTramite());
            pstmt.setString(8, prestamoC.getObservacion());
            pstmt.setDate(9, prestamoC.getFecha_solicitud());
            pstmt.executeUpdate();

        } finally {
            if (pstmt != null) {
                pstmt.close();
            }
        }
    }

    public Carpetas consultarCarpeta(long fk_vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement prst = null;
        ResultSet rst = null;

        try {

            prst = con.prepareStatement(" SELECT * FROM CARPETAS WHERE FK_VEHICULO = ?");
            prst.setLong(1, fk_vehiculo);
            rst = prst.executeQuery();

            while (rst.next()) {
                return Carpetas.load(rst);
            }

        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (prst != null) {
                prst.close();
                prst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public Carpetas consultarCarpetaById(long id_carpeta) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement prst = null;
        ResultSet rst = null;

        try {

            prst = con.prepareStatement(" SELECT * FROM CARPETAS WHERE ID_CARPETA = ?");
            prst.setLong(1, id_carpeta);
            rst = prst.executeQuery();

            while (rst.next()) {
                return Carpetas.load(rst);
            }

        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (prst != null) {
                prst.close();
                prst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public VehiculoRunt getVehiculoRunt(String placa) throws SQLException {
        /* Se declaran los objetos PreparedStatement y ResultSet. */
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {

            /* Se verifica si existe conexion abierta.*/
            if (!hayConexion()) {
                throw new SQLException("Error!, No existe conexion abierta");
            }/* Se construye la sentencia SQL.*/
            String query = "SELECT * FROM vehiculos_runt WHERE placa=? AND fk_sede_sistema=? order by 1 asc";
            /* Se inicializa el objeto PreparedStatement con la sentencia a ejecutar. */
            pst = con.prepareStatement(query);
            /* Se colocan los valores a los interrogantes del PreparedStatement. */
            pst.setString(1, placa);

            /* Se ejcuta la sentencia. */
            rst = pst.executeQuery();
            /* Se verifica si se obtuvo resultado. */
            if (rst.next()) {
                /* Se retorna el objeto obtenido. */
                return VehiculoRunt.load(rst);
            }
            /* Siempre se verifican y se cierran los objetos PreparedStatement y ResultSet */
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        /* Se retorna null en caso de que no se halla obtenido ningun resultado */
        return null;
    }

    /**
     * *************************
     */
    public java.util.List<String> obtenerIdsPropietarios() throws SQLException {

        Statement stm = null;
        ResultSet rst = null;
        java.util.List list = new LinkedList();

        try {
            if (!hayConexion()) {
                throw new SQLException("Error! , No existe conexion abierta");
            }

            String query = "SELECT DOCUMENTO FROM PERSONAS2";
            stm = con.createStatement();

            rst = stm.executeQuery(query);

            while (rst.next()) {
                list.add(rst.getString(1));
            }

        } finally {
            if (stm != null) {
                stm.close();
                stm = null;
            }

            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return list;
    }

    /* Adicionar PersonaDTO*/
    public String addPersonaNaturalDTO(com.heinsohn.runt.general.personas.PersonaNaturalDTO per, int tipo, String idP) throws SQLException {
        /* Se declaran los objetos PreparedStatement y ResultSet. */
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            /* Se verifica si existe conexion abierta.*/

            if (!hayConexion()) {
                throw new SQLException("Error!, No existe conexion abierta");
            }/* Se construye la sentencia SQL.*/
            String query = "INSERT INTO RUNT_PERSONAS(ID_PERSONA," + "TIPO_DOCUMENTO," + "DOCUMENTO," + "FECHA_EXPEDICION_DOC," + "NOMBRE_1," + "NOMBRE_2," + "APELLIDO_1," + "APELLIDO_2," + "SEXO," + "FECHA_NACIMIENTO," + "PAIS_NACIMIENTO," + "DEP_NACIMIENTO," + "MUN_NACIMIENTO," + "LUGAR_NAC_EXTRANJERO," + "CELULAR," + "EMAIL," + "ESTADO," + "TIPO_PERSONA," + "JURIDICA_NATURAL," + "FECHA_REGISTRO_INI," + "FECHA_VENCIMIENTO," + "GRUPO_SANGUINEO, RAZON_SOCIAL,SIGLA) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

            /* Se inicializa el objeto PreparedStatement con la sentencia a ejecutar. */
            pst = con.prepareStatement(query, new String[]{"ID_PERSONA"});
            /* Se colocan los valores a los interrogantes del PreparedStatement. */

            java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("MM/DD/yyyy");
            System.out.println("Paso1");
            pst.setString(1, idP);
            System.out.println("Paso2");
            pst.setString(2, per.getIdentificacion().getValue().getTipoDocumento());
            System.out.println("Paso3");
            pst.setString(3, per.getIdentificacion().getValue().getNumeroDocumento());
            System.out.println("Paso4");
            if (per.getFechaExpedicionDocumento() != null) {
                pst.setString(4, format.format(new java.sql.Date(per.getFechaExpedicionDocumento().getYear() - 1900,
                        per.getFechaExpedicionDocumento().getMonth() - 1,
                        per.getFechaExpedicionDocumento().getDay())));
            } else {
                pst.setString(4, "");
            }
            System.out.println("Paso5");
            pst.setString(5, per.getPrimerNombrePersona());
            System.out.println("Paso6");
            pst.setString(6, per.getSegundoNombrePersona());
            System.out.println("Paso7");
            pst.setString(7, per.getPrimerApellidoPersona());
            System.out.println("Paso8");
            pst.setString(8, per.getSegundoApellidoPersona());
            System.out.println("Paso9");
            pst.setString(9, per.getSexoPersona());
            System.out.println("Paso10");
            if (per.getFechaNacimientoPersona() != null) {
                pst.setString(10, format.format(new java.sql.Date(per.getFechaNacimientoPersona().getYear() - 1900,
                        per.getFechaNacimientoPersona().getMonth() - 1,
                        per.getFechaNacimientoPersona().getDay())));
            } else {
                pst.setString(10, "");
            }
            System.out.println("Paso11");
            pst.setString(11, per.getPaisNacimiento());
            System.out.println("Paso12");
            pst.setString(12, per.getDepartamentoNacimiento());
            System.out.println("Paso13");
            if (per.getMunicipioNacimiento() != null) {
                pst.setString(13, per.getMunicipioNacimiento().getIdMunicipio() + "");
            } else {
                pst.setString(13, "");
            }
            System.out.println("Paso14");
            pst.setString(14, per.getLugarNacimientoExtranjero());
            System.out.println("Paso15");
            pst.setString(15, per.getCelularPersona());
            System.out.println("Paso16");
            pst.setString(16, per.getEmailPersona());
            System.out.println("Paso17");
            pst.setString(17, per.getEstadoPersona());
            System.out.println("Paso18");
            pst.setString(18, per.getTipoPersona());
            System.out.println("Paso19");
            pst.setString(19, tipo + "");
            System.out.println("Paso20");
            if (per.getFechaRegistroInicialPersona() != null) {
                pst.setString(20, format.format(new java.sql.Date(per.getFechaRegistroInicialPersona().getYear() - 1900,
                        per.getFechaRegistroInicialPersona().getMonth() - 1,
                        per.getFechaRegistroInicialPersona().getDay())));
            } else {
                pst.setString(20, "");
            }
            System.out.println("Paso21");
            if (per.getFechaVencimiento() != null) {
                pst.setString(21, format.format(new java.sql.Date(per.getFechaVencimiento().getYear() - 1900,
                        per.getFechaVencimiento().getMonth() - 1,
                        per.getFechaVencimiento().getDay())));
            } else {
                pst.setString(21, "");
            }
            System.out.println("Paso22");
            pst.setString(22, per.getGrupoSanguineoPersona());
            pst.setString(23, "");
            pst.setString(24, "");

            /* Se ejecuta la sentencia. */
            pst.execute();
            /* Se obtiene el valor de la llave generada en la insercion */
            rst = pst.getGeneratedKeys();
            /* Se verifica que se hallan obtenido datos en la consulta. */
            if (rst.next()) {/* Se retorna el valor. */
                return rst.getString(1);
            }
            /* Siempre se verifican y se cierran los objetos PreparedStatement y ResultSet */
        } catch (Exception exc) {
            exc.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        /* Se retorna -1 en caso de que no se halla ingresado exitosamente */
        return "XXX";
    }


    /* Adicionar PersonaJuridicaDTO*/
    public String addPersonaJuridicaDTO(com.heinsohn.runt.general.personas.PersonaJuridicaDTO per, int tipo) throws SQLException {
        /* Se declaran los objetos PreparedStatement y ResultSet. */
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            /* Se verifica si existe conexion abierta.*/

            if (!hayConexion()) {
                throw new SQLException("Error!, No existe conexion abierta");
            }/* Se construye la sentencia SQL.*/
            String query = "INSERT INTO RUNT_PERSONAS(ID_PERSONA," + "TIPO_DOCUMENTO," + "DOCUMENTO," + "FECHA_EXPEDICION_DOC," + "NOMBRE_1," + "NOMBRE_2," + "APELLIDO_1," + "APELLIDO_2," + "SEXO," + "FECHA_NACIMIENTO," + "PAIS_NACIMIENTO," + "DEP_NACIMIENTO," + "MUN_NACIMIENTO," + "LUGAR_NAC_EXTRANJERO," + "CELULAR," + "EMAIL," + "ESTADO," + "TIPO_PERSONA," + "JURIDICA_NATURAL," + "FECHA_REGISTRO_INI," + "FECHA_VENCIMIENTO," + "GRUPO_SANGUINEO,RAZON_SOCIAL,SIGLA) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

            /* Se inicializa el objeto PreparedStatement con la sentencia a ejecutar. */
            pst = con.prepareStatement(query, new String[]{"ID_PERSONA"});
            /* Se colocan los valores a los interrogantes del PreparedStatement. */

            java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("MM/DD/yyyy");

            pst.setString(1, per.getIdentificacion().getIdPersona());
            pst.setString(2, per.getIdentificacion().getTipoDocumento());
            pst.setString(3, per.getIdentificacion().getNumeroDocumento());
            pst.setString(4, "");
            pst.setString(5, "");
            pst.setString(6, "");
            pst.setString(7, "");
            pst.setString(8, "");
            pst.setString(9, "");
            pst.setString(10, "");
            pst.setString(11, "");
            pst.setString(12, "");
            if (per.getEmpresa() != null) {
                if (per.getEmpresa().getValue() != null) {
                    if (per.getEmpresa().getValue().getUbicacion() != null) {
                        if (per.getEmpresa().getValue().getUbicacion().getValue() != null) {
                            pst.setString(13, per.getEmpresa().getValue().getUbicacion().getValue().getIdMunicipio());
                        } else {
                            pst.setString(13, "");
                        }
                    } else {
                        pst.setString(13, "");
                    }
                } else {
                    pst.setString(13, "");
                }
            } else {
                pst.setString(13, "");
            }

            pst.setString(14, "");
            pst.setString(15, per.getEmpresa().getValue().getCelular());
            pst.setString(16, per.getEmpresa().getValue().getDireccionEmail());
            pst.setString(17, per.getPersonaEstado());
            pst.setString(18, per.getPersonaTipoPersona());
            pst.setString(19, tipo + "");
            if (per.getEmpresa().getValue().getFechaRegistro() != null) {
                pst.setString(20, format.format(new java.sql.Date(per.getEmpresa().getValue().getFechaRegistro().getYear() - 1900,
                        per.getEmpresa().getValue().getFechaRegistro().getMonth() - 1,
                        per.getEmpresa().getValue().getFechaRegistro().getDay())));
            } else {
                pst.setString(20, "");
            }
            pst.setString(21, "");
            pst.setString(22, "");
            pst.setString(23, per.getEmpresa().getValue().getRazonSocial());
            pst.setString(24, per.getEmpresa().getValue().getSigla());

            /* Se ejecuta la sentencia. */
            pst.execute();
            /* Se obtiene el valor de la llave generada en la insercion */
            rst = pst.getGeneratedKeys();
            /* Se verifica que se hallan obtenido datos en la consulta. */
            if (rst.next()) {/* Se retorna el valor. */
                return rst.getString(1);
            }
            /* Siempre se verifican y se cierran los objetos PreparedStatement y ResultSet */
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        /* Se retorna -1 en caso de que no se halla ingresado exitosamente */
        return "XXX";
    }

    /* Adicionar CombustibleDTO */
    public String addDireccionDTO(com.heinsohn.runt.general.personas.DireccionDTO dir, String idPersona) throws SQLException {
        /* Se declaran los objetos PreparedStatement y ResultSet. */
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            /* Se verifica si existe conexion abierta.*/

            if (!hayConexion()) {
                throw new SQLException("Error!, No existe conexion abierta");
            }/* Se construye la sentencia SQL.*/
            String query = "INSERT INTO runt_direcciones(id_persona,municipio,direccion,telefono) VALUES(?,?,?,?)";
            /* Se inicializa el objeto PreparedStatement con la sentencia a ejecutar. */
            pst = con.prepareStatement(query, new String[]{"ID_PERSONA"});
            /* Se colocan los valores a los interrogantes del PreparedStatement. */

            pst.setString(1, idPersona);
            if (dir.getMunicipio() != null) {
                pst.setString(2, dir.getMunicipio().getIdMunicipio() + "");
            } else {
                pst.setString(2, "");
            }
            pst.setString(3, dir.getDireccion());
            pst.setString(4, dir.getTelefono());

            /* Se ejecuta la sentencia. */
            pst.execute();
            /* Se obtiene el valor de la llave generada en la insercion */
            rst = pst.getGeneratedKeys();
            /* Se verifica que se hallan obtenido datos en la consulta. */
            if (rst.next()) {/* Se retorna el valor. */
                return rst.getString(1);
            }
            /* Siempre se verifican y se cierran los objetos PreparedStatement y ResultSet */
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        /* Se retorna -1 en caso de que no se halla ingresado exitosamente */
        return "XXX";
    }

    // Adicionar VehiculoRunt
    public String addVehiculoRunt(VehiculoRunt vehiculorunt) throws SQLException {
        /* Se declaran los objetos PreparedStatement y ResultSet. */
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("MM/DD/yyyy");

        try {
            /* Se verifica si existe conexion abierta.*/
            if (!hayConexion()) {
                throw new SQLException("Error!, No existe conexion abierta");
            }/* Se construye la sentencia SQL.*/
            String query = "INSERT INTO vehiculos_runt(placa,clase,cilindraje,marca,modelo,tipo_servicio,tipo_vehiculo,antiguo_clasico,capacidad_carga,color,declaracion_simplificada,enseñanza,importado,es_reposicion,blindado,repotenciado,estado,grupo,id_carroceria,linea,marca_automotor_migrado,modalidad_servicio,motivo_cancelacion,nivel_blindaje,nivel_servicio,numero_acta,numero_ficha_tecnica,numero_licencia_vigente,numero_plaqueta,numero_puertas,numero_regrabacion_chasis,numero_regrabacion_motor,numero_regrabacion_serie,origen_registro,pais_origen,peso_bruto,potencia,potencia_plaqueta,tipo_acta_importacion_remate,tipo_motor,ano_fabricacion,capacidad_pasajeros,numero_ejes,fecha_cancelacion,fecha_declaracion,fecha_expedicion_licencia,fecha_registro) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            /* Se inicializa el objeto PreparedStatement con la sentencia a ejecutar. */
            pst = con.prepareStatement(query, new String[]{"PLACA"});
            /* Se colocan los valores a los interrogantes del PreparedStatement. */
            pst.setString(1, vehiculorunt.getPlaca());
            pst.setString(2, vehiculorunt.getClase());
            pst.setString(3, vehiculorunt.getCilindraje());
            pst.setString(4, vehiculorunt.getMarca());
            pst.setString(5, vehiculorunt.getModelo());
            pst.setString(6, vehiculorunt.getTipo_servicio());
            pst.setString(7, vehiculorunt.getTipo_vehiculo());
            pst.setString(8, vehiculorunt.getAntiguo_clasico());
            pst.setString(9, vehiculorunt.getCapacidad_carga());
            pst.setString(10, vehiculorunt.getColor());
            pst.setString(11, vehiculorunt.getDeclaracion_simplificada());
            pst.setString(12, vehiculorunt.getEnseñanza());
            pst.setString(13, vehiculorunt.getImportado());
            pst.setString(14, vehiculorunt.getEs_reposicion());
            pst.setString(15, vehiculorunt.getBlindado());
            pst.setString(16, vehiculorunt.getRepotenciado());
            pst.setString(17, vehiculorunt.getEstado());
            pst.setString(18, vehiculorunt.getGrupo());
            pst.setString(19, vehiculorunt.getId_carroceria());
            pst.setString(20, vehiculorunt.getLinea());
            pst.setString(21, vehiculorunt.getMarca_automotor_migrado());
            pst.setString(22, vehiculorunt.getModalidad_servicio());
            pst.setString(23, vehiculorunt.getMotivo_cancelacion());
            pst.setString(24, vehiculorunt.getNivel_blindaje());
            pst.setString(25, vehiculorunt.getNivel_servicio());
            pst.setString(26, vehiculorunt.getNumero_acta());
            pst.setString(27, vehiculorunt.getNumero_ficha_tecnica());
            pst.setString(28, vehiculorunt.getNumero_licencia_vigente());
            pst.setString(29, vehiculorunt.getNumero_plaqueta());
            pst.setString(30, vehiculorunt.getNumero_puertas());
            pst.setString(31, vehiculorunt.getNumero_regrabacion_chasis());
            pst.setString(32, vehiculorunt.getNumero_regrabacion_motor());
            pst.setString(33, vehiculorunt.getNumero_regrabacion_serie());
            pst.setString(34, vehiculorunt.getOrigen_registro());
            pst.setString(35, vehiculorunt.getPais_origen());
            pst.setString(36, vehiculorunt.getPeso_bruto());
            pst.setString(37, vehiculorunt.getPotencia());
            pst.setString(38, vehiculorunt.getRegrabacion_plaqueta());
            pst.setString(39, vehiculorunt.getTipo_acta_importacion_remate());
            pst.setString(40, vehiculorunt.getTipo_motor());
            pst.setString(41, vehiculorunt.getAno_fabricacion());
            pst.setString(42, vehiculorunt.getCapacidad_pasajeros());
            pst.setString(43, vehiculorunt.getNumero_ejes());
            pst.setString(44, vehiculorunt.getFecha_cancelacion());
            pst.setString(45, vehiculorunt.getFecha_declaracion());
            pst.setString(46, vehiculorunt.getFecha_expedicion_licencia());
            pst.setString(47, vehiculorunt.getFecha_registro());

            /* Se ejcuta la sentencia. */
            pst.execute();
            /* Se obtiene el valor de la llave generada en la insercion */
            rst = pst.getGeneratedKeys();
            /* Se verifica que se hallan obtenido datos en la consulta. */
            if (rst.next()) {/* Se retorna el valor. */
                return rst.getString(1);
            }
        } catch (Exception exc) {
            exc.printStackTrace();
            /* Siempre se verifican y se cierran los objetos PreparedStatement y ResultSet */
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        /* Se retorna -1 en caso de que no se halla ingresado exitosamente */
        return "XXX";
    }

    public String addPropietarioDTO(com.heinsohn.runt.general.personas.PropietarioDTO pro, String tipoDocumento, String documento, String placa) throws SQLException {
        /* Se declaran los objetos PreparedStatement y ResultSet. */
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("dd/MM/yyyy");

        try {
            /* Se verifica si existe conexion abierta.*/

            if (!hayConexion()) {
                throw new SQLException("Error!, No existe conexion abierta");
            }/* Se construye la sentencia SQL.*/
            String query = "INSERT INTO RUNT_PROPIETARIOS(placa,tipo_documento,documento,fecha_inicio,fecha_fin,id_tipo_propiedad,porcentaje,proindiviso) VALUES(?,?,?,?,?,?,?,?)";
            /* Se inicializa el objeto PreparedStatement con la sentencia a ejecutar. */
            pst = con.prepareStatement(query, new String[]{"PLACA"});
            /* Se colocan los valores a los interrogantes del PreparedStatement. */

            pst.setString(1, placa);
            pst.setString(2, tipoDocumento);
            pst.setString(3, documento);
            if (pro.getFechaInicioPropiedad() != null) {
                pst.setString(4, format.format(new java.sql.Date(pro.getFechaInicioPropiedad().getYear() - 1900,
                        pro.getFechaInicioPropiedad().getMonth() - 1,
                        pro.getFechaInicioPropiedad().getDay())));
            } else {
                pst.setString(4, "");
            }

            if (pro.getFechaFinPropiedad() != null) {
                pst.setString(5, format.format(new java.sql.Date(pro.getFechaFinPropiedad().getYear() - 1900,
                        pro.getFechaFinPropiedad().getMonth() - 1,
                        pro.getFechaFinPropiedad().getDay())));
            } else {
                pst.setString(5, "");
            }
            pst.setString(6, pro.getIdTipoPropiedad());
            pst.setString(7, pro.getPorcentajePropiedad() + "");
            pst.setString(8, pro.getProindiviso());


            /* Se ejecuta la sentencia. */
            pst.execute();
            /* Se obtiene el valor de la llave generada en la insercion */
            rst = pst.getGeneratedKeys();
            /* Se verifica que se hallan obtenido datos en la consulta. */
            if (rst.next()) {/* Se retorna el valor. */
                return rst.getString(1);
            }
            /* Siempre se verifican y se cierran los objetos PreparedStatement y ResultSet */
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        /* Se retorna -1 en caso de que no se halla ingresado exitosamente */
        return "XXX";
    }

    /* Adicionar PrendaDto */
    public String addPrendaDTO(com.heinsohn.runt.general.consultas.PrendaAutomotorDTO pre, String tipoDocumento, String documento, String placa) throws SQLException {
        /* Se declaran los objetos PreparedStatement y ResultSet. */
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("MM/DD/yyyy");

        try {
            /* Se verifica si existe conexion abierta.*/

            if (!hayConexion()) {
                throw new SQLException("Error!, No existe conexion abierta");
            }/* Se construye la sentencia SQL.*/
            String query = "INSERT INTO RUNT_PRENDAS(placa,tipo_documento, documento, estado_prenda, fecha_inscripcion, fecha_levantamiento, fecha_modificacion, fecha_registro, grado, tipo, razon_social) VALUES(?,?,?,?,?,?,?,?,?,?,?)";
            /* Se inicializa el objeto PreparedStatement con la sentencia a ejecutar. */
            pst = con.prepareStatement(query, new String[]{"PLACA"});
            /* Se colocan los valores a los interrogantes del PreparedStatement. */

            pst.setString(1, placa);
            pst.setString(2, tipoDocumento);
            pst.setString(3, documento);
            pst.setString(4, pre.getEstadoPrenda());

            if (pre.getFechaInscripcion() != null) {
                pst.setString(5, format.format(new java.sql.Date(pre.getFechaInscripcion().getYear() - 1900,
                        pre.getFechaInscripcion().getMonth() - 1,
                        pre.getFechaInscripcion().getDay())));
            } else {
                pst.setString(5, "");
            }

            if (pre.getFechaLevantamiento() != null) {
                pst.setString(6, format.format(new java.sql.Date(pre.getFechaLevantamiento().getYear() - 1900,
                        pre.getFechaLevantamiento().getMonth() - 1,
                        pre.getFechaLevantamiento().getDay())));
            } else {
                pst.setString(6, "");
            }

            if (pre.getFechaModificacion() != null) {
                pst.setString(7, format.format(new java.sql.Date(pre.getFechaModificacion().getYear() - 1900,
                        pre.getFechaModificacion().getMonth() - 1,
                        pre.getFechaModificacion().getDay())));
            } else {
                pst.setString(7, "");
            }

            if (pre.getFechaRegistro() != null) {
                pst.setString(8, format.format(new java.sql.Date(pre.getFechaRegistro().getYear() - 1900,
                        pre.getFechaRegistro().getMonth() - 1,
                        pre.getFechaRegistro().getDay())));
            } else {
                pst.setString(8, "");
            }

            pst.setString(9, pre.getGrado());
            pst.setString(10, pre.getTipoAlerta());
            pst.setString(11, pre.getNombreRazonSocialAcreedor());

            /* Se ejecuta la sentencia. */
            pst.execute();
            /* Se obtiene el valor de la llave generada en la insercion */
            rst = pst.getGeneratedKeys();
            /* Se verifica que se hallan obtenido datos en la consulta. */
            if (rst.next()) {/* Se retorna el valor. */
                return rst.getString(1);
            }
            /* Siempre se verifican y se cierran los objetos PreparedStatement y ResultSet */
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        /* Se retorna -1 en caso de que no se halla ingresado exitosamente */
        return "XXX";
    }

    public String addMCSVRunt(MCSVRunt mcsvRunt) throws SQLException {
        /* Se declaran los objetos PreparedStatement y ResultSet. */
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            /* Se verifica si existe conexion abierta.*/
            if (!hayConexion()) {
                throw new SQLException("Error!, No existe conexion abierta");
            }/* Se construye la sentencia SQL.*/
            String query = "INSERT INTO RUNT_MCSV(PLACA,MARCA,MOTOR,CHASIS,SERIE,VIN) VALUES(?,?,?,?,?,?)";
            /* Se inicializa el objeto PreparedStatement con la sentencia a ejecutar. */
            pst = con.prepareStatement(query, new String[]{"PLACA"});
            /* Se colocan los valores a los interrogantes del PreparedStatement. */
            pst.setString(1, mcsvRunt.getPlaca());
            pst.setString(2, mcsvRunt.getMarca());
            pst.setString(3, mcsvRunt.getMotor());
            pst.setString(4, mcsvRunt.getChasis());
            pst.setString(5, mcsvRunt.getSerie());
            pst.setString(6, mcsvRunt.getVin());
            /* Se ejcuta la sentencia. */
            pst.execute();
            /* Se obtiene el valor de la llave generada en la insercion */
            rst = pst.getGeneratedKeys();
            /* Se verifica que se hallan obtenido datos en la consulta. */
            if (rst.next()) {/* Se retorna el valor. */
                return rst.getString(1);
            }
            /* Siempre se verifican y se cierran los objetos PreparedStatement y ResultSet */
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        /* Se retorna -1 en caso de que no se halla ingresado exitosamente */
        return "XXX";
    }

    public java.util.List<String> obtenerRangoPlacas() throws SQLException {

        Statement stm = null;
        ResultSet rst = null;
        java.util.List list = new LinkedList();

        try {
            if (!hayConexion()) {
                throw new SQLException("Error! , No existe conexion abierta");
            }

            String query = "SELECT placa FROM placas ORDER BY placa ";
            stm = con.createStatement();

            rst = stm.executeQuery(query);

            while (rst.next()) {
                list.add(rst.getString(1));
            }

        } finally {
            if (stm != null) {
                stm.close();
                stm = null;
            }

            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return list;
    }


    /* Adicionar CombustibleDTO */
    public String addCombustibleDTO(com.heinsohn.runt.general.consultas.CombustiblesDTO com, String placa) throws SQLException {
        /* Se declaran los objetos PreparedStatement y ResultSet. */
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            /* Se verifica si existe conexion abierta.*/

            if (!hayConexion()) {
                throw new SQLException("Error!, No existe conexion abierta");
            }/* Se construye la sentencia SQL.*/
            String query = "INSERT INTO RUNT_COMBUSTIBLES(placa,tipo_combustible) VALUES(?,?)";
            /* Se inicializa el objeto PreparedStatement con la sentencia a ejecutar. */
            pst = con.prepareStatement(query, new String[]{"PLACA"});
            /* Se colocan los valores a los interrogantes del PreparedStatement. */

            pst.setString(1, placa);
            pst.setString(2, com.getTipoCombustible());

            /* Se ejecuta la sentencia. */
            pst.execute();
            /* Se obtiene el valor de la llave generada en la insercion */
            rst = pst.getGeneratedKeys();
            /* Se verifica que se hallan obtenido datos en la consulta. */
            if (rst.next()) {/* Se retorna el valor. */
                return rst.getString(1);
            }
            /* Siempre se verifican y se cierran los objetos PreparedStatement y ResultSet */
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        /* Se retorna -1 en caso de que no se halla ingresado exitosamente */
        return "XXX";
    }

    public Carpetas consultarCarpetaByFkVehiculo(long fk_vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement prst = null;
        ResultSet rst = null;

        try {

            prst = con.prepareStatement(" SELECT * FROM CARPETAS WHERE FK_VEHICULO = ?");
            prst.setLong(1, fk_vehiculo);
            rst = prst.executeQuery();

            while (rst.next()) {
                return Carpetas.load(rst);
            }

        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (prst != null) {
                prst.close();
                prst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public Prestamos_Carpeta consultarPrestamoFkCarpeta(long fk_carpeta) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement prst = null;
        ResultSet rst = null;

        try {

            prst = con.prepareStatement("select * from prestamos_carpetas where fk_carpeta = ? and estado not in (3,4) ");
            prst.setLong(1, fk_carpeta);
            rst = prst.executeQuery();

            while (rst.next()) {
                return Prestamos_Carpeta.load(rst);
            }

        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (prst != null) {
                prst.close();
                prst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public Prestamos_Carpeta consultarPrestamoById(long id_prestamo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement prst = null;
        ResultSet rst = null;

        try {

            prst = con.prepareStatement("select * from prestamos_carpetas where id_prestamo = ? ");
            prst.setLong(1, id_prestamo);
            rst = prst.executeQuery();

            while (rst.next()) {
                return Prestamos_Carpeta.load(rst);
            }

        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (prst != null) {
                prst.close();
                prst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public java.util.List listarPrestamos() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            prst = con.prepareStatement("SELECT * FROM PRESTAMOS_CARPETAS ORDER BY 1 DESC"); // orden
            rs = prst.executeQuery();
            while (rs.next()) {
                lista.add(Prestamos_Carpeta.load(rs));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
        }
        if (prst != null) {
            prst.close();
        }
        return lista;
    }

    //Creado por Jefrey
    public java.util.List listarPrestamosSolicitudes() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            prst = con.prepareStatement("SELECT * FROM PRESTAMOS_CARPETAS WHERE ESTADO = 1 ORDER BY 1 DESC"); // orden
            rs = prst.executeQuery();
            while (rs.next()) {
                lista.add(Prestamos_Carpeta.load(rs));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
        }
        if (prst != null) {
            prst.close();
        }
        return lista;
    }

    public java.util.List listarPrestamosByFkCarpeta(long fk_carpeta) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            prst = con.prepareStatement("SELECT * FROM PRESTAMOS_CARPETAS WHERE FK_CARPETA = ?"); // orden
            prst.setLong(1, fk_carpeta);
            rs = prst.executeQuery();
            while (rs.next()) {
                lista.add(Prestamos_Carpeta.load(rs));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
        }
        if (prst != null) {
            prst.close();
        }
        return lista;
    }

    public java.util.List listarPrestamosByFechas(Date fechaI, Date fechaF) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            prst = con.prepareStatement("SELECT * FROM PRESTAMOS_CARPETAS WHERE FECHA_SOLICITUD BETWEEN ? AND ? "); // orden
            prst.setDate(1, fechaI);
            prst.setDate(2, fechaF);
            rs = prst.executeQuery();
            while (rs.next()) {
                lista.add(Prestamos_Carpeta.load(rs));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
        }
        if (prst != null) {
            prst.close();
        }
        return lista;
    }

    public void prestarCarpeta(Date fechaP, long id_prestamo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update PRESTAMOS_CARPETAS set FECHA_PRESTAMO = ?, ESTADO = 2 where ID_PRESTAMO = ?");
            pst.setDate(1, fechaP);
            pst.setLong(2, id_prestamo);
            pst.execute();
        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido modificar el grupo ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
        }
    }

    public void devolverCarpeta(Date fechaD, long id_prestamo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update PRESTAMOS_CARPETAS set FECHA_ENTREGA = ?, ESTADO = 3 where ID_PRESTAMO = ?");
            pst.setDate(1, fechaD);
            pst.setLong(2, id_prestamo);
            pst.execute();
        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido modificar el grupo ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
        }
    }

    public void actualizarFoliosCarpeta(long folios, long id_carpeta) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update CARPETAS set FOLIOS = ? where ID_CARPETA = ?");
            pst.setLong(1, folios);
            pst.setLong(2, id_carpeta);
            pst.execute();
        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido modificar el grupo ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
        }
    }

    public java.util.List listarCarpetasPrestadasEntreFechas(Date fechaI, Date fechaF) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            prst = con.prepareStatement("SELECT * FROM PRESTAMOS_CARPETAS WHERE FECHA_PRESTAMO BETWEEN ? AND ? "); // orden
            prst.setDate(1, fechaI);
            prst.setDate(2, fechaF);
            rs = prst.executeQuery();
            while (rs.next()) {
                lista.add(Prestamos_Carpeta.load(rs));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
        }
        if (prst != null) {
            prst.close();
        }
        return lista;
    }

    public String asignarSustrato(int tipo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement prst = null;
        ResultSet rst = null;
        try {
            prst = con.prepareStatement("select min(su.numero) from rango_sustratos rs, sustratos su where su.fk_rango_sustrato = rs.id_rango_sustrato and su.estado = 1 and rs.estado = 1 and rs.tipo = ? ");
            prst.setLong(1, tipo);
            rst = prst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return rst.getString(1);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar el parametro debido a " + e);
        } finally {
            if (prst != null) {
                prst.close();
            }
            prst = null;
        }
        return null;
    }

    public void actualizarSustrato(int estado, String venal, java.sql.Timestamp fecha_Reg, long fk_radicacion, String numero, long fk_usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE SUSTRATOS SET ESTADO = ?, VENAL = ?, FECHA_UTILIZACION = ?, FK_RADICACION = ?, FK_USUARIO = ?  WHERE NUMERO = ?");
            pst.setInt(1, estado);
            pst.setString(2, venal);
            pst.setTimestamp(3, fecha_Reg);
            pst.setLong(4, fk_radicacion);
            pst.setLong(5, fk_usuario);
            pst.setString(6, numero);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarEstadoSustrato(int estado, long fk_usuario, String observacion, long id_sustrato) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE SUSTRATOS SET ESTADO = ?, FK_USUARIO = ?, OBSERVACION = ?  WHERE ID_SUSTRATO = ?");
            pst.setInt(1, estado);
            pst.setLong(2, fk_usuario);
            pst.setString(3, observacion);
            pst.setLong(4, id_sustrato);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listConsultarRangosSustratos() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaRangos = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("select * from rango_sustratos");

            rst = pst.executeQuery();
            while (rst.next()) {
                listaRangos.add(Rango_Sustratos.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaRangos;
    }

    public int consultar_Total_Sustratos(long fk_rango) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        int resultado = 0;
        try {
            pst = con.prepareStatement("select count(*) from sustratos where fk_rango_sustrato = ?");
            pst.setLong(1, fk_rango);
            rst = pst.executeQuery();
            if (rst.next()) {
                resultado = rst.getInt(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return resultado;

    }

    public int consultar_Estado_Sustratos(long fk_rango, int estado) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        int resultado = 0;
        try {
            pst = con.prepareStatement("select count(*) from sustratos  where fk_rango_sustrato = ? and estado = ?");
            pst.setLong(1, fk_rango);
            pst.setInt(2, estado);

            rst = pst.executeQuery();
            if (rst.next()) {
                resultado = rst.getInt(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return resultado;

    }

    public Rango_Sustratos consultar_Rango_Sustratos(long id_rango) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Rango_Sustratos rangoS = null;
        try {
            pst = con.prepareStatement("select * from rango_sustratos where id_rango_sustrato = ?");
            pst.setLong(1, id_rango);

            rst = pst.executeQuery();
            if (rst.next()) {
                rangoS = Rango_Sustratos.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return rangoS;

    }

    public java.util.List listarSustratos(long fk_rango, String sustrato, String estado) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaSustratos = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM SUSTRATOS WHERE FK_RANGO_SUSTRATO = ? AND NUMERO LIKE ? AND (ESTADO = ? OR 0 = ?) ORDER BY NUMERO");
            pst.setLong(1, fk_rango);
            pst.setString(2, "%" + sustrato + "%");
            pst.setString(3, estado);
            pst.setString(4, estado);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaSustratos.add(Sustratos.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaSustratos;
    }

    public Sustratos consultarSustratosByFkRango(long fk_rango) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Sustratos sustrato = null;
        try {
            pst = con.prepareStatement("select * from sustratos where fk_rango_sustrato = ?");
            pst.setLong(1, fk_rango);

            rst = pst.executeQuery();
            if (rst.next()) {
                sustrato = Sustratos.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return sustrato;

    }

    public Sustratos consultarSustratoById(long id_sustrato) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Sustratos sustrato = null;
        try {
            pst = con.prepareStatement("select * from sustratos  where id_sustrato = ?");
            pst.setLong(1, id_sustrato);
            rst = pst.executeQuery();
            if (rst.next()) {
                sustrato = Sustratos.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return sustrato;

    }

    public void actualizarLiquidacionRunt(String numero, long fk_tramite, int estado) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RUNT_LIQUIDACION SET ESTADO = ? WHERE NUMERO_LIQUIDACION = ? AND FK_TRAMITE = ?");
            pst.setInt(1, estado);
            pst.setString(2, numero);
            pst.setLong(3, fk_tramite);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public int existeLiquidacionRunt(String numero, long fk_tramite) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Sustratos sustrato = null;
        try {
            pst = con.prepareStatement("SELECT ESTADO,FK_TRAMITE FROM RUNT_LIQUIDACION WHERE NUMERO_LIQUIDACION = ?");
            pst.setString(1, numero);
            rst = pst.executeQuery();
            if (rst.next()) {
                if (rst.getInt(1) != 1) {
                    return 1;
                } else if (rst.getLong(2) != fk_tramite) {
                    return 2;
                } else {
                    return 3;
                }
            }
            return 0;
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

    }

    public void asociarLicenciaTransito(Licencia_Transito licencia_transito) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO LICENCIA_TRANSITO (FK_VEHICULO,NUMERO,FECHA_EXPEDICION,ESTADO,FK_SEDE,FK_USUARIO) VALUES(?,?,?,?,?,?)");
            pst.setLong(1, licencia_transito.getFk_vehiculo());
            pst.setString(2, licencia_transito.getNumero());
            pst.setDate(3, licencia_transito.getFecha_expedicion());
            pst.setInt(4, licencia_transito.getEstado());
            pst.setLong(5, licencia_transito.getFk_sede());
            pst.setLong(6, licencia_transito.getFk_usuario());

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarLicenciaTransito(Licencia_Transito licencia_transito) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE LICENCIA_TRANSITO SET NUMERO = ?, FECHA_EXPEDICION = ? WHERE ID_LIC_TRANSITO = ?");
            pst.setString(1, licencia_transito.getNumero());
            pst.setDate(2, licencia_transito.getFecha_expedicion());
            pst.setLong(3, licencia_transito.getId_licenciaTransito());

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarSincronizacion(Sincronizacion sincronizacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            if (sincronizacion.getTipo() == 1) {
                pst = con.prepareStatement("INSERT INTO RUNT_SINCRONIZACION (FK_VEHICULO,TIPO,RESULTADO,FECHA,ESTADO,FK_USUARIO) VALUES(?,?,?,?,?,?)");
                pst.setLong(1, sincronizacion.getFk_vehiculo());
            } else {
                pst = con.prepareStatement("INSERT INTO RUNT_SINCRONIZACION (FK_PERSONA,TIPO,RESULTADO,FECHA,ESTADO,FK_USUARIO) VALUES(?,?,?,?,?,?)");
                pst.setLong(1, sincronizacion.getFk_persona());
            }
            pst.setLong(2, sincronizacion.getTipo());
            pst.setString(3, sincronizacion.getResultado());
            pst.setTimestamp(4, sincronizacion.getFecha());
            pst.setInt(5, sincronizacion.getEstado());
            pst.setLong(6, sincronizacion.getFk_usuario());

            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listarPreasignacionesByFechas(Timestamp fechaI, Timestamp fechaF, long fk_usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            prst = con.prepareStatement("SELECT * FROM RUNT_PREASIGNACION WHERE FECHA BETWEEN ? AND ? and (fk_usuario =  ? or ? = 0)"); // orden
            prst.setTimestamp(1, fechaI);
            prst.setTimestamp(2, fechaF);
            prst.setLong(3, fk_usuario);
            prst.setLong(4, fk_usuario);
            rs = prst.executeQuery();
            while (rs.next()) {
                lista.add(Preasignacion.load(rs));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
        }
        if (prst != null) {
            prst.close();
        }
        return lista;
    }

    public Sincronizacion consultarSincronizacion(int tipo, long fk_veh_per) throws Exception {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Sustratos sustrato = null;
        try {
            if (tipo == 1) {
                pst = con.prepareStatement("SELECT * FROM RUNT_SINCRONIZACION WHERE FK_VEHICULO = ? AND ESTADO = 1");
            } else {
                pst = con.prepareStatement("SELECT * FROM RUNT_SINCRONIZACION WHERE FK_PERSONA = ? AND ESTADO = 1");
            }
            pst.setLong(1, fk_veh_per);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Sincronizacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void actualizarSincronizacion(long idS, int estado) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RUNT_SINCRONIZACION SET ESTADO = ? WHERE ID_SINCRONIZACION = ?");
            pst.setInt(1, estado);
            pst.setLong(2, idS);

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Preasignacion consultarPreasignacionByPlaca(String placa) throws Exception {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Preasignacion preasignacion = null;
        try {
            pst = con.prepareStatement("SELECT * FROM RUNT_PREASIGNACION WHERE PLACA = ? AND ESTADO = 1");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Preasignacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void editarPassword(long id_usuario, String password) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE USUARIOS SET PASSWORD = ? WHERE ID_USUARIO = ?");
            //pst.setString(1, KeyStore.Encriptar(password));
            pst.setString(1, password);
            pst.setLong(2, id_usuario);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public String consultarPeriodo(long fk_vehiculo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT FECHA_CREACION FROM CARTERAS WHERE FK_VEHICULO = ? order by 1 desc");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                String result = rst.getString(1);
                switch (result.charAt(6)) {
                    case '1':
                        return "P[3]";
                    case '5':
                        return "P[1]";
                    case '9':
                        return "P[2]";
                    default:
                        break;
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return "";
    }

    public UsuarioCaja consultarCajaUsuario(long fk_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rst = null;
        try {
            prst = con.prepareStatement("SELECT * FROM USUARIO_CAJAS WHERE FK_USUARIO = ?");
            prst.setLong(1, fk_usuario);
            rst = prst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return UsuarioCaja.load(rst);
                }
            }
        } finally {
            if (prst != null) {
                prst.close();
            }
            prst = null;
        }
        return null;
    }

    public java.util.List listarPerfilesUsuario(long fk_usuario) throws SQLException {
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        java.util.LinkedList listaperfil = new java.util.LinkedList();
        try {
            pstmt = con.prepareStatement("SELECT * FROM CONF_PERFILES CP, CONF_USUARIO_PERFILES CPU WHERE CPU.FK_PERFIL = CP.ID_PERFIL AND CPU.FK_USUARIO = ? ");
            pstmt.setLong(1, fk_usuario);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                listaperfil.add(Perfil.load(rs));
            }
        } finally {
            if (pstmt != null) {
                pstmt.close();
            }
        }
        return listaperfil;
    }

    public java.util.List listarPerfilesUsuarioByFkUusario(long fk_usuario) throws SQLException {
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        java.util.LinkedList listaperfil = new java.util.LinkedList();
        try {
            pstmt = con.prepareStatement("select fk_perfil from conf_usuario_perfiles where fk_usuario = ? ");
            pstmt.setLong(1, fk_usuario);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                listaperfil.add(rs.getInt(1) + "");
            }
        } finally {
            if (pstmt != null) {
                pstmt.close();
            }
        }
        return listaperfil;
    }

    public void EliminarPerfilesUsuario(long fk_usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement("DELETE FROM CONF_USUARIO_PERFILES where FK_USUARIO = ? ");
            pstmt.setLong(1, fk_usuario);
            pstmt.executeUpdate();

        } finally {
            if (pstmt != null) {
                pstmt.close();
            }
        }
    }

    public void actualizarLicenciaTransitoAnteriores(long fk_vehiculo, int estado) throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE LICENCIA_TRANSITO SET ESTADO = ? WHERE FK_VEHICULO = ? AND ESTADO = 1");
            pst.setInt(1, estado);
            pst.setLong(2, fk_vehiculo);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Modificado por Ricardo E. Cantillo. 23/10/2014
    //Modificado por Jose carreño 11/09/2015 de list a Linkedlist
    public java.util.LinkedList listarAuditoria(String usuario, String tabla, String accion, long vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT ID_AUDITORIA,FK_USUARIO,IP,TABLA,REGISTRO,ACCION,FECHA,FLAG,VEHICULO FROM AUDITORIA WHERE (FK_USUARIO = ? OR ? = '0') AND (TABLA = ? OR ? = '0') AND (ACCION = ? OR ? = '0') AND (VEHICULO = ? OR ? = 0) ORDER BY FECHA DESC");
            pst.setString(1, usuario);
            pst.setString(2, usuario);
            pst.setString(3, tabla);
            pst.setString(4, tabla);
            pst.setString(5, accion);
            pst.setString(6, accion);
            pst.setLong(7, vehiculo);
            pst.setLong(8, vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Auditoria.load(rst));
            }
        } catch (Exception ex) {
            System.out.println("Error en litar Auditoria: \n " + ex.getMessage());

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    //Modificado por Ricardo E. Cantillo. 22/01/2013
    public Auditoria_Detalle consultarDetalleAuditoria(long fk_auditoria) throws Exception {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Auditoria_Detalle ad = null;
        try {
            pst = con.prepareStatement("SELECT * FROM AUDITORIA_DETALLE_V WHERE FK_AUDITORIA = ? ");
            pst.setLong(1, fk_auditoria);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Auditoria_Detalle.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Auditoria consultarAuditoriaId(long id_auditoria) throws Exception {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Auditoria auditoria = null;
        try {
            pst = con.prepareStatement("SELECT * FROM AUDITORIA WHERE ID_AUDITORIA = ? ");
            pst.setLong(1, id_auditoria);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Auditoria.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public long adicionarSimitPlano(SimitPlano simitPlano) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("INSERT INTO SIMIT_PLANOS (CONSECUTIVO,FECHA_PROCESO,FECHA_REPORTE,ESTADO,FK_USUARIO) "
                    + "VALUES(?,?,?,?,?)", new String[]{"ID_SIMIT_PLANO"});
            pst.setString(1, simitPlano.getConsecutivo());
            pst.setTimestamp(2, simitPlano.getFechaProceso());
            pst.setTimestamp(3, simitPlano.getFechaReporte());
            pst.setInt(4, simitPlano.getEstado());
            pst.setLong(5, simitPlano.getFkUsuario());
            pst.execute();
            rst = pst.getGeneratedKeys();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    //Created by Jefrey Padilla - Consultar Archivos Cargados Polca
    public java.util.List<Archivos_Polca> consultarArchivoPolca() throws java.sql.SQLException {

        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;
        java.util.List<Archivos_Polca> lista = new java.util.LinkedList<Archivos_Polca>();
        try {
            pst = con.prepareStatement("SELECT * FROM ARCHIVO_POLCA");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Archivos_Polca.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public void eliminarComparendoArchivoPolca() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("DELETE FROM ARCHIVO_POLCA");

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Created by Jefrey Padilla
    public void adicionarComparendoArchivoPolca(Comparendo comparendo)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO ARCHIVO_POLCA (NUM_COMPARENDO)VALUES(?)");

            pst.setString(1, comparendo.getNumero());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarSimitComparendo(SimitComparendo simitComparendo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO SIMIT_COMPARENDOS(ESTADO,FECHA_REGISTRO,FECHA_REPORTE,COMCONSECUTIVO,COMNUMERO,"
                    + "COMFECHA,COMHORA,COMDIR,COMDIVIPOMUNI,COMLOCALIDADCOMUNA,COMPLACA,COMDIVIPOMATRI,COMTIPOVEHI,COMTIPOSER,COMCODIGORADIO,"
                    + "COMCODIGOMODALIDAD,COMCODIGOPASAJEROS,COMINFRACTOR,COMTIPODOC,COMNOMBE,COMAPELLIDO,COMEDADINFRACTOR,COMDIRINFRACTOR,"
                    + "COMEMAIL,COMTELEINFRACTOR,COMIDCIUDAD,COMLICENCIA,COMCATEGORIA,COMSECREEXPIDE,COMFECHAVENCE,COMTIPOINFRAC,COMPLICTRANSITO,"
                    + "COMDIVIPOLICEN,COMIDENTIFICACION,COMIDTIPODOCPROP,COMNOMBREPROP,COMNOMBREEMPRESA,COMNITEMPRESA,COMTARJETAOPERACION,"
                    + "COMPPLACAAGENTE,COMOBSERVA,COMFUGA,COMACCI,COMINMOV,COMPATIOINMOVILIZA,COMDIRPATIOINMOVI,COMGRUANUMERO,COMPLACAGRUA,"
                    + "COMCONSECUTIINMOVI,COMIDENTIFICACIONTEST,COMNOMBRETESTI,COMDIRECRESTESTI,COMTELETESTIGO,COMVALOR,COMVALAD,COMORGANISMO,"
                    + "COMESTADOCOM,COMPOLCA,COMINFRACCION,COMVALINFRA) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
                    + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setInt(1, simitComparendo.getESTADO());
            pst.setTimestamp(2, simitComparendo.getFECHA_REGISTRO());
            pst.setDate(3, simitComparendo.getFECHA_REPORTE());
            pst.setString(4, simitComparendo.getCOMCONSECUTIVO());
            pst.setString(5, simitComparendo.getCOMNUMERO());
            pst.setString(6, simitComparendo.getCOMFECHA());
            pst.setString(7, simitComparendo.getCOMHORA());
            pst.setString(8, simitComparendo.getCOMDIR());
            pst.setString(9, simitComparendo.getCOMDIVIPOMUNI());
            pst.setString(10, simitComparendo.getCOMLOCALIDADCOMUNA());
            pst.setString(11, simitComparendo.getCOMPLACA());
            pst.setString(12, simitComparendo.getCOMDIVIPOMATRI());
            pst.setString(13, simitComparendo.getCOMTIPOVEHI());
            pst.setString(14, simitComparendo.getCOMTIPOSER());
            pst.setString(15, simitComparendo.getCOMCODIGORADIO());
            pst.setString(16, simitComparendo.getCOMCODIGOMODALIDAD());
            pst.setString(17, simitComparendo.getCOMCODIGOPASAJEROS());
            pst.setString(18, simitComparendo.getCOMINFRACTOR());
            pst.setString(19, simitComparendo.getCOMTIPODOC());
            pst.setString(20, simitComparendo.getCOMNOMBE());
            pst.setString(21, simitComparendo.getCOMAPELLIDO());
            pst.setString(22, simitComparendo.getCOMEDADINFRACTOR());
            pst.setString(23, simitComparendo.getCOMDIRINFRACTOR());
            pst.setString(24, simitComparendo.getCOMEMAIL());
            pst.setString(25, simitComparendo.getCOMTELEINFRACTOR());
            pst.setString(26, simitComparendo.getCOMIDCIUDAD());
            pst.setString(27, simitComparendo.getCOMLICENCIA());
            pst.setString(28, simitComparendo.getCOMCATEGORIA());
            pst.setString(29, simitComparendo.getCOMSECREEXPIDE());
            pst.setString(30, simitComparendo.getCOMFECHAVENCE());
            pst.setString(31, simitComparendo.getCOMTIPOINFRAC());
            pst.setString(32, simitComparendo.getCOMPLICTRANSITO());
            pst.setString(33, simitComparendo.getCOMDIVIPOLICEN());
            pst.setString(34, simitComparendo.getCOMIDENTIFICACION());
            pst.setString(35, simitComparendo.getCOMIDTIPODOCPROP());
            pst.setString(36, simitComparendo.getCOMNOMBREPROP());
            pst.setString(37, simitComparendo.getCOMNOMBREEMPRESA());
            pst.setString(38, simitComparendo.getCOMNITEMPRESA());
            pst.setString(39, simitComparendo.getCOMTARJETAOPERACION());
            pst.setString(40, simitComparendo.getCOMPPLACAAGENTE());
            pst.setString(41, simitComparendo.getCOMOBSERVA());
            pst.setString(42, simitComparendo.getCOMFUGA());
            pst.setString(43, simitComparendo.getCOMACCI());
            pst.setString(44, simitComparendo.getCOMINMOV());
            pst.setString(45, simitComparendo.getCOMPATIOINMOVILIZA());
            pst.setString(46, simitComparendo.getCOMDIRPATIOINMOVI());
            pst.setString(47, simitComparendo.getCOMGRUANUMERO());
            pst.setString(48, simitComparendo.getCOMPLACAGRUA());
            pst.setString(49, simitComparendo.getCOMCONSECUTIINMOVI());
            pst.setString(50, simitComparendo.getCOMIDENTIFICACIONTEST());
            pst.setString(51, simitComparendo.getCOMNOMBRETESTI());
            pst.setString(52, simitComparendo.getCOMDIRECRESTESTI());
            pst.setString(53, simitComparendo.getCOMTELETESTIGO());
            pst.setString(54, simitComparendo.getCOMVALOR());
            pst.setString(55, simitComparendo.getCOMVALAD());
            pst.setString(56, simitComparendo.getCOMORGANISMO());
            pst.setString(57, simitComparendo.getCOMESTADOCOM());
            pst.setString(58, simitComparendo.getCOMPOLCA());
            pst.setString(59, simitComparendo.getCOMINFRACCION());
            pst.setString(60, simitComparendo.getCOMVALINFRA());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarSimitRecaudo(SimitRecaudo simitRecaudo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO SIMIT_RECAUDOS (ESTADO,FECHA_REGISTRO,FECHA_REPORTE,RECCONSECUTIVO,RECFAPL,RECHORA,RECFTRAN,RECCANAL,RECORIGEN,"
                    + "RECEFECTIVO,RECCHEQUE,RECTOTAL,RECDOCUMENTO,RECPOLCA,RECNIP,RECTIPOREC,RECSECRET,RECNUM) "
                    + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setInt(1, simitRecaudo.getESTADO());
            pst.setTimestamp(2, simitRecaudo.getFECHA_REGISTRO());
            pst.setDate(3, simitRecaudo.getFECHA_REPORTE());
            pst.setString(4, simitRecaudo.getRECCONSECUTIVO());
            pst.setString(5, simitRecaudo.getRECFAPL());
            pst.setString(6, simitRecaudo.getRECHORA());
            pst.setString(7, simitRecaudo.getRECFTRAN());
            pst.setString(8, simitRecaudo.getRECCANAL());
            pst.setString(9, simitRecaudo.getRECORIGEN());
            pst.setString(10, simitRecaudo.getRECEFECTIVO());
            pst.setString(11, simitRecaudo.getRECCHEQUE());
            pst.setString(12, simitRecaudo.getRECTOTAL());
            pst.setString(13, simitRecaudo.getRECDOCUMENTO());
            pst.setString(14, simitRecaudo.getRECPOLCA());
            pst.setString(15, simitRecaudo.getRECNIP());
            pst.setString(16, simitRecaudo.getRECTIPOREC());
            pst.setString(17, simitRecaudo.getRECSECRET());
            pst.setString(18, simitRecaudo.getRECNUM());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarSimitResolucion(SimitResolucion simitResolucion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO SIMIT_RESOLUCIONES (ESTADO,FECHA_REGISTRO,FECHA_REPORTE,RESCONSECUTIVO,RESNUMERO,RESNUMANT,"
                    + "RESFECHA,RESTIPORES,RESFHASTA,RESCOMP,RESCOMPF,RESNIPINFRAC,RESTIPODOC,RESNOMBE,RESAPELLIDO,RESDIRINFRACTOR,RESTELEINFRACTOR,"
                    + "RESIDCIUDAD,RESVALOR,RESVALAD,RESORGANISMO,RESCOMPOLCA,RESINFRACCION,RESVALINF,RESVALPAG) "
                    + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setInt(1, simitResolucion.getESTADO());
            pst.setTimestamp(2, simitResolucion.getFECHA_REGISTRO());
            pst.setDate(3, simitResolucion.getFECHA_REPORTE());
            pst.setString(4, simitResolucion.getRESCONSECUTIVO());
            pst.setString(5, simitResolucion.getRESNUMERO());
            pst.setString(6, simitResolucion.getRESNUMANT());
            pst.setString(7, simitResolucion.getRESFECHA());
            pst.setString(8, simitResolucion.getRESTIPORES());
            pst.setString(9, simitResolucion.getRESFHASTA());
            pst.setString(10, simitResolucion.getRESCOMP());
            pst.setString(11, simitResolucion.getRESCOMPF());
            pst.setString(12, simitResolucion.getRESNIPINFRAC());
            pst.setString(13, simitResolucion.getRESTIPODOC());
            pst.setString(14, simitResolucion.getRESNOMBE());
            pst.setString(15, simitResolucion.getRESAPELLIDO());
            pst.setString(16, simitResolucion.getRESDIRINFRACTOR());
            pst.setString(17, simitResolucion.getRESTELEINFRACTOR());
            pst.setString(18, simitResolucion.getRESIDCIUDAD());
            pst.setString(19, simitResolucion.getRESVALOR());
            pst.setString(20, simitResolucion.getRESVALAD());
            pst.setString(21, simitResolucion.getRESORGANISMO());
            pst.setString(22, simitResolucion.getRESCOMPOLCA());
            pst.setString(23, simitResolucion.getRESINFRACCION());
            pst.setString(24, simitResolucion.getRESVALINF());
            pst.setString(25, simitResolucion.getRESVALPAG());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public int consultarDiasHabiles(java.sql.Date fechaReferencia) throws SQLException {
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int parametros = 0;
        try {
            pstmt = con.prepareStatement(" SELECT TO_NUMBER(SUBSTR(TO_DATE(SYSDATE,'DD/MM/YY') - ?,1,10))-(SELECT COUNT( *) FROM CALENDARIO_FESTIVOS WHERE FECHA BETWEEN ? AND TO_DATE(SYSDATE,'DD/MM/YY')) FROM DUAL");
            pstmt.setDate(1, fechaReferencia);
            pstmt.setDate(2, fechaReferencia);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                parametros = rs.getInt(1);
            }
        } finally {
            if (pstmt != null) {
                pstmt.close();
            }
        }

        return parametros;

    }

    public void adicionarPrescripcion(Prescripcion prescripcion)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO PRESCRIPCIONES(NUMERO,FECHA,FK_VEHICULO,FK_PERSONA,"
                    + "VIGENCIA_INICIAL,VIGENCIA_FINAL,OBSERVACIONES,FK_USUARIO,FECHA_PROCESO,ESTADO) VALUES(?,?,"
                    + "?,?,?,?,?,?,?,?)");
            pst.setString(1, prescripcion.getNumero());
            pst.setDate(2, prescripcion.getFecha());
            pst.setLong(3, prescripcion.getFk_vehiculo());
            pst.setLong(4, prescripcion.getFk_persona());
            pst.setLong(5, prescripcion.getVigencia_inicial());
            pst.setLong(6, prescripcion.getVigencia_final());
            pst.setString(7, prescripcion.getObservaciones());
            pst.setLong(8, prescripcion.getFk_usuario());
            pst.setTimestamp(9, prescripcion.getFecha_proceso());
            pst.setLong(10, prescripcion.getEstado());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Prescripcion consultarPrescripcion(String numero) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {

            pst = con.prepareStatement("select * from prescripciones where numero = ? and estado = 1");
            pst.setString(1, numero);
            rst = pst.executeQuery();

            while (rst.next()) {

                return Prescripcion.load(rst);

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public LinkedList listadoVigencias(long fk_vehiculo, String vigenciaI, String vigenciaF) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaCarteras = new LinkedList();

        try {

            pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE FK_VEHICULO = ? AND REFERENCIA BETWEEN ? AND ? ");
            pst.setString(2, vigenciaI);
            pst.setString(3, vigenciaF);
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();

            while (rst.next()) {

                listaCarteras.add(Cartera.Load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar los grupos ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

        return listaCarteras;
    }

    public void actualizarCarteraPrescripcion(long id_cartera) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("update carteras c set c.estado_cartera = 9 where c.id_cartera = ?");
            pst.setLong(1, id_cartera);
            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido modificar el grupo ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

    }

    public void adicionarPrescripcionCartera(long fk_prescripcion, long fk_cartera, Timestamp fecha)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO PRESCRIPCION_CARTERA(FK_PRESCRIPCION,FK_CARTERA,FECHA_PROCESO)"
                    + " VALUES(?,?,?)");
            pst.setLong(1, fk_prescripcion);
            pst.setLong(2, fk_cartera);
            pst.setTimestamp(3, fecha);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Propietario getUnicoPropietarioVehiculo(long fk_vehiculo) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM PROPIETARIOS WHERE FK_VEHICULO = ? AND FECHA_FIN IS NULL ORDER BY FECHA_INI DESC"); // orden
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Propietario.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;

    }

    public void actualizarValorDetalleCartera(long detalle_cartera, int estado, float valor) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DETALLE_CARTERAS SET ESTADO = ?,VALOR = ? WHERE ID_DETALLE_CARTERA = ?");
            pst.setInt(1, estado);
            pst.setFloat(2, valor);
            pst.setLong(3, detalle_cartera);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarValorDetalleCartera(long detalle_cartera, int estado, float valor, long fk_pago) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            if (fk_pago != 0) {
                pst = con.prepareStatement("UPDATE DETALLE_CARTERAS SET ESTADO = ?,FK_PAGO = ?,VALOR = ? WHERE ID_DETALLE_CARTERA = ?");
            } else {
                pst = con.prepareStatement("UPDATE DETALLE_CARTERAS SET ESTADO = ?,VALOR = ? WHERE ID_DETALLE_CARTERA = ?");
            }
            pst.setInt(1, estado);
            int seq = 2;
            if (fk_pago != 0) {
                pst.setLong(seq, fk_pago);
                seq = 3;
            }
            pst.setFloat(seq, valor);
            seq += 1;
            pst.setLong(seq, detalle_cartera);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public String consultarClaseRUNT(int clase_vehiculo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT CLASIFICACION FROM RUNT_CLASIFICACION WHERE ID_CLASE_VEHICULO = ?");
            pst.setInt(1, clase_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return "NO APLICA";
    }

    public void adicionarTituloValor(Titulo_Valor tituloV) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO TITULOS_VALORES(NUMERO_TITULO,FECHA_TITULO,"
                    + "FK_DIVIPO,OFICINA_PAGADORA,TITULO_JUDICIAL,NOMBRE_JUZGADO,CODIGO_JUZGADO,"
                    + "CONSIGNANTE,NUMERO_EXPEDIENTE,VALOR_DEPOSITO,FK_DEMANDANTE,FK_DEMANDADO,"
                    + "FECHA_PROCESO,ESTADO,FK_USUARIO,CLASE_DEPOSITO) "
                    + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setString(1, tituloV.getNroTitulo());
            pst.setDate(2, tituloV.getFechaTitulo());
            pst.setLong(3, tituloV.getDivipo());
            pst.setString(4, tituloV.getOficinaPagadora());
            pst.setString(5, tituloV.getTituloJudicial());
            pst.setString(6, tituloV.getNombreJuzgado());
            pst.setLong(7, tituloV.getCodigoJuzgado());
            pst.setString(8, tituloV.getNombreConsignante());
            pst.setInt(9, tituloV.getNumeroExpediente());
            pst.setInt(10, tituloV.getValorDeposito());
            pst.setLong(11, tituloV.getDemandante());
            pst.setLong(12, tituloV.getDemandado());
            pst.setTimestamp(13, tituloV.getFecha_Proceso());
            pst.setLong(14, tituloV.getEstado());
            pst.setLong(15, tituloV.getFk_usuario());
            pst.setString(16, tituloV.getClaseDeposito());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void eliminarPagoDetalleCartera(long fk_cartera, String referencia) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("DELETE FROM DETALLE_CARTERAS WHERE FK_CARTERA = ? AND FK_CONCEPTO IN(320,321,322) AND REFERENCIA = ?");
            pst.setLong(1, fk_cartera);
            pst.setString(2, referencia);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

// Creador por Jefrey Padilla - ValidarLiquidacion
    public void validarLiquidacion(long estado_tiquete, long fk_taquilla, long id_tiquete, long fk_usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE TIQUETES SET ESTADO_PRELIQUIDACION = ?, FK_TAQUILLA = ?, FK_USUARIO = ? WHERE ID_TIQUETE = ?");
            pst.setLong(1, estado_tiquete);
            pst.setLong(2, fk_taquilla);
            pst.setLong(3, fk_usuario);
            pst.setLong(4, id_tiquete);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarEstadoPreliquidacion(int estado_tiquete, long id_tiquete) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE TIQUETES SET ESTADO_PRELIQUIDACION = ? WHERE ID_TIQUETE = ?");
            pst.setInt(1, estado_tiquete);
            pst.setLong(2, id_tiquete);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

// Creado por Jefrey Padilla - Validar Pago (Liquidacion)
    public void validarPagoLiquidacion(long fk_taquilla, long fk_tiquete, long fk_usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE PAGOS SET FK_TAQUILLA = ?, FK_USUARIO = ? WHERE FK_TIQUETE = ?");
            pst.setLong(1, fk_taquilla);
            pst.setLong(2, fk_usuario);
            pst.setLong(3, fk_tiquete);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarEstadoDetalleTiqueteTramite(long fk_tiquete, long fk_tramite, int estado) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DETALLE_TIQUETES SET ESTADO = ? WHERE FK_TIQUETE = ? AND FK_TRAMITE = ?");
            pst.setInt(1, estado);
            pst.setLong(2, fk_tiquete);
            pst.setLong(3, fk_tramite);

            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void cancelarCarpeta(String observacion, Date fechaP, Date fechaE, long id_prestamo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update PRESTAMOS_CARPETAS set ESTADO = 4, OBSERVACION = ?, FECHA_PRESTAMO = ?, FECHA_ENTREGA = ? where ID_PRESTAMO = ?");
            pst.setString(1, observacion);
            pst.setLong(4, id_prestamo);
            pst.setDate(2, fechaP);
            pst.setDate(3, fechaE);
            pst.execute();
        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido modificar el grupo ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
        }
    }

    public boolean tieneCarteraActiva(String placa) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("select count(*) from carteras c,vehiculos v where c.fk_vehiculo = v.id_vehiculo and v.placa = ? and v.estado in (1,5) and estado_cartera = 1");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getInt(1) > 0;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
            System.out.println("No se pudo consultar la cartera del vehiculo");
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return false;
    }

    public String obtenerPosiblePagoTRANSITO(long fk_persona, long tramite) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT T.NUMERO_TIQUETE FROM TIQUETES T,DETALLE_TIQUETES D "
                    + "WHERE T.ID_TIQUETE = D.FK_TIQUETE "
                    + "AND D.FK_TRAMITE = ? "
                    + "AND T.FK_PERSONA = ? "
                    + "AND D.ESTADO = 1 "
                    + "AND T.ESTADO = 3 "
                    + "AND TO_CHAR(T.FECHA,'yyyy') = TO_CHAR(SYSDATE,'yyyy')"
                    + "ORDER BY T.NUMERO_TIQUETE");
            pst.setLong(1, tramite);
            pst.setLong(2, fk_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return "";
    }

    //Actualizar Tipo de pago by id Tiquete - Creado por Jefrey Padilla
    public void ActualizarTiqueteTipoPago(int tipo_pago, String referencia, Date fecha_referencia, long fk_banco, long fk_tiquete) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE TIQUETES SET TIPO_PAGO = ?, REFERENCIA = ?, FECHA_REFERENCIA = ?, FK_BANCO = ? WHERE ID_TIQUETE = ?");
            pst.setInt(1, tipo_pago);
            pst.setString(2, referencia);
            pst.setDate(3, fecha_referencia);
            pst.setLong(4, fk_banco);
            pst.setLong(5, fk_tiquete);
            pst.executeUpdate();
        } catch (Exception e) {
            throw new SQLException("No se pudo actualizar" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public LinkedList consultarTipoPagoByUsuario(long fk_usuario, long fk_caja) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaTipos = new LinkedList();

        try {

            pst = con.prepareStatement("SELECT P.* FROM USUARIOS_TIPOPAGOS T,PARAMETROS P WHERE T.FK_USUARIO = ? AND T.FK_CAJA = ? AND T.ESTADO = 1 AND P.CODIGO = T.TIPO_PAGO AND P.FK_GRUPO = 301 ORDER BY TIPO_PAGO");
            pst.setLong(1, fk_usuario);
            pst.setLong(2, fk_caja);
            rst = pst.executeQuery();

            while (rst.next()) {
                listaTipos.add(Parametro.load(rst));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

        return listaTipos;
    }

    public void actualizarInteresesGenerales() throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT ID_VEHICULO FROM VEHICULOS WHERE ID_VEHICULO IN(SELECT FK_VEHICULO FROM CARTERAS) AND ((PLACA BETWEEN 'EUM000' AND 'EUZ999') OR (PLACA BETWEEN 'GOA000' AND 'GOD999') OR (PLACA BETWEEN 'GPK000' AND 'GPL999') OR (PLACA BETWEEN 'ETU000' AND 'ETU999'))"); // orden
            rst = pst.executeQuery();
            int i = 1;
            while (rst.next()) {
                boolean swActualizo = actualizarInteresesCostasVehiculos(rst.getLong(1), 1);
                if (!swActualizo) {
                    throw new Exception("No actualizo intereses");
                }
                System.out.print((i++) + "\r");
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

    }

    public void adicionarSolicitudOficio(Solicitud_Oficios solicitudO) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO SOLICITUD_OFICIOS(NUMERO_OFICIO,FECHA_OFICIO,"
                    + "NUMERO_RADICACION,FECHA_RADICACION,SOLICITANTE,CARGO,REFERENCIA,DIRECCION,"
                    + "MUNICIPIO,FECHA_PROCESO,ESTADO,FK_USUARIO,ENTIDAD,NUMERO_INTERNO) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setString(1, solicitudO.getNum_oficio());
            pst.setDate(2, solicitudO.getFecha_oficio());
            pst.setString(3, solicitudO.getNum_radicacion());
            pst.setDate(4, solicitudO.getFecha_radicacion());
            pst.setString(5, solicitudO.getSolicitante());
            pst.setString(6, solicitudO.getCargo());
            pst.setString(7, solicitudO.getReferencia());
            pst.setString(8, solicitudO.getDireccion());
            pst.setString(9, solicitudO.getMunicipio());
            pst.setTimestamp(10, solicitudO.getFecha_proceso());
            pst.setLong(11, solicitudO.getEstado());
            pst.setLong(12, solicitudO.getFk_usuario());
            pst.setString(13, solicitudO.getEntidad());
            pst.setLong(14, solicitudO.getNumero_interno());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public long Ultimo_Embargo() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select max(id_embargo) from embargos");
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    public long UltimaSolicitudOficio() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT MAX(NUMERO_INTERNO) FROM SOLICITUD_OFICIOS");
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    public Solicitud_Oficios consultarOficioNumeroInterno(long numero_interno) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM SOLICITUD_OFICIOS WHERE NUMERO_INTERNO = ?");
            pst.setLong(1, numero_interno);
            rst = pst.executeQuery();
            while (rst.next()) {
                return Solicitud_Oficios.load(rst);
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public long adicionarNotaCredito(Nota_Credito notaCredito) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("INSERT INTO NOTAS_CREDITO(NUMERO,ESTADO,VALOR,FK_VEHICULO,FECHA_PROCESO,FECHA,FK_PERSONA,FK_USUARIO,REFERENCIA,FK_SEDE,TIPO) VALUES(?,?,?,?,?,?,?,?,?,?,?)", new String[]{"ID_NOTA_CREDITO"});
            pst.setString(1, notaCredito.getNumero());
            pst.setInt(2, notaCredito.getEstado());
            pst.setFloat(3, notaCredito.getValor());
            pst.setLong(4, notaCredito.getFk_registro());
            pst.setTimestamp(5, notaCredito.getFecha_proceso());
            pst.setDate(6, notaCredito.getFecha());
            pst.setLong(7, notaCredito.getFk_persona());
            pst.setLong(8, notaCredito.getFk_usuario());
            pst.setString(9, notaCredito.getReferencia());
            pst.setLong(10, notaCredito.getFk_sede());
            pst.setInt(11, notaCredito.getTipo());
            pst.execute();

            rst = pst.getGeneratedKeys();
            if (rst != null) {
                if (rst.next()) {
                    return rst.getLong(1);
                }
            }
            return 0;

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarNotaCartera(long fk_nota, long fk_detalle_cartera, float valor) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO NOTAS_CARTERA(FK_NOTA_CREDITO,FK_DETALLE_CARTERA,VALOR) VALUES(?,?,?)");
            pst.setLong(1, fk_nota);
            pst.setLong(2, fk_detalle_cartera);
            pst.setFloat(3, valor);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public float consultarCarteraConceptoActivo(long fk_cartera, long fk_concepto) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT SUM(VALOR) FROM DETALLE_CARTERAS WHERE FK_CARTERA = ? AND FK_CONCEPTO = ? AND ESTADO = 1"); // orden
            pst.setLong(1, fk_cartera);
            pst.setLong(2, fk_concepto);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;

    }

    public void adicionarRespuestaSolicitud(Respuesta_Solicitud respuestaS) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RESPUESTA_SOLICITUD(NUM_OFICIO_RESPUESTA,"
                    + "FECHA_OFICIO_RESPUESTA,FK_SOLICITUD_OFICIO,FECHA_PROCESO,ESTADO,FK_USUARIO,OFICIO_COMERCIAL) "
                    + "VALUES(?,?,?,?,?,?,?)");
            pst.setString(1, respuestaS.getNum_oficioRespuesta());
            pst.setDate(2, respuestaS.getFecha_oficioRespuesta());
            pst.setLong(3, respuestaS.getFk_solicitud_Oficio());
            pst.setTimestamp(4, respuestaS.getFecha_proceso());
            pst.setLong(5, respuestaS.getEstado());
            pst.setLong(6, respuestaS.getFk_usuario());
            pst.setString(7, respuestaS.getOficio_comercial());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarDetalleRespuestaSolicitud(long fk_solicitud, String referencia, String respuesta, String vehiculo, String nombre) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO DETALLE_RESPUESTA(FK_RESPUESTA,REFERENCIA,RESPUESTA,VEHICULO,NOMBRE)VALUES(?,?,?,?,?)");
            pst.setLong(1, fk_solicitud);
            pst.setString(2, referencia);
            pst.setString(3, respuesta);
            pst.setString(4, vehiculo);
            pst.setString(5, nombre);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public long UltimoNumeroRespuestaSolicitud() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT MAX(NUMERO_INTERNO) FROM SOLICITUD_OFICIOS");
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    public void actualizarEstadoOficio(long id_oficio) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE SOLICITUD_OFICIOS SET ESTADO = 2 WHERE ID_OFICIO = ?");
            pst.setLong(1, id_oficio);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Respuesta_Solicitud consultarRespuestaSolicitudByFkOfico(long fk_oficio) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {

            pst = con.prepareStatement("select * from respuesta_solicitud where fk_solicitud_oficio =  ? and estado = 1");
            pst.setLong(1, fk_oficio);
            rst = pst.executeQuery();

            while (rst.next()) {

                return Respuesta_Solicitud.load(rst);

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public void finalizarEspecificaciones(long fk_vehiculo, java.sql.Date fecha, long fkUsuario)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DATOS_VEHICULOS SET FECHA_FIN = ?,FK_USUARIO = ? WHERE FK_VEHICULO = ? AND FECHA_FIN IS NULL");
            pst.setDate(1, fecha);
            pst.setLong(2, fkUsuario);
            pst.setLong(3, fk_vehiculo);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarAgente(Agente agente) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into agentes (nombre,tipo,placa,fecha_inicio,fecha_fin,fecha_proceso) values(?,?,?,?,?,?)");
            pst.setString(1, agente.getNombre());
            pst.setInt(2, agente.getTipo());
            pst.setInt(3, agente.getPlaca());
            pst.setDate(4, agente.getFecha_inicio());
            pst.setDate(5, agente.getFecha_fin());
            pst.setDate(6, agente.getFecha_proceso());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listarTitulosVByFechas(Timestamp fechaI, Timestamp fechaF) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            prst = con.prepareStatement("SELECT * FROM RUNT_PREASIGNACION WHERE FECHA BETWEEN ? AND ? "); // orden
            prst.setTimestamp(1, fechaI);
            prst.setTimestamp(2, fechaF);
            rs = prst.executeQuery();
            while (rs.next()) {
                lista.add(Preasignacion.load(rs));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
        }
        if (prst != null) {
            prst.close();
        }
        return lista;
    }

    public void adicionarOficioEmbargo(Oficio_Embargo oficioE) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO OFICIOS_EMBARGOS(NUM_OFICIO,FECHA_OFICIO,"
                    + "NUM_RADICACION,FECHA_RADICACION,SOLICITANTE,CARGO,REFERENCIA,DIRECCION,"
                    + "MUNICIPIO,FECHA_PROCESO,ESTADO,FK_USUARIO,ENTIDAD,FK_VEHICULO,FK_EMBARGO,NOVEDAD) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setString(1, oficioE.getNum_oficio());
            pst.setDate(2, oficioE.getFecha_oficio());
            pst.setString(3, oficioE.getNum_radicacion());
            pst.setDate(4, oficioE.getFecha_radicacion());
            pst.setString(5, oficioE.getSolicitante());
            pst.setString(6, oficioE.getCargo());
            pst.setString(7, oficioE.getReferencia());
            pst.setString(8, oficioE.getDireccion());
            pst.setString(9, oficioE.getMunicipio());
            pst.setTimestamp(10, oficioE.getFecha_proceso());
            pst.setLong(11, oficioE.getEstado());
            pst.setLong(12, oficioE.getFk_usuario());
            pst.setString(13, oficioE.getEntidad());
            pst.setLong(14, oficioE.getFk_vehiculo());
            pst.setLong(15, oficioE.getFk_embargo());
            pst.setInt(16, oficioE.getNovedad());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarOficioIdEmbargo(long fk_embargo, String num_oficio, Date fecha_oficio) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update OFICIOS_EMBARGOS set FK_EMBARGO = ?,ESTADO = 2 where NUM_OFICIO = ? AND FECHA_OFICIO = ?");
            pst.setLong(1, fk_embargo);
            pst.setString(2, num_oficio);
            pst.setDate(3, fecha_oficio);
            pst.execute();
        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido modificar el oficio de embargo");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
        }

    }

    public Oficio_Embargo consultarOficiosEmbargosByNumeroFecha(String num_oficio, Date fecha_oficio) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM OFICIOS_EMBARGOS WHERE NUM_OFICIO = ? AND FECHA_OFICIO = ?");
            pst.setString(1, num_oficio);
            pst.setDate(2, fecha_oficio);
            rst = pst.executeQuery();
            while (rst.next()) {
                return Oficio_Embargo.load(rst);
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el oficio ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public void editarOficioEmbargo(Oficio_Embargo oficioE) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta ");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE OFICIOS_EMBARGOS SET NUM_OFICIO = ?,FECHA_OFICIO = ?,NUM_RADICACION = ?,FECHA_RADICACION = ?,"
                    + "SOLICITANTE = ?,CARGO = ?,REFERENCIA = ?,DIRECCION = ?,MUNICIPIO = ?,ENTIDAD = ?,FK_VEHICULO = ?,"
                    + "NOVEDAD = ? WHERE ID_OFICIO = ?");
            pst.setString(1, oficioE.getNum_oficio());
            pst.setDate(2, oficioE.getFecha_oficio());
            pst.setString(3, oficioE.getNum_radicacion());
            pst.setDate(4, oficioE.getFecha_radicacion());
            pst.setString(5, oficioE.getSolicitante());
            pst.setString(6, oficioE.getCargo());
            pst.setString(7, oficioE.getReferencia());
            pst.setString(8, oficioE.getDireccion());
            pst.setString(9, oficioE.getMunicipio());
            pst.setString(10, oficioE.getEntidad());
            pst.setLong(11, oficioE.getFk_vehiculo());
            pst.setInt(12, oficioE.getNovedad());
            pst.setLong(13, oficioE.getId_oficio());

            pst.executeUpdate();

        } catch (Exception e) {
            throw new SQLException("Error ingresando el vehiculo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Titulo_Valor consultarTituloValor(String numero) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM TITULOS_VALORES WHERE NUMERO_TITULO =?");
            pst.setString(1, numero);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Titulo_Valor.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido consultar el oficio ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public java.util.List consultarTituloValorByPlaca(String placa) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List listaT = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT T.* FROM TITULOS_VALORES T,TIQUETES P WHERE P.FK_VEHICULO = (SELECT ID_VEHICULO FROM VEHICULOS WHERE PLACA = ?) AND P.TIPO_PAGO = 2 AND (P.REFERENCIA = T.NUMERO_TITULO OR 'A'||P.REFERENCIA = T.NUMERO_TITULO)");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaT.add(Titulo_Valor.load(rst));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaT;
    }

    public java.util.List consultarTituloValorByFecha(java.sql.Date fechaI, java.sql.Date fechaF) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List listaT = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT T.* FROM TITULOS_VALORES T WHERE FECHA_TITULO BETWEEN ? AND ?");
            pst.setDate(1, fechaI);
            pst.setDate(2, fechaF);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaT.add(Titulo_Valor.load(rst));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaT;
    }

    public java.util.List listarPreasignaciones() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            prst = con.prepareStatement("SELECT * FROM RUNT_PREASIGNACION WHERE ESTADO != 2"); // orden
            rs = prst.executeQuery();
            while (rs.next()) {
                lista.add(Preasignacion.load(rs));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
        }
        if (prst != null) {
            prst.close();
        }
        return lista;
    }

    public java.sql.Date fechaMas(java.sql.Date fch, int dias) {
        Calendar cal = new GregorianCalendar();
        cal.setTimeInMillis(fch.getTime());
        cal.add(Calendar.DATE, dias);
        return new java.sql.Date(cal.getTimeInMillis());
    }

    public java.util.List listarNotasCredito(long fk_vehiculo) throws Exception {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaNotas = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM NOTAS_CREDITO WHERE FK_VEHICULO = ? ORDER BY FECHA");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaNotas.add(Nota_Credito.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaNotas;
    }

    public java.util.List listarNotasCartera(long nota_credito) throws Exception {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaNotas = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT DC.* FROM NOTAS_CARTERA NC,DETALLE_CARTERAS DC WHERE FK_NOTA_CREDITO = ? AND FK_DETALLE_CARTERA = ID_DETALLE_CARTERA ORDER BY 1");
            pst.setLong(1, nota_credito);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaNotas.add(Detalle_Cartera.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaNotas;
    }

    public java.util.List listarNotasConcepto(long nota_credito) throws Exception {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaNotas = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM NOTAS_CONCEPTOS WHERE FK_NOTA_CREDITO = ?");
            pst.setLong(1, nota_credito);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaNotas.add(Nota_Concepto.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaNotas;
    }

    public Radicacion_Licencia consultarRadicacionByfkPersona(long fk_persona) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Radicacion radicacion = null;

        try {
            pst = con.prepareStatement("select * from radicacion_licencias where fk_persona = ? and estado not in (5,8,4)");
            pst.setLong(1, fk_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Radicacion_Licencia.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;

    }

    public void editarFormularioTramiteLC(long idFormulario, String runt, String categoria, String categoriaA) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE FORMULARIO_LICENCIAS SET RUNT = ?, CATEGORIA = ?, CATEGORIA_ANTERIOR = ? WHERE ID_FORMULARIO_LICENCIA = ?");
            pst.setString(1, runt);
            pst.setString(2, categoria);
            pst.setString(3, categoriaA);
            pst.setLong(4, idFormulario);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List consultarEmpresaVinculadora(long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM EMPRESAS_VINCULADORAS WHERE FK_VEHICULO = ?");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Empresa_Vinculadora.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar las aletas debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public String consultarPagoReclamo(int tipo, String fk_referencia, long fk_tramite) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            if (tipo == 1) {
                pst = con.prepareStatement("SELECT T.NUMERO_TIQUETE FROM RECLAMOS_PAGOS RP,PAGOS P,TIQUETES T WHERE RP.FK_PAGO = P.ID_PAGO AND P.FK_TIQUETE = T.ID_TIQUETE AND RP.TIPO = ? AND RP.PLACA = ? AND RP.FK_TRAMITE = ? AND RP.ESTADO = 1");
            } else {
                pst = con.prepareStatement("SELECT T.NUMERO_TIQUETE FROM RECLAMOS_PAGOS RP,PAGOS P,TIQUETES T WHERE RP.FK_PAGO = P.ID_PAGO AND P.FK_TIQUETE = T.ID_TIQUETE AND RP.TIPO = ? AND RP.FK_PERSONA = TO_NUMBER(?) AND RP.FK_TRAMITE = ? AND RP.ESTADO = 1");
            }
            pst.setInt(1, tipo);
            pst.setString(2, fk_referencia);
            pst.setLong(3, fk_tramite);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;

    }

    public void adicionarSaldoFavor(Saldo_Favor saldoFavor) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO SALDOS_FAVOR(NUMERO,FK_PERSONA,TIPO,VALOR,REFERENCIA,ESTADO,FECHA,FECHA_PROCESO,FK_USUARIO) VALUES(?,?,?,?,?,?,?,?,?)");
            pst.setString(1, saldoFavor.getNumero());
            pst.setLong(2, saldoFavor.getFk_persona());
            pst.setInt(3, saldoFavor.getTipo());
            pst.setFloat(4, saldoFavor.getValor());
            pst.setString(5, saldoFavor.getReferencia());
            pst.setInt(6, saldoFavor.getEstado());
            pst.setDate(7, saldoFavor.getFecha());
            pst.setTimestamp(8, saldoFavor.getFecha_proceso());
            pst.setLong(9, saldoFavor.getFk_usuario());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public List<Prescripcion> consultarPrescripcionByPlaca(long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Prescripcion> lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("select * from prescripciones where fk_vehiculo = ? and estado = 1");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Prescripcion.load(rst));
            }

        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;
    }

    public java.util.List listarPrescripcionesCarteraByFechas(Date fechaI, Date fechaF) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            prst = con.prepareStatement("SELECT * FROM PRESCRIPCIONES WHERE FECHA BETWEEN ? AND ? ORDER BY FECHA "); // orden
            prst.setDate(1, fechaI);
            prst.setDate(2, fechaF);
            rs = prst.executeQuery();
            while (rs.next()) {
                lista.add(Prescripcion.load(rs));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (prst != null) {
                prst.close();
            }
        }

        return lista;
    }

    public java.util.List consultarSaldosAFavor(long fkPersona) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            prst = con.prepareStatement("SELECT * FROM SALDOS_FAVOR WHERE FK_PERSONA = ?"); // orden
            prst.setLong(1, fkPersona);
            rs = prst.executeQuery();
            while (rs.next()) {
                lista.add(Saldo_Favor.load(rs));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (prst != null) {
                prst.close();
            }
        }

        return lista;
    }

    public Saldo_Favor consultarSaldosAFavorxReferencia(int tipo, String referencia) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;

        try {
            prst = con.prepareStatement("SELECT * FROM SALDOS_FAVOR WHERE TIPO = ? AND REFERENCIA = ?"); // orden
            prst.setInt(1, tipo);
            prst.setString(2, referencia);
            rs = prst.executeQuery();
            if (rs.next()) {
                return Saldo_Favor.load(rs);
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (prst != null) {
                prst.close();
            }
        }

        return null;
    }

    public Nota_Credito consultarNotaCredito(long fk_nota_credito) throws Exception {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM NOTAS_CREDITO WHERE ID_NOTA_CREDITO = ?");
            pst.setLong(1, fk_nota_credito);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Nota_Credito.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public Saldo_Favor consultarSaldoFavor(long id_saldo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM SALDOS_FAVOR WHERE ID_SALDO_FAVOR = ?");
            pst.setLong(1, id_saldo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Saldo_Favor.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar los saldos debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void calcularInteresesXServicio(int servicio) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT ID_VEHICULO FROM VEHICULOS WHERE SERVICIO = ? AND ESTADO IN(1,5)");
            pst.setInt(1, servicio);
            rst = pst.executeQuery();
            int i = 0;
            while (rst.next()) {
                long id_vehiculo = rst.getLong(1);
                boolean swActualizo = actualizarInteresesCostasVehiculos(id_vehiculo, 1);
                if (!swActualizo) {
                    throw new Exception("No se actualizo intereses");
                }
                i++;
                System.out.println("n : " + i);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar los saldos debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
    }

    public java.util.List consultarGuiaCajaByPlaca(long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("select * from guias_cajas where fk_vehiculo = ? and estado = 1");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(GuiaCaja.load(rst));
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;
    }

    public void editarToken(long id_usuario, String token) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RUNT_USUARIOS SET TEMPLATE = ? WHERE FK_USUARIO = ?");
            pst.setString(1, token);
            pst.setLong(2, id_usuario);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void editarTokenAll(String token) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RUNT_USUARIOS SET TEMPLATE = ?");
            pst.setString(1, token);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarTokenPersona(long id_persona, String token) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO TOKENS(FK_PERSONA,TOKEN) VALUES(?,?)");
            pst.setLong(1, id_persona);
            pst.setString(2, token);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public String consultarTokenPersona(long id_persona) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT TOKEN FROM TOKENS WHERE FK_PERSONA = ? ORDER BY 1 DESC");
            pst.setLong(1, id_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return null;
    }

    public void actualizarTokenPersona(long id_persona, String token) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE TOKENS SET TOKEN = ? WHERE FK_PERSONA = ?");
            pst.setString(1, token);
            pst.setLong(2, id_persona);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void ajustarInteresesCostasVehiculos(long fk_vehiculo, long usuario, java.sql.Date fechaActual) throws Exception {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            procesos.calcularIntereses calcularI = new procesos.calcularIntereses();
            int s = consultarMaxCodigo();
            String tasas[][] = getIntereses();
            calcularI.setTasas("s", s, tasas);
            pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE FK_VEHICULO = ? AND ESTADO_CARTERA = 1 ORDER BY FECHA_CREACION,REFERENCIA");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            List<String> Permitidas = new ArrayList<String>();
            while (rst.next()) {
                Cartera cartera = Cartera.Load(rst);
                int idc = cartera.getTipo() == 1 ? 318 : cartera.getTipo() == 2 ? 249 : 319;
                java.util.Date fechaInicio = new java.util.Date(cartera.getFecha_saldo().getTime());
                java.util.Date fechaRef = new java.util.Date(tasas[0][0]);
                fechaInicio = fechaInicio.getTime() < fechaRef.getTime() ? fechaRef : fechaInicio;
                float valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 3);
                float interes = calcularI.getValor(fechaInicio, fechaActual, valorReal);
                float descuento = 0;
                int interesR = Math.round(interes);
                interesR = interesR <= 0 ? 0 : interesR;
                boolean existeC = existeConcepto(idc, cartera.getId_cartera());
                /*Nuevo*/
                String fecha_hoy = new java.text.SimpleDateFormat("dd/MM/yyyy").format(new java.util.Date());
                Conf_Descuento cd = null;//new Conf_Descuento().getCnf_des(this, 1, idc, fecha_hoy);

                if (cd != null) {
                    boolean ws = false;
                    if (Permitidas.isEmpty()) {
                        for (int i = Integer.parseInt(cd.getVig_inicial()); i <= Integer.parseInt(cd.getVig_final()); i++) {
                            Permitidas.add(i + "");
                        }
                    }

                    if (!Permitidas.contains(cartera.getReferencia())) {
                        //null
                    } else {
                        int interesD = (int) ((interesR * cd.getPorcentaje()) / 100);
                        descuento = -interesD;

                        if (!existeConcepto((int) cd.getFk_concepto_desc(), cartera.getId_cartera())) {
                            Detalle_Cartera dc = new Detalle_Cartera();
                            dc.setEstado(1);
                            dc.setFecha(cartera.getFecha_creacion());
                            dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                            dc.setFk_cartera(cartera.getId_cartera());
                            dc.setFk_concepto(cd.getFk_concepto_desc());
                            dc.setFk_usuario(usuario);
                            dc.setReferencia(cartera.getReferencia());
                            dc.setValor(-interesD);
                            adicionarDetalleCartera(dc);
                        } else {
                            actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) -interesD);
                        }
                        ws = true;
                    }
                } else {
                    new Conf_Descuento().eliminarDescuento(this, fk_vehiculo, consultarUsuario(usuario), 1);
                }
                /*Nuevo*/
                if (!existeC) {
                    if (interesR > 0) {
                        Detalle_Cartera dc = new Detalle_Cartera();
                        dc.setEstado(1);
                        dc.setFecha(cartera.getFecha_creacion());
                        dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                        dc.setFk_cartera(cartera.getId_cartera());
                        dc.setFk_concepto(idc);
                        dc.setFk_usuario(usuario);
                        dc.setReferencia(cartera.getReferencia());
                        dc.setValor(interesR);
                        adicionarDetalleCartera(dc);
                    }
                } else {
                    actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) interesR);
                }
                if (interesR >= 0) {
                    idc = cartera.getTipo() == 1 ? 302 : cartera.getTipo() == 2 ? 276 : 303;
                    interes = Float.parseFloat(consultarPorcentajeCostas(cartera.getEstado_vigencia(), cartera.getFk_concepto()));
                    valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 4);
                    float costas = (float) ((valorReal + descuento) * interes);
                    int costasR = Math.round(costas);
                    costasR = costasR < 0 ? 0 : costasR;
                    costasR = interesR == 0 ? 0 : costasR;
                    existeC = existeConcepto(idc, cartera.getId_cartera());
                    if (!existeC) {
                        if (costasR > 0) {
                            Detalle_Cartera dc = new Detalle_Cartera();
                            dc.setEstado(1);
                            dc.setFecha(cartera.getFecha_creacion());
                            dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                            dc.setFk_cartera(cartera.getId_cartera());
                            dc.setFk_concepto(idc);
                            dc.setFk_usuario(usuario);
                            dc.setReferencia(cartera.getReferencia());
                            dc.setValor(costasR);
                            adicionarDetalleCartera(dc);
                        }
                    } else {
                        actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) costasR);
                    }
                }
                actualizarValoresCartera(cartera.getId_cartera());
                con.commit();
            }
        } catch (Exception exc) {
            System.out.println("No se actualizo intereses " + exc);
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
            }
        }

    }

    public LinkedList listarCarteraVehiculo(long fk_vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaCarteras = new LinkedList();
        try {
            pst = con.prepareStatement("select * from carteras where fk_vehiculo = ? and estado_cartera = 1 order by referencia"); // orden
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaCarteras.add(Cartera.Load(rst));
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return listaCarteras;
    }

    public LinkedList listarCarteraVehiculo(long fk_vehiculo, String ini, String fin) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaCarteras = new LinkedList();
        try {
            pst = con.prepareStatement("select * from carteras where fk_vehiculo = ? and estado_cartera = 1 and referencia between ? and ? order by referencia"); // orden
            pst.setLong(1, fk_vehiculo);
            pst.setString(2, ini);
            pst.setString(3, fin);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaCarteras.add(Cartera.Load(rst));
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return listaCarteras;
    }

    public Comparendo_Curso consultarComparendoCurso(long comparendo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM COMPARENDOS_CURSOS WHERE FK_COMPARENDO = ?");
            pst.setLong(1, comparendo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Comparendo_Curso.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar los cursos debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void adicionarComparendoCurso(Comparendo_Curso cc) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO COMPARENDOS_CURSOS(FK_PERSONA,FK_COMPARENDO,CERTIFICADO,FECHA,LUGAR,VALOR,ESTADO,DESCUENTO) VALUES(?,?,?,?,?,?,?,?)");
            pst.setLong(1, cc.getFk_persona());
            pst.setLong(2, cc.getFk_comparendo());
            pst.setInt(3, cc.getCertificado());
            pst.setDate(4, cc.getFecha());
            pst.setInt(5, cc.getLugar());
            pst.setFloat(6, cc.getValor());
            pst.setInt(7, cc.getEstado());
            pst.setInt(8, cc.getDescuento());
            pst.execute();
        } catch (Exception e) {
            throw new SQLException("Error al adicionar el cursos debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List consultarVehiculosTTAMVEHI() throws java.sql.SQLException {

        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {

            pst = con.prepareStatement("SELECT '08634001' ORGANISMO,"
                    + "V.PLACA PLACA,"
                    + "(SELECT NVL(M.NOMBRE,'SIN MARCA') FROM MARCAS M,LINEAS L WHERE L.FK_MARCA = M.CODIGO AND L.ID_LINEA = V.FK_LINEA) MARCA,"
                    + "(SELECT NVL(L.NOMBRE,'SIN LINEA') FROM LINEAS L WHERE L.ID_LINEA = V.FK_LINEA) LINEA,"
                    + "V.CLASE_VEHICULO CLASE,"
                    + "(SELECT NVL(MAX(C.NOMBRE),'INDEFINIDO') FROM COLORES C,HISTORICO_COLOR H WHERE C.ID_COLOR = H.FK_COLOR AND H.FK_VEHICULO = V.ID_VEHICULO AND H.FECHA_FIN IS NULL) COLOR,"
                    + "V.SERVICIO SERVICIO,"
                    + "(SELECT C.MIGRACION FROM DATOS_VEHICULOS D,C_MIGRACION C WHERE D.SUB_GRUPO_CODIGO = 2 AND D.FECHA_FIN IS NULL AND D.VALOR = C.RUNT AND D.FK_VEHICULO = V.ID_VEHICULO) CARROCERIA,"
                    + "(SELECT MAX(D.VALOR) FROM DATOS_VEHICULOS D WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.SUB_GRUPO_CODIGO = 324 AND D.FECHA_FIN IS NULL) MODALIDAD,"
                    + "(SELECT ROUND(NVL(MAX(D.VALOR),0)) FROM DATOS_VEHICULOS D WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 2 AND D.PARAM_CODIGO = 11 AND D.FECHA_FIN IS NULL) CILINDRAJE,"
                    + "V.MODELO MODELO,"
                    + "(SELECT MAX(D.VALOR) FROM DATOS_VEHICULOS D WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 2 AND D.PARAM_CODIGO = 19 AND D.FECHA_FIN IS NULL) NRO_MOTOR,"
                    + "(SELECT MAX(D.VALOR) FROM DATOS_VEHICULOS D WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 2 AND D.PARAM_CODIGO = 20 AND D.FECHA_FIN IS NULL) NRO_CHASIS,"
                    + "(SELECT MAX(D.VALOR) FROM DATOS_VEHICULOS D WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 2 AND D.PARAM_CODIGO = 21 AND D.FECHA_FIN IS NULL) NRO_SERIE,"
                    + "(SELECT NVL(MAX(D.VALOR),0) FROM DATOS_VEHICULOS D WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 2 AND D.PARAM_CODIGO = 2 AND D.FECHA_FIN IS NULL) CAP_TONELADAS,"
                    + "(SELECT NVL(MAX(D.VALOR),0) FROM DATOS_VEHICULOS D WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 2 AND D.PARAM_CODIGO = 1 AND D.FECHA_FIN IS NULL) CAP_PASAJEROS,"
                    + "TO_CHAR(V.FECHA_MATRICULA,'YYYYMMDD') FECHA_MATRICULA,"
                    + "(SELECT NVL(MAX(D.VALOR),1) FROM DATOS_VEHICULOS D WHERE D.FK_VEHICULO = V.ID_VEHICULO AND D.GRUPO_CODIGO = 1 AND D.SUB_GRUPO_CODIGO = 75 AND D.FECHA_FIN IS NULL) TIPO_COMBUSTIBLE,"
                    + "(SELECT NVL(MAX(NUMERO),V.PLACA) FROM LICENCIA_TRANSITO T WHERE T.FK_VEHICULO = V.ID_VEHICULO AND T.ESTADO = 1) NRO_LIC_TTO,"
                    + "P.SIREV NRO_FACTURA_SIREV,"
                    + "DECODE(V.ESTADO,1,1,3,2,4,3,5,1) ESTADO "
                    + "FROM VEHICULOS V,PLACAS_PLANO P WHERE V.PLACA = P.PLACA AND ESTADO IN(1,3,4,5)");
            rst = pst.executeQuery();
            while (rst.next()) {
                java.sql.ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap mapa = new java.util.HashMap();
                for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                    mapa.put(rsmd.getColumnName(i), rst.getObject(i));
                }
                lista.add(mapa);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return lista;
    }

    public java.util.List consultarPropietariosTTAHPROP() throws java.sql.SQLException {

        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {

            pst = con.prepareStatement("SELECT '08634001' ORGANISMO,"
                    + "V.PLACA PLACA,"
                    + "DECODE(P.TIPO_DOCUMENTO,1,'C',2,'N',3,'E',4,'T',5,'P') TIPO_DOCUMENTO,"
                    + "P.DOCUMENTO NRO_DOCUMENTO,"
                    + "R.PRO_INDIVISO PROINDIVISO,"
                    + "TO_CHAR(R.FECHA_INI,'YYYYMMDD') FECHAPROPIEDAD,"
                    + "NVL(DECODE(P.TIPO_DOCUMENTO||'','2',' '),P.APELLIDO_1) APELLIDO_1,"
                    + "NVL(DECODE(P.TIPO_DOCUMENTO||'','2',' '),P.APELLIDO_2) APELLIDO_2,"
                    + "NVL(DECODE(P.TIPO_DOCUMENTO||'','2',P.NOMBRE_1||P.APELLIDO_1),P.NOMBRE_1) NOMBRE_1,"
                    + "NVL(DECODE(P.TIPO_DOCUMENTO||'','2',' '),P.NOMBRE_2) NOMBRE_2,"
                    + "(SELECT MAX(V.CODIGO) FROM DIRECCIONES D,DIVIPO V WHERE D.FK_DIVIPO = V.ID_DIVIPO AND D.FK_PERSONA = P.ID_PERSONA AND D.ESTADO = 1) CIUDAD,"
                    + "(SELECT MAX(D.DESCRIPCION) FROM DIRECCIONES D WHERE D.FK_PERSONA = P.ID_PERSONA AND D.ESTADO = 1) DIRECCION,"
                    + "(SELECT MAX(NVL(D.TELEFONO,P.CELULAR)) FROM DIRECCIONES D WHERE D.FK_PERSONA = P.ID_PERSONA AND D.ESTADO = 1) TELEFONO "
                    + "FROM VEHICULOS V,PERSONAS P,PROPIETARIOS R,PLACAS_PLANO N "
                    + "WHERE P.ID_PERSONA = R.FK_PERSONA AND V.ID_VEHICULO = R.FK_VEHICULO "
                    + "AND R.FECHA_FIN IS NULL AND V.PLACA = N.PLACA AND V.ESTADO IN(1,3,4,5)");
            rst = pst.executeQuery();
            while (rst.next()) {
                java.sql.ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap mapa = new java.util.HashMap();
                for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                    mapa.put(rsmd.getColumnName(i), rst.getObject(i));
                }
                lista.add(mapa);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return lista;
    }

    public java.util.List consultarTramitesTTAHTRVE() throws java.sql.SQLException {

        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {

            pst = con.prepareStatement("SELECT \n"
                    + "T.ID_TRAMITE TRVTIPO, \n"
                    + "V.PLACA TRVPLACA, \n"
                    + "TO_CHAR(R.FECHA,'YYYYMMDD') TRVFECHA, \n"
                    + "'08634001' TRVOFIEX, \n"
                    + "(SELECT NVL(MAX(L.NUMERO),V.PLACA) FROM LICENCIA_TRANSITO L WHERE L.FK_VEHICULO = V.ID_VEHICULO AND L.ESTADO = 1) TRVNUMERO, \n"
                    + "P.SIREV TRVFACT \n"
                    + "FROM VEHICULOS V, \n"
                    + "FORMULARIOS F, \n"
                    + "RADICACIONES R, \n"
                    + "TRAMITES T, \n"
                    + "PLACAS_PLANO P \n"
                    + "WHERE V.PLACA = F.PLACA AND F.FK_RADICACION = R.ID_RADICACION AND R.ESTADO IN(4,5) \n"
                    + "AND F.FK_TRAMITE = T.ID_TRAMITE \n"
                    + "AND T.ID_TRAMITE in (1,4) \n"
                    + "AND V.PLACA = P.PLACA AND V.ESTADO IN(1,3,4,5) \n"
                    + "union \n"
                    + "SELECT \n"
                    + "DECODE(Ta.Nombre_Tramite, \n"
                    + "'RADICACION DE CUENTA',4, \n"
                    + "'RADICADO DE CUENTA',4, \n"
                    + "'MATRICULA',1, \n"
                    + "'MATRICULA INICIAL',1), \n"
                    + "V.PLACA TRVPLACA, \n"
                    + "TO_CHAR(V.Fecha_Matricula,'YYYYMMDD') TRVFECHA, \n"
                    + "'08634001' TRVOFIEX, \n"
                    + "(SELECT NVL(MAX(L.NUMERO),V.PLACA) FROM LICENCIA_TRANSITO L WHERE L.FK_VEHICULO = V.ID_VEHICULO AND L.ESTADO = 1) TRVNUMERO, \n"
                    + "P.SIREV TRVFACT \n"
                    + "FROM VEHICULOS V, Tramites_Asociados TA, \n"
                    + "PLACAS_PLANO P \n"
                    + "WHERE V.PLACA = P.PLACA AND V.ESTADO IN(1,3,4,5) \n"
                    + "AND Ta.Fk_Vehiculo = V.Id_Vehiculo AND (Ta.Nombre_Tramite LIKE 'MATRICULA%' OR Ta.Nombre_Tramite LIKE 'RADICA%')");
            rst = pst.executeQuery();
            while (rst.next()) {
                java.sql.ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap mapa = new java.util.HashMap();
                for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                    mapa.put(rsmd.getColumnName(i), rst.getObject(i));
                }
                lista.add(mapa);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return lista;
    }

    public java.util.List consultarTramitesTTARUNPREN() throws java.sql.SQLException {

        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {

            pst = con.prepareStatement("Select \n"
                    + " '08634001' as \"Organisimo\"\n"
                    + ",veh.placa as \"NroPlaca\"\n"
                    + ",doc.nombre_corto as \"Tipo Documento\"\n"
                    + ",Acr.Documento as \"Documento\"\n"
                    + ",Trim(Acr.Nombre_1) as \"Nombre 1\"\n"
                    + ",Trim(Nvl(acr.nombre_2,' ')) as \"Nombre 2\"\n"
                    + ",Trim(case \n"
                    + " When acr.tipo_documento = 2 then ' ' \n"
                    + " else acr.Apellido_1\n"
                    + " end) as \"Apellido 1\"\n"
                    + ",Trim(Nvl(acr.Apellido_2,' ')) as \"Apellido 2\"\n"
                    + ",Trim(Nvl(Di.descripcion,' ')) as \"Direccion\"\n"
                    + ",Dv.Codigo \"Ciudad\"\n"
                    + ",Nvl(Di.Telefono,'') \"Telefono\"\n"
                    + ",Al.Grado \"Grado de la Prenda\"\n"
                    + ",To_char(case\n"
                    + "When (al.Fecha_fin is null) then Al.Fecha_Ini\n"
                    + "else Al.Fecha_Fin\n"
                    + "end,'YYYYMMDD') \"Fecha del Tramite\"\n"
                    + ",case\n"
                    + "When (al.Fecha_fin is null) then 'I'\n"
                    + "else 'L'\n"
                    + "end\n"
                    + "\"Estado prenda\"\n"
                    + ",est.nombre_Corto \"tipo alerta\" \n"
                    + "from Alertas al\n"
                    + "Inner join Vehiculos veh on Veh.Id_Vehiculo = Al.Fk_Vehiculo\n"
                    + "Inner join Personas acr on Acr.Id_Persona = Al.Fk_Persona\n"
                    + "Left join Direcciones di on Di.Fk_Persona = Acr.Id_Persona\n"
                    + "left join Divipo dv on Dv.Id_Divipo = Di.Fk_Divipo\n"
                    + "inner join Parametros doc on Doc.Codigo= Acr.Tipo_Documento and doc.fk_grupo = 5\n"
                    + "Inner join Parametros est on Est.Codigo = Al.Tipo and Est.Fk_Grupo = 4\n"
                    + "Where veh.placa in (Select placa from Placas_Plano)");
            rst = pst.executeQuery();
            while (rst.next()) {
                java.sql.ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap mapa = new java.util.HashMap();
                for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                    mapa.put(rsmd.getColumnName(i), rst.getObject(i));
                }
                lista.add(mapa);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return lista;
    }

    public java.util.List consultarPagosByFactura(String factura) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM TIQUETES WHERE NUMERO_TIQUETE = ?");
            pst.setString(1, factura);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Tiquete.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lista;

    }

    public void editarSaldoFavor(Saldo_Favor saldoFavor) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE SALDOS_FAVOR SET ESTADO = ?,RESOLUCION = ?,FECHA_RESOLUCION = ?,FECHA_DEVOLUCION = ?,FK_USUARIO_DEVOLUCION = ?,OBSERVACION = ? WHERE ID_SALDO_FAVOR = ?");
            pst.setLong(1, saldoFavor.getEstado());
            pst.setString(2, saldoFavor.getResolucion());
            pst.setDate(3, saldoFavor.getFecha_resolucion());
            pst.setTimestamp(4, saldoFavor.getFecha_devolucion());
            pst.setLong(5, saldoFavor.getFk_usuario_devolucion());
            pst.setString(6, saldoFavor.getObservacion());
            pst.setLong(7, saldoFavor.getId_saldo_favor());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Comparendo consultarComparendoById(long id_comparendo) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Comparendo comparendo = null;
        try {
            pst = con.prepareStatement("select * from comparendos  where  id_comparendo = ?");
            pst.setLong(1, id_comparendo);

            rst = pst.executeQuery();
            if (rst.next()) {
                comparendo = Comparendo.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return comparendo;

    }

    public void adicionarLiquidacionCia(Liquidacion_Cia lc) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO LIQUIDACIONES_CIA(NUMERO,VALOR,FK_COMPARENDO,FK_PERSONA,FECHA_PROCESO,FECHA,FK_USUARIO,FK_SEDE,ESTADO) VALUES(?,?,?,?,?,?,?,?,?)");
            pst.setString(1, lc.getNumero());
            pst.setFloat(2, lc.getValor());
            pst.setLong(3, lc.getFk_comparendo());
            pst.setLong(4, lc.getFk_persona());
            pst.setTimestamp(5, lc.getFecha_proceso());
            pst.setDate(6, lc.getFecha());
            pst.setLong(7, lc.getFk_usuario());
            pst.setLong(8, lc.getFk_sede());
            pst.setInt(9, lc.getEstado());
            pst.execute();
        } catch (Exception e) {
            throw new SQLException("Error al adicionar el cursos debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Liquidacion_Cia consultarLiquidacionCIA(long fk_comparendo, long fk_persona) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM LIQUIDACIONES_CIA WHERE FK_COMPARENDO = ? AND FK_PERSONA = ?");
            pst.setLong(1, fk_comparendo);
            pst.setLong(2, fk_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Liquidacion_Cia.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;

    }

    public void adicionarPagoCIA(Liquidacion_Cia liquidacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE LIQUIDACIONES_CIA SET REFERENCIA = ?,FECHA_PAGO = ?,ESTADO = ? WHERE ID_LIQUIDACION_CIA = ?");
            pst.setString(1, liquidacion.getReferencia());
            pst.setDate(2, liquidacion.getFecha_pago());
            pst.setInt(3, liquidacion.getEstado());
            pst.setLong(4, liquidacion.getId_liquidacion_cia());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Insertar Direccion IP a Usuario By Jefrey
    public void AdicionarDireccionIP(long id_usuario, String direccion_ip) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into usuarios_ip (fk_usuario,ip,fecha_ini)values(?,?,to_date(to_char(sysdate,'DD/MM/yyyy')))");
            pst.setLong(1, id_usuario);
            pst.setString(2, direccion_ip);

            pst.executeQuery();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    //Eliminar Direccion IP By Jefrey
    public void EliminarDireccionIP(long id_ipusuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update usuarios_ip set fecha_fin = to_date(to_char(sysdate,'DD/MM/yyyy')) where id_usuario_ip = ?");
            pst.setLong(1, id_ipusuario);

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

//Actualizar Direcciones IP BY Jefrey
    public void ActualizarDireccionIP(String direccion_ip, long id_ipusuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update usuarios_ip set ip= ? where  id_usuario_ip = ?");
            pst.setString(1, direccion_ip);
            pst.setLong(2, id_ipusuario);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Consultar IP por usuarios By JEfrey
    public java.util.List<UsuariosIP> consultarIPporUsuario(long id_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<UsuariosIP> lista = new java.util.LinkedList<UsuariosIP>();
        try {
            pst = con.prepareStatement("SELECT * FROM USUARIOS_IP WHERE FK_USUARIO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, id_usuario);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    lista.add(UsuariosIP.load(rst));
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List<String> consultarUsuariosIP(long fk_usuario) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<String> listaIP = new java.util.LinkedList<String>();

        try {
            pst = con.prepareStatement("SELECT IP FROM USUARIOS_IP WHERE FK_USUARIO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, fk_usuario);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaIP.add(rst.getString(1));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return listaIP;

    }

    public java.util.List consultarNotasCredito(java.sql.Timestamp fecha_ini, java.sql.Timestamp fecha_fin) throws Exception {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaNotas = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM NOTAS_CREDITO WHERE FECHA_PROCESO BETWEEN ? AND ? ORDER BY 1");
            pst.setTimestamp(1, fecha_ini);
            pst.setTimestamp(2, fecha_fin);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaNotas.add(Nota_Credito.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaNotas;
    }

    public String consultarTramiteTipificacionRUNT(long id_tramite, int clase_vehiculo) throws java.sql.SQLException {
        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT P.TARIFA FROM RUNT_TIPIFICACION P WHERE P.FK_TRAMITE = ? AND P.CLASE_VEHICULO = ?");
            pst.setLong(1, id_tramite);
            pst.setInt(2, clase_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Biometrico consultarBiometricoGeneral(long id_persona) throws Exception {
        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;
        Biometrico biometrico = null;
        try {
            pst = con.prepareStatement("SELECT DEDO1,DEDO2,MOTIVO_RECHAZO FROM PERSONAS WHERE ID_PERSONA = ?");
            pst.setLong(1, id_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                biometrico.setBidimensional(consultarBiometricoTipoByte(id_persona, "BIDIMENSIONAL"));
                biometrico.setFirma(consultarBiometricoTipoByte(id_persona, "FIRMA"));
                biometrico.setFoto(consultarBiometricoTipoByte(id_persona, "FOTO"));
                biometrico.setDedo1(rst.getInt(1));
                biometrico.setDedo2(rst.getInt(2));
                biometrico.setHuella1(consultarBiometricoTipoByte(id_persona, "HUELLA1"));
                biometrico.setHuella2(consultarBiometricoTipoByte(id_persona, "HUELLA2"));
                biometrico.setTemplate(consultarBiometricoTipoByte(id_persona, "TEMPLATE"));
                biometrico.setMotivoRechazo(rst.getInt(3));
                return biometrico;
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void adicionarDigitalVehiculo(DigitalCarpeta digitalCarpeta) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO DIGITAL_CARPETAS(FK_VEHICULO,NOMBRE,DIRECCION,OBSERVACION,FECHA_INGRESO,FECHA_MODIFICACION) VALUES(?,?,?,?,?,?)");
            pst.setLong(1, digitalCarpeta.getFk_vehiculo());
            pst.setString(2, digitalCarpeta.getNombre());
            pst.setString(3, digitalCarpeta.getDireccion());
            pst.setString(4, digitalCarpeta.getObservacion());
            pst.setTimestamp(5, digitalCarpeta.getFecha_ingreso());
            pst.setTimestamp(6, digitalCarpeta.getFecha_modificacion());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List<DigitalCarpeta> consultarImagenesVehiculo(long fk_vehiculo) throws java.sql.SQLException {

        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;
        java.util.List<DigitalCarpeta> lista = new java.util.LinkedList<DigitalCarpeta>();
        try {
            pst = con.prepareStatement("SELECT * FROM DIGITAL_CARPETAS WHERE FK_VEHICULO = ?");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(DigitalCarpeta.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List<DigitalCarpeta> actualizarImagenesVehiculo(long fk_vehiculo) throws java.sql.SQLException {

        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;
        java.util.List<DigitalCarpeta> lista = new java.util.LinkedList<DigitalCarpeta>();
        try {
            pst = con.prepareStatement("SELECT PLACA FROM VEHICULOS WHERE ID_VEHICULO = ?");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                String placa = rst.getString(1);
                java.io.File f = new java.io.File("C:\\Civitrans\\transito\\build\\web\\paginas\\data\\digitalizacion\\carpetas\\" + placa);
                if (f.isDirectory()) {
                    java.io.File[] fs = f.listFiles();
                    for (int i = 0; i < fs.length; i++) {
                        System.out.println(fs[i].getParent() + "\\" + placa + "_" + i + ".jpg");
                        java.io.File fx = new java.io.File(fs[i].getParent() + "\\" + placa + "_" + i + ".jpg");
                        fs[i].renameTo(fx);
                        if (fs[i].getName().toLowerCase().indexOf(".jpg") != -1 || fs[i].getName().toLowerCase().indexOf(".jpeg") != -1) {
                            DigitalCarpeta digitalCarpeta = new DigitalCarpeta();
                            digitalCarpeta.setFk_vehiculo(fk_vehiculo);
                            digitalCarpeta.setNombre(fx.getName());
                            digitalCarpeta.setDireccion("../data/digitalizacion/carpetas/" + placa + "/" + fx.getName());
                            digitalCarpeta.setObservacion("");
                            digitalCarpeta.setFecha_ingreso(new java.sql.Timestamp(new java.util.Date().getTime()));
                            digitalCarpeta.setFecha_modificacion(digitalCarpeta.getFecha_ingreso());
                            adicionarDigitalVehiculo(digitalCarpeta);
                        }
                    }
                    lista = consultarImagenesVehiculo(fk_vehiculo);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public Direccion consultarDireccion(long fk_persona) throws java.sql.SQLException {

        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM DIRECCIONES WHERE FK_PERSONA = ? AND ESTADO = 1");
            pst.setLong(1, fk_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Direccion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List consultarUsuariosCaja(long id_caja) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM USUARIO_CAJAS WHERE FK_CAJA = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, id_caja);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    lista.add(UsuarioCaja.load(rst));
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.HashMap<String, Integer> consultarDescuentoCarteras(long idVehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.HashMap<String, Integer> mapa = new java.util.HashMap<String, Integer>();
        try {
            pst = con.prepareStatement("SELECT EXTEMPORANEIDAD,EXT_INI,EXT_FIN,EXT_POR,INTERESES,INT_INI,"
                    + "INT_FIN,INT_POR,COSTAS,COS_INI,COS_FIN,COS_POR FROM DESCUENTOS_CARTERAS "
                    + "WHERE VEHICULO = ? AND ESTADO = 1");
            pst.setLong(1, idVehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                ResultSetMetaData rsmd = rst.getMetaData();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    mapa.put(rsmd.getColumnName(i + 1), rst.getInt(i + 1));
                }
                return mapa;
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void editarRadicacionesEspecificaciones(long fk_formulario, int grupo, int parametro, String valor)
            throws SQLException {

        PreparedStatement pst = null;

        try {
            pst = con.prepareStatement("UPDATE RADICACION_DATOS_VEHICULO SET VALOR = ? WHERE FK_FORMULARIO = ? AND GRUPO = ? AND PARAMETRO = ?");
            pst.setString(1, valor);
            pst.setLong(2, fk_formulario);
            pst.setInt(3, grupo);
            pst.setInt(4, parametro);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List consultarTramitesAsociados(long fk_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT FECHA,NOMBRE_TRAMITE,REFERENCIA,OBSERVACION,ESTADO FROM TRAMITES_ASOCIADOS WHERE FK_VEHICULO = ?");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    HashMap map = new HashMap();
                    map.put("FECHA", rst.getDate(1));
                    map.put("TRAMITE", rst.getString(2));
                    map.put("REFERENCIA", rst.getString(3));
                    map.put("OBSERVACION", rst.getString(4));
                    map.put("ESTADO", rst.getString(5));
                    lista.add(map);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List listarInfraccionesByCodigo(String codigo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listainfraccion = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM INFRACCIONES WHERE FK_CODIGO_TRANSITO = ? OR NUMERO = ?");
            pst.setString(1, codigo);
            pst.setString(2, codigo);
            rst = pst.executeQuery();
            while (rst.next()) {
                listainfraccion.add(Infraccion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listainfraccion;
    }

    public void registrarResolucionCupo(Resolucion_Cupo resolucionC) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RESOLUCIONES_CUPOS (MT,CONSECUTIVO,RESOLUCION,FECHA,"
                    + "SOLICITANTE,ASEGURADORA,NUMERO_POLIZA,CLASE,MODELO,MOTOR,CHASIS,SERIE,FK_LINEA,SERVICIO,PBV,FK_USUARIO,"
                    + "FECHA_REGISTRO,OBSERVACION,PLACA,ESTADO,FECHA_UTILIZADO)VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setString(1, resolucionC.getMT());
            pst.setString(2, resolucionC.getCONSECUTIVO());
            pst.setString(3, resolucionC.getRESOLUCION());
            pst.setDate(4, resolucionC.getFECHA());
            pst.setLong(5, resolucionC.getSOLICITANTE());
            pst.setLong(6, resolucionC.getASEGURADORA());
            pst.setString(7, resolucionC.getNUMERO_POLIZA());
            pst.setString(8, resolucionC.getCLASE());
            pst.setLong(9, resolucionC.getMODELO());
            pst.setString(10, resolucionC.getMOTOR());
            pst.setString(11, resolucionC.getCHASIS());
            pst.setString(12, resolucionC.getSERIE());
            pst.setLong(13, resolucionC.getFK_LINEA());
            pst.setInt(14, resolucionC.getSERVICIO());
            pst.setLong(15, resolucionC.getPBV());
            pst.setLong(16, resolucionC.getFK_USUARIO());
            pst.setTimestamp(17, resolucionC.getFECHA_REGISTRO());
            pst.setString(18, resolucionC.getOBSERVACION());
            pst.setString(19, resolucionC.getPLACA());
            pst.setInt(20, resolucionC.getESTADO());
            pst.setDate(21, resolucionC.getFECHA_UTILIZADO());

            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public void adicionarResolucionComparendo(Resolucion_Comparendo resolucionComparendo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RESOLUCIONES_COMPARENDOS (NUMERO,FECHA,TIPO,VALOR,ESTADO,FK_USUARIO,FECHA_PROCESO,OBSERVACION,FK_COMPARENDO) "
                    + "VALUES(?,?,?,?,?,?,?,?,?)");
            pst.setString(1, resolucionComparendo.getNumero());
            pst.setDate(2, resolucionComparendo.getFecha());
            pst.setInt(3, resolucionComparendo.getTipo());
            pst.setFloat(4, resolucionComparendo.getValor());
            pst.setInt(5, resolucionComparendo.getEstado());
            pst.setLong(6, resolucionComparendo.getFk_usuario());
            pst.setTimestamp(7, resolucionComparendo.getFecha_proceso());
            pst.setString(8, resolucionComparendo.getObservacion());
            pst.setLong(9, resolucionComparendo.getFk_comparendo());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public Resolucion_Comparendo consultarResolucionComparendo(long fk_comparendo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM RESOLUCIONES_COMPARENDOS WHERE FK_COMPARENDO = ? AND ESTADO = 1");
            pst.setLong(1, fk_comparendo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Resolucion_Comparendo.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void actualizarResolucionComparendo(long idResolucion, int estado)
            throws SQLException {

        PreparedStatement pst = null;

        try {
            pst = con.prepareStatement("UPDATE RESOLUCIONES_COMPARENDOS SET ESTADO = ? WHERE ID_RESOLUCION = ?");
            pst.setInt(1, estado);
            pst.setLong(2, idResolucion);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listarSimitRegistros(int plano, int estado) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM SIMIT_" + (plano == 1 ? "COMPARENDOS" : plano == 2 ? "RECAUDOS" : "RESOLUCIONES") + " WHERE ESTADO = ?");
            pst.setInt(1, estado);
            rst = pst.executeQuery();
            while (rst.next()) {
                if (plano == 1) {
                    lista.add(SimitComparendo.load(rst));
                } else if (plano == 2) {
                    lista.add(SimitRecaudo.load(rst));
                } else {
                    lista.add(SimitResolucion.load(rst));
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public int verParametroConfiguracion(int codigo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT VALOR FROM PARAMETROS_CONFIGURACION WHERE ID_PARAMETRO_CONFIG = ?");
            pst.setInt(1, codigo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getInt(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    public void actualizarParametroConfiguracion(int codigo, int valor) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE PARAMETROS_CONFIGURACION SET VALOR = ? WHERE ID_PARAMETRO_CONFIG = ?");
            pst.setInt(1, valor);
            pst.setInt(2, codigo);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public String existeVehiculoRUNT(long idVehiculo, String placa) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT REGISTRADO,FECHA_CONSULTA FROM RUNT_VEHICULOS WHERE FK_VEHICULO = ?");
            pst.setLong(1, idVehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                int registrado = rst.getInt(1);
                java.sql.Timestamp fecha = rst.getTimestamp(2);
                if (registrado == 1) {
                    return "Vehiculo SI se encuentra inscrito en el RUNT, ultima consulta " + new java.text.SimpleDateFormat("dd/MM/yy hh:mm:ss").format(fecha);
                } else if (registrado == 0) {
                    return "Vehiculo NO se encuentra inscrito en el RUNT, ultima consulta " + new java.text.SimpleDateFormat("dd/MM/yy hh:mm:ss").format(fecha);
                } else {
                    webservices.consultas.ServicioConsultaRUNTClient consultaService = new webservices.consultas.ServicioConsultaRUNTClient();
                    consultaService.setTokenHuellaDigital(Model.userToken);
                    consultaService.setUser(Model.userHandler);
                    fecha = new java.sql.Timestamp(new java.util.Date().getTime());
                    int cont = 0;
                    while (cont < 3) {
                        com.heinsohn.runt.general.consultas.AutomotorOutDTO automotor = consultaService.consultarDatosAutomotor(placa, null, null, null, null, null, null);
                        if (automotor != null) {
                            if (automotor.getStatus() != null) {
                                if (automotor.getStatus().getStatusCode().equals("1")) {
                                    actualizarRuntVehiculo(idVehiculo, 1, fecha);
                                    con.commit();
                                    return "Vehiculo SI se encuentra inscrito en el RUNT, ultima consulta " + new java.text.SimpleDateFormat("dd/MM/yy hh:mm:ss").format(fecha);
                                } else if (automotor.getStatus().getStatusDesc().indexOf("limite de consultas") != -1) {
                                    actualizarRuntVehiculo(idVehiculo, 1, fecha);
                                    con.commit();
                                    return "Vehiculo SI se encuentra inscrito en el RUNT, ultima consulta " + new java.text.SimpleDateFormat("dd/MM/yy hh:mm:ss").format(fecha);
                                } else {
                                    actualizarRuntVehiculo(idVehiculo, 0, fecha);
                                    con.commit();
                                    return "Vehiculo NO se encuentra inscrito en el RUNT, ultima consulta " + new java.text.SimpleDateFormat("dd/MM/yy hh:mm:ss").format(fecha);
                                }
                            } else {
                                cont++;
                            }
                        } else {
                            cont++;
                        }
                    }
                }
            } else {
                adicionarRuntVehiculo(idVehiculo, 2, new java.sql.Timestamp(new java.util.Date().getTime()));
                con.commit();
                return "";
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return "";
    }

    public void actualizarRuntVehiculo(long idVehiculo, int registrado, java.sql.Timestamp fecha) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RUNT_VEHICULOS SET REGISTRADO = ?,FECHA_CONSULTA = ? WHERE FK_VEHICULO = ?");
            pst.setInt(1, registrado);
            pst.setTimestamp(2, fecha);
            pst.setLong(3, idVehiculo);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarRuntVehiculo(long idVehiculo, int registrado, java.sql.Timestamp fecha) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RUNT_VEHICULOS (FK_VEHICULO,REGISTRADO,FECHA_CONSULTA) VALUES(?,?,?)");
            pst.setLong(1, idVehiculo);
            pst.setInt(2, registrado);
            pst.setTimestamp(3, fecha);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public void actualizarSaldosAFavorxReferencia(int tipo, String referencia) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;

        try {
            prst = con.prepareStatement("UPDATE SALDOS_FAVOR SET ESTADO = 4 WHERE TIPO = ? AND REFERENCIA = ?"); // orden
            prst.setInt(1, tipo);
            prst.setString(2, referencia);
            prst.executeUpdate();
        } finally {
            if (prst != null) {
                prst.close();
            }
        }

    }

    public void refrescarPlacasPlano() throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;

        try {
            prst = con.prepareStatement("DELETE FROM PLACAS_PLANO"); // orden
            prst.executeUpdate();
        } finally {
            if (prst != null) {
                prst.close();
            }
        }

    }

    public void adicionarPlacaPlano(String placa, String sirev) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO PLACAS_PLANO (PLACA,SIREV) VALUES(?,?)");
            pst.setString(1, placa);
            pst.setString(2, sirev);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
        }
    }

    public void actualizarDetalleFinanciacion(long fkCartera, int estado) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;

        try {
            prst = con.prepareStatement("UPDATE DETALLES_FINANCIACIONES SET ESTADO = ? WHERE FK_CARTERA = ?"); // orden
            prst.setInt(1, estado);
            prst.setLong(2, fkCartera);
            prst.executeUpdate();
        } finally {
            if (prst != null) {
                prst.close();
            }
        }

    }

    public boolean consultarCuotasCanceladas(long fkCartera) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT COUNT(*) FROM DETALLES_FINANCIACIONES WHERE ESTADO = 1 AND FK_FINANCIACION = (SELECT FK_FINANCIACION FROM DETALLES_FINANCIACIONES WHERE FK_CARTERA = ?)");
            pst.setLong(1, fkCartera);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getInt(1) == 0;
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return false;
    }

    public void actualizarFinanciacion(long fkCartera, int estado) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;

        try {
            prst = con.prepareStatement("UPDATE FINANCIACIONES SET ESTADO = ? WHERE ID_FINANCIACION = (SELECT FK_FINANCIACION FROM DETALLES_FINANCIACIONES WHERE FK_CARTERA = ?)"); // orden
            prst.setInt(1, estado);
            prst.setLong(2, fkCartera);
            prst.executeUpdate();
        } finally {
            if (prst != null) {
                prst.close();
            }
        }

    }

    public void actualizarComparendoFinanciacion(long fkCartera, int estado) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;

        try {
            prst = con.prepareStatement("UPDATE COMPARENDOS SET ESTADO = ? WHERE FK_CARTERA IN (SELECT FK_CARTERA FROM FINANCIACION_CARTERA WHERE FK_FINANCIACION = (SELECT FK_FINANCIACION FROM DETALLES_FINANCIACIONES WHERE FK_CARTERA = ?))"); // orden
            prst.setInt(1, estado);
            prst.setLong(2, fkCartera);
            prst.executeUpdate();
        } finally {
            if (prst != null) {
                prst.close();
            }
        }

    }

    public Object[] consultarPagoComparendos() throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        Object[] obs = new Object[2];
        java.util.List<Tiquete> tiquetes = new java.util.LinkedList<Tiquete>();
        java.util.List<Cartera> carteras = new java.util.LinkedList<Cartera>();
        PreparedStatement prst = null;
        ResultSet rs = null;

        try {
            prst = con.prepareStatement("SELECT T.ID_TIQUETE,C.ID_CARTERA FROM TIQUETES T,DETALLE_TIQUETES DT,CARTERAS C"
                    + " WHERE T.ID_TIQUETE = DT.FK_TIQUETE"
                    + " AND DT.FK_CARTERA = C.ID_CARTERA"
                    + " AND C.TIPO = 1"
                    + " AND C.ESTADO_CARTERA = 2 AND T.ESTADO = 3");
            rs = prst.executeQuery();
            while (rs.next()) {
                tiquetes.add(consultarTiquetePorID(rs.getLong(1)));
                carteras.add(consultarCartera(rs.getLong(2)));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (prst != null) {
                prst.close();
            }
        }
        obs[0] = tiquetes;
        obs[1] = carteras;
        return obs;
    }

    public java.util.List<SimitComparendo> consultarComparendosSimit(int estado) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<SimitComparendo> lista = new java.util.LinkedList<SimitComparendo>();
        try {
            pst = con.prepareStatement("SELECT * FROM SIMIT_COMPARENDOS WHERE ESTADO = ?");
            pst.setInt(1, estado);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(SimitComparendo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public void actualizarSimitComparendo(long idSimitComparendo, int estado, long fkSimitPlano, int consecutivo, java.sql.Date fechaReporte) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;

        try {
            prst = con.prepareStatement("UPDATE SIMIT_COMPARENDOS SET ESTADO = ?,FK_SIMIT_PLANO = ?,COMCONSECUTIVO = ?,FECHA_REPORTE = ? WHERE ID_SIMIT_COMPARENDO = ?");
            prst.setInt(1, estado);
            prst.setLong(2, fkSimitPlano);
            prst.setString(3, consecutivo + "");
            prst.setDate(4, fechaReporte);
            prst.setLong(5, idSimitComparendo);
            prst.executeUpdate();
        } finally {
            if (prst != null) {
                prst.close();
            }
        }

    }

    public java.util.List<SimitRecaudo> consultarRecaudosSimit(int estado) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<SimitRecaudo> lista = new java.util.LinkedList<SimitRecaudo>();
        try {
            pst = con.prepareStatement("SELECT * FROM SIMIT_RECAUDOS WHERE ESTADO = ?");
            pst.setInt(1, estado);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(SimitRecaudo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public void actualizarSimitRecaudo(long idSimitRecaudo, int estado, long fkSimitPlano, int consecutivo, java.sql.Date fechaReporte) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;

        try {
            prst = con.prepareStatement("UPDATE SIMIT_RECAUDOS SET ESTADO = ?,FK_SIMIT_PLANO = ?,RECCONSECUTIVO = ?,FECHA_REPORTE = ? WHERE ID_SIMIT_RECAUDO = ?");
            prst.setInt(1, estado);
            prst.setLong(2, fkSimitPlano);
            prst.setString(3, consecutivo + "");
            prst.setDate(4, fechaReporte);
            prst.setLong(5, idSimitRecaudo);
            prst.executeUpdate();
        } finally {
            if (prst != null) {
                prst.close();
            }
        }

    }

    public java.util.List<SimitResolucion> consultarResolucionesSimit(int estado) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<SimitResolucion> lista = new java.util.LinkedList<SimitResolucion>();
        try {
            pst = con.prepareStatement("SELECT * FROM SIMIT_RESOLUCIONES WHERE ESTADO = ?");
            pst.setInt(1, estado);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(SimitResolucion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    //Creado by Jefrey Padilla
    public void actualizarEstadoSimitComparendo(long idSimitComparendo, long estado, long fk_simitplano) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;

        try {
            prst = con.prepareStatement("UPDATE SIMIT_COMPARENDOS S SET S.ESTADO = ?, S.FK_SIMIT_PLANO = ? WHERE S.ID_SIMIT_COMPARENDO = ?");
            prst.setLong(1, estado);
            prst.setLong(2, fk_simitplano);
            prst.setLong(3, idSimitComparendo);
            prst.executeUpdate();
        } finally {
            if (prst != null) {
                prst.close();
            }
        }

    }

    public void actualizarSimitResolucion(long idSimitResolucion, int estado, long fkSimitPlano, int consecutivo, java.sql.Date fechaReporte) throws Exception {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;

        try {
            prst = con.prepareStatement("UPDATE SIMIT_RESOLUCIONES SET ESTADO = ?,FK_SIMIT_PLANO = ?,RESCONSECUTIVO = ?,FECHA_REPORTE = ? WHERE ID_SIMIT_RESOLUCION = ?");
            prst.setInt(1, estado);
            prst.setLong(2, fkSimitPlano);
            prst.setString(3, consecutivo + "");
            prst.setDate(4, fechaReporte);
            prst.setLong(5, idSimitResolucion);
            prst.executeUpdate();
        } finally {
            if (prst != null) {
                prst.close();
            }
        }

    }

    public java.util.List<Horario_Curso> consultarHorariosCursos(java.sql.Date inicio, java.sql.Date fin) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Horario_Curso> lista = new java.util.LinkedList<Horario_Curso>();
        try {
            pst = con.prepareStatement("SELECT * FROM HORARIOS_CURSOS WHERE TO_DATE(TO_CHAR(FECHA,'dd/MM/yyyy'),'dd/MM/yyyy') BETWEEN ? AND ?");
            pst.setDate(1, inicio);
            pst.setDate(2, fin);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Horario_Curso.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List<Citacion_Comparendo> consultarCitacionesComparendos(long fkHorarioCurso) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Citacion_Comparendo> lista = new java.util.LinkedList<Citacion_Comparendo>();
        try {
            pst = con.prepareStatement("SELECT * FROM CITACIONES_COMPARENDOS WHERE FK_HORARIO_CURSO = ?");
            pst.setLong(1, fkHorarioCurso);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Citacion_Comparendo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public long adicionarHorarioCurso(Horario_Curso horarioCurso) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {

            pst = con.prepareStatement("INSERT INTO HORARIOS_CURSOS(FECHA,CUPO,ESTADO) VALUES(?,?,?)", new String[]{"ID_HORARIO_CURSO"});
            pst.setTimestamp(1, horarioCurso.getFecha());
            pst.setInt(2, horarioCurso.getCupos());
            pst.setInt(3, horarioCurso.getEstado());
            pst.execute();
            rst = pst.getGeneratedKeys();
            if (rst.next()) {
                return rst.getLong(1);
            }

        } finally {
            if (rst != null) {
                rst.close();
                rst = null;

            }
            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
        return 0;
    }

    public Horario_Curso consultarHorarioCurso(long idHorario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM HORARIOS_CURSOS WHERE ID_HORARIO_CURSO = ?");
            pst.setLong(1, idHorario);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Horario_Curso.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Patio consultarPatio(String patio) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Patio pat = null;

        try {
            pst = con.prepareStatement("select * from patios where nombre = ? and fecha_fin is null");
            pst.setString(1, patio);

            rst = pst.executeQuery();
            if (rst.next()) {
                pat = Patio.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return pat;

    }

    public long adicionarPatio(Patio patio) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("insert into patios (fk_sede,direccion,telefono,tipo,fecha_ini,fecha_fin,nombre) values(?,?,?,?,?,?,?)", new String[]{"ID_PATIO"});
            pst.setLong(1, patio.getFk_sede());
            pst.setString(2, patio.getDireccion());
            pst.setString(3, patio.getTelefono());
            pst.setInt(4, patio.getTipo());
            pst.setDate(5, patio.getFecha_ini());
            pst.setDate(6, patio.getFecha_fin());
            pst.setString(7, patio.getNombre());
            pst.execute();
            rst = pst.getGeneratedKeys();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    public void adicionarComparendos_Patios(COMPARENDO_PATIO comp_patio) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into comparendos_patios (fk_comparendo,fk_patio,fecha_ingreso,fk_persona,numero_salida,fecha_salida,"
                    + "recibo,fecha_recibo,tipo,estado,consecutivo_inmo,numero_grua,placa_grua) values(?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setLong(1, comp_patio.getFK_COMPARENDO());
            pst.setLong(2, comp_patio.getFK_PATIO());
            pst.setDate(3, comp_patio.getFECHA_INGRESO());
            pst.setLong(4, comp_patio.getFK_PERSONA());
            pst.setString(5, comp_patio.getNUMERO_SALIDA());
            pst.setDate(6, comp_patio.getFECHA_SALIDA());
            pst.setString(7, comp_patio.getRECIBO());
            pst.setDate(8, comp_patio.getFECHA_RECIBO());
            pst.setInt(9, comp_patio.getTIPO());
            pst.setInt(10, comp_patio.getESTADO());
            pst.setLong(11, comp_patio.getCONSECUTIVO_INMO());
            pst.setString(12, comp_patio.getNUMERO_GRUA());
            pst.setString(13, comp_patio.getPLACA_GRUA());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarCitacionComparendo(Citacion_Comparendo citacionComparendo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO CITACIONES_COMPARENDOS (NUMERO,FECHA,FK_PERSONA,"
                    + "FK_COMPARENDO,FK_LIQUIDACION_CIA,ESTADO,FK_USUARIO,FECHA_PROCESO,FK_HORARIO_CURSO) "
                    + "VALUES(?,?,?,?,?,?,?,?,?)");
            pst.setInt(1, citacionComparendo.getNumero());
            pst.setTimestamp(2, citacionComparendo.getFechaCitacion());
            pst.setLong(3, citacionComparendo.getFkPersona());
            pst.setLong(4, citacionComparendo.getFkComparendo());
            pst.setLong(5, citacionComparendo.getFkLiquidacionCia());
            pst.setInt(6, citacionComparendo.getEstado());
            pst.setLong(7, citacionComparendo.getFkUsuario());
            pst.setTimestamp(8, citacionComparendo.getFechaProceso());
            pst.setLong(9, citacionComparendo.getFkHorarioCurso());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Tipo_Financiacion consultarTipoDeFinanciacionByTotal(float total) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM TIPO_FINANCIACION WHERE SALDO_DESDE <= ? AND SALDO_HASTA >= ?");
            pst.setFloat(1, total);
            pst.setFloat(2, total);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Tipo_Financiacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return null;

    }

    public java.util.List<Financiacion_Cartera> consultarCarterasFinanciadas(long fkFinanciacion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Financiacion_Cartera> lista = new java.util.LinkedList<Financiacion_Cartera>();
        try {
            pst = con.prepareStatement("SELECT * FROM FINANCIACION_CARTERA WHERE FK_FINANCIACION = ?");
            pst.setLong(1, fkFinanciacion);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Financiacion_Cartera.Load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public Financiacion consultarFinanciacion(String numero) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM FINANCIACIONES WHERE NUMERO = ?");
            pst.setString(1, numero);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Financiacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }

    public Taquilla consultarTaquillaByFecha(long fk_caja, long fk_sede, long fk_usuario, java.sql.Date fecha) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select * from taquillas where fk_caja = ? and  fk_sede =? and fk_usuario = ?"
                    + " and TO_DATE(TO_CHAR(FECHA_INI,'dd/MM/yyyy'),'dd/MM/yyyy') = ?");
            pst.setLong(1, fk_caja);
            pst.setLong(2, fk_sede);
            pst.setLong(3, fk_usuario);
            pst.setDate(4, fecha);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Taquilla.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void actualizarComparendoPatio(COMPARENDO_PATIO comparendoP) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("UPDATE COMPARENDOS_PATIOS set NUMERO_SALIDA = ?,FECHA_SALIDA = ?,ESTADO = ?,PLACA = ?,CLASE = ?,SERVICIO = ?,"
                    + "MARCA = ?,LINEA = ?,MOTOR = ?,CHASIS = ?,MODELO = ?,COLOR = ?,OBSERVACION = ?,FK_USUARIO = ?, CED_AUTORIZADO = ?,NOMBRE_AUTORIZADO = ?,"
                    + "CED_PROPIETARIO = ?, NOMBRE_PROPIETARIO = ? where FK_COMPARENDO = ?");
            pst.setString(1, comparendoP.getNUMERO_SALIDA());
            pst.setDate(2, comparendoP.getFECHA_SALIDA());
            pst.setInt(3, comparendoP.getESTADO());
            pst.setString(4, comparendoP.getPLACA());
            pst.setString(5, comparendoP.getCLASE());
            pst.setString(6, comparendoP.getSERVICIO());
            pst.setString(7, comparendoP.getMARCA());
            pst.setString(8, comparendoP.getLINEA());
            pst.setString(9, comparendoP.getMOTOR());
            pst.setString(10, comparendoP.getCHASIS());
            pst.setString(11, comparendoP.getMODELO());
            pst.setString(12, comparendoP.getCOLOR());
            pst.setString(13, comparendoP.getOBSERVACION());
            pst.setLong(14, comparendoP.getFK_USUARIO());
            pst.setString(15, comparendoP.getCED_AUTORIZADO());
            pst.setString(16, comparendoP.getNOMBRE_AUTORIZADO());
            pst.setString(17, comparendoP.getCED_PROPIETARIO());
            pst.setString(18, comparendoP.getNOMBRE_PROPIETARIO());
            pst.setLong(19, comparendoP.getFK_COMPARENDO());
            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido modificar el grupo ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

    }

    public COMPARENDO_PATIO consultarComparendoPatioByNumeroSalida(String numero) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select * from comparendos_patios where numero_salida = ?"); // orden
            pst.setString(1, numero);
            // sql
            rst = pst.executeQuery();
            if (rst.next()) {
                return COMPARENDO_PATIO.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Patio consultarPatioById(long id_patio) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select * from patios where id_patio = ?"); // orden
            pst.setLong(1, id_patio);
            // sql
            rst = pst.executeQuery();
            if (rst.next()) {
                return Patio.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List listarDetalleCarteraAtributo(long fk_cartera, long fk_sede, int atributo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listDetalleCartera = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT DC.* FROM DETALLE_CARTERAS DC,CONCEPTOS C,ATRIBUTO_CONCEPTOS A WHERE DC.FK_CARTERA = ? AND DC.FK_CONCEPTO = C.ID_CONCEPTO AND DC.ESTADO = 1  AND A.FK_SEDE = ? AND A.FK_CONCEPTO = DC.FK_CONCEPTO AND A.TIPO_ATRIBUTO = ? AND A.VALOR = 1 ORDER BY C.PRIORIDAD DESC");
            pst.setLong(1, fk_cartera);
            pst.setLong(2, fk_sede);
            pst.setInt(3, atributo);
            rst = pst.executeQuery();
            while (rst.next()) {
                listDetalleCartera.add(Detalle_Cartera.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listDetalleCartera;
    }

    public java.util.List listarDatosVehiculoByTipo(long fk_vehiculo, int grupo, int parametro) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM DATOS_VEHICULOS WHERE FK_VEHICULO =  ? AND SUB_GRUPO_CODIGO = ? AND PARAM_CODIGO = ? AND FECHA_FIN IS NOT NULL ORDER BY FECHA_FIN DESC"); // orden
            pst.setLong(1, fk_vehiculo);
            pst.setInt(2, grupo);
            pst.setInt(3, parametro);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(DatosVehiculo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List listarDetalleAuditoria(long fk_vehiculo, String tabla, String columna) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT AD.VALOR_ANTERIOR FROM AUDITORIA A,AUDITORIA_DETALLE AD WHERE A.ID_AUDITORIA = AD.FK_AUDITORIA AND A.VEHICULO = ? AND A.TABLA = ? AND AD.COLUMNA = ? ORDER BY A.FECHA"); // orden
            pst.setLong(1, fk_vehiculo);
            pst.setString(2, tabla);
            pst.setString(3, columna);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Auditoria_Detalle.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public Marca consultaMarcaCodigo(long codigo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM MARCAS WHERE CODIGO = ?"); // orden
            pst.setLong(1, codigo);
            // sql
            rst = pst.executeQuery();
            if (rst.next()) {
                return Marca.load(rst);
            }

        } catch (Exception e) {
            System.out.println("Error al consultar la marca " + e);

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;

    }

    public java.util.List<Agente> consultarListadoAgentes(int placa, String nombre) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Agente> agente = new java.util.LinkedList<Agente>();
        try {
            pst = con.prepareStatement("SELECT * FROM AGENTES  WHERE (NOMBRE LIKE ? OR ? = '0') AND (PLACA = ? OR ? = '0')");
            pst.setString(1, "%" + nombre + "%");
            pst.setString(2, nombre);
            pst.setInt(3, placa);
            pst.setInt(4, placa);
            rst = pst.executeQuery();
            while (rst.next()) {
                agente.add(Agente.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return agente;

    }

    public Detalle_Tiquete consultarDetalleTiqueteEstado(long fk_tiquete, int estado) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Detalle_Tiquete detalleT = null;
        try {
            pst = con.prepareStatement("SELECT * FROM DETALLE_TIQUETES WHERE FK_TIQUETE = ? AND ESTADO = ? AND FK_TRAMITE IS NOT NULL");
            pst.setLong(1, fk_tiquete);
            pst.setInt(2, estado);
            rst = pst.executeQuery();
            if (rst.next()) {
                detalleT = Detalle_Tiquete.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return detalleT;
    }

    public Detalle_Tiquete consultarDetalleTiqueteCartera(long fk_tiquete) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Detalle_Tiquete detalleT = null;
        try {
            pst = con.prepareStatement("SELECT * FROM DETALLE_TIQUETES WHERE FK_TIQUETE = ? AND FK_CARTERA IS NOT NULL");
            pst.setLong(1, fk_tiquete);
            rst = pst.executeQuery();
            if (rst.next()) {
                detalleT = Detalle_Tiquete.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return detalleT;
    }

    public void adicionarRelamoPago(Reclamos_Pagos reclamo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RECLAMOS_PAGOS(FK_PERSONA,FK_TRAMITE,FK_PAGO,FK_USUARIO,"
                    + "NUMERO,PLACA,OBSERVACION,FECHA,TIPO,ESTADO,FECHA_PROCESO)"
                    + " VALUES(?,?,?,?,?,?,?,?,?,?,?)");
            pst.setLong(1, reclamo.getFK_PERSONA());
            pst.setLong(2, reclamo.getFK_TRAMITE());
            pst.setLong(3, reclamo.getFK_PAGO());
            pst.setLong(4, reclamo.getFK_USUARIO());
            pst.setString(5, reclamo.getNUMERO());
            pst.setString(6, reclamo.getPLACA());
            pst.setString(7, reclamo.getOBSERVACION());
            pst.setDate(8, reclamo.getFECHA());
            pst.setInt(9, reclamo.getTIPO());
            pst.setInt(10, reclamo.getESTADO());
            pst.setTimestamp(11, reclamo.getFECHA_PROCESO());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void eliminarHuella(long fk_persona) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("DELETE FROM TOKENS WHERE FK_PERSONA = ?");
            pst.setLong(1, fk_persona);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List<planosconta> planoContabilidad(String fechai, String fechaf) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXIONNNNN");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<planosconta> lista = new java.util.LinkedList<planosconta>();

        try {
            pst = con.prepareStatement("SELECT TO_CHAR(P.FECHA,'MM/dd/yyyy')||'|'||D.FK_CONCEPTO_DISTRIBUCION||'|'||SUM(D.VALOR)||'.00' as VALOR FROM PAGOS P,DISTRIBUCION D,TAQUILLAS T WHERE D.FK_PAGO = P.ID_PAGO  AND P.FECHA BETWEEN ? AND ? AND P.FK_TAQUILLA = T.ID_TAQUILLA  AND T.ESTADO = 5  AND P.FK_USUARIO !=1 GROUP BY P.NUMERO_FACTURA, P.FECHA, P.ID_PAGO,D.FK_CONCEPTO_DISTRIBUCION ORDER BY P.NUMERO_FACTURA, P.FECHA, P.ID_PAGO, D.FK_CONCEPTO_DISTRIBUCION");
            pst.setString(1, fechai);
            pst.setString(2, fechaf);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(planosconta.load(rst));
            }
        } catch (Exception e) {
            System.out.println("Error al consultar del archivo plano: " + e);

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    /*Metodo Modificado 
    Nombre del Metodo: generarfacturadomiciliaria
    Fecha Modificacion: 22/03/2018
    Por: Ing. Alexis Cadrasco Garcia
    */
    public java.util.List<FacturaDomiciliaria> generarfacturadomiciliaria(int ano, String periodo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<FacturaDomiciliaria> fact = new java.util.LinkedList<FacturaDomiciliaria>();
        Calendar cal = Calendar.getInstance(); 
        int yearServer =cal.get(Calendar.YEAR);
        try {
            pst = con.prepareStatement("Select \n"
                    + "FACTURA	\n"
                    + ",ORGANISMO\n"
                    + ",PLACA\n"
                    + ",NOMBRE_PROPIETARIO\n"
                    + ",DIRECCION\n"
                    + ",TELEFONO\n"
                    + ",CELULAR	\n"
                    + ",max(MOTOR) as MOTOR\n"
                    + ",max(CASIS) as CASIS\n"
                    + ",max(SERIE) as SERIE\n"
                    + ",LINEA\n"
                    + ",MARCA\n"
                    + ",CLASE\n"
                    + ",SERVICIO\n"
                    + ",MODELO\n"
                    + ",FECHA_EXPEDICION\n"
                    + ",max(SALDO_ACTUAL) as SALDO_ACTUAL\n"
                    + ",FECHA_LIM_PERIODO_PAGO\n"
                    + ",(Sum(OBLIGACIONES_VENCIDAS)/3) as OBLIGACIONES_VENCIDAS\n"
                    + ",COMPARENDOS	\n"
                    + ",SALDOS_A_FAVOR\n"
                    + ",SALDOS_EN_CONTRA	\n"
                    + ",max(SALDO_ACTUAL) as TOTAL_A_CANCELAR	\n"
                    + ",CIUDAD_ENVIO\n"
                    + ",PERIODO_DE_PAGO\n"
                    + "from(\n"
                    + "Select \n"
                    + "'11'||SubStr('000000',1,6-Length(Ve.Id_Vehiculo))||Ve.Id_Vehiculo Factura,\n"
                    + "'TRANSITO DE SABANAGRANDE' ORGANISMO,\n"
                    + "Ve.placa,\n"
                    + "Nvl(Trim(Pe.Nombre_1)||' '||Trim(Nvl(Pe.Nombre_2,''))||' '||Trim(Pe.Apellido_1)||' '||Trim(Nvl(Pe.Apellido_2,'')),'No Encontrado') as \"NOMBRE_PROPIETARIO\",\n"
                    + "Nvl(Trim(Di.Descripcion),'N/A') DIRECCION,\n"
                    + "Nvl(Trim(Di.Telefono),'N/A') TELEFONO,\n"
                    + "Nvl(Trim(Pe.Celular),'N/A') CELULAR,\n"
                    + "case\n"
                    + "when (Dav.Grupo_Codigo=2 and Dav.Param_Codigo=19) then Dav.Valor\n"
                    + "Else null\n"
                    + "end MOTOR,\n"
                    + "case\n"
                    + "when (Dav.Grupo_Codigo=2 and Dav.Param_Codigo=20) then Dav.Valor\n"
                    + "Else null\n"
                    + "end CASIS,\n"
                    + "case\n"
                    + "when (Dav.Grupo_Codigo=2 and Dav.Param_Codigo=21) then Dav.Valor\n"
                    + "Else null\n"
                    + "end serie,\n"
                    + "ln.nombre as LINEA,\n"
                    + "Ma.Nombre as Marca,\n"
                    + "cl.nombre as CLASE,\n"
                    + "case ve.servicio\n"
                    + "when 1 then 'PARTICULAR'\n"
                    + "when 2 then 'PUBLICO'\n"
                    + "when 4 then 'OFICIAL'\n"
                    + "ELSE 'OTROS'\n"
                    + "end servicio,\n"
                    + "Ve.Modelo,\n"
                    + "TO_CHAR(SYSDATE,'MM/DD/YYYY') FECHA_EXPEDICION,\n"
                    + "case ca.referencia\n"
                    + "when To_char('" + ano + "') then ca.saldo\n"
                    + "else 0 \n"
                    + "end SALDO_ACTUAL,\n"
                    + "  DECODE(Ca.PERIODO,1,'Abr 30/'\n"
                    + "  || To_char(('" + ano + "' - 1)),2,'Ago 31/'\n"
                    + "  || To_char(('" + ano + "' - 1)),3,'Dic 31/'\n"
                    + "  || To_char(('" + ano + "' - 1))) FECHA_LIM_PERIODO_PAGO,\n"
                    + " case \n"
                    + "when (ca.referencia Not In (To_char('" + ano + "'))) then ca.saldo\n"
                    + "else 0\n"
                    + "end OBLIGACIONES_VENCIDAS,\n"
                    + "  0 COMPARENDOS,\n"
                    + "  0 SALDOS_A_FAVOR,\n"
                    + "  0 SALDOS_EN_CONTRA,\n"
                    + "  Ca.SALDO TOTAL_A_CANCELAR,\n"
                    + "  (SELECT I.NOMBRE_MUNICIPIO\n"
                    + "  FROM PROPIETARIOS P,\n"
                    + "    DIRECCIONES D,\n"
                    + "    DIVIPO I\n"
                    + "  WHERE\n"
                    + "  P.FK_VEHICULO = Ve.ID_VEHICULO\n"
                    + "  AND P.FK_PERSONA    = D.FK_PERSONA\n"
                    + "  AND D.FK_DIVIPO     = I.ID_DIVIPO\n"
                    + "  AND P.FECHA_FIN    IS NULL\n"
                    + "  AND ROWNUM          = 1\n"
                    + "  ) CIUDAD_ENVIO,\n"
                    + "  DECODE(Ca.Periodo,1,'ENERO-ABRIL',2,'MAYO-AGOSTO',3,'SEPTIEMBRE-DICIEMBRE') PERIODO_DE_PAGO \n"
                    + "From\n"
                    + "Vehiculos ve \n"
                    + "Inner join carteras ca on \n"
                    + "Ca.Fk_Vehiculo = Ve.Id_Vehiculo and  Ca.Estado_Cartera = 1 and Ca.Tipo=2 and (Ca.Periodo = To_char(" + periodo + ") or To_char(" + periodo + ") = '0') and ca.referencia="+yearServer+"\n"
                    + "Inner join Personas Pe on \n"
                    + "Pe.Id_Persona = (Select fk_persona from Propietarios pr where Ve.Id_Vehiculo = pr.Fk_Vehiculo and Pr.Fecha_Fin Is null and rownum = 1)\n"
                    + "Left join Direcciones Di on \n"
                    + "Di.Fk_Persona=Pe.Id_Persona\n"
                    + "Left join Datos_Vehiculos dav on \n"
                    + "Dav.Fk_Vehiculo = Ve.Id_Vehiculo and Dav.Fecha_Fin Is null and Dav.Param_Codigo in (19,20,21)\n"
                    + "Left join Lineas ln on \n"
                    + "Ln.Id_Linea = Ve.Fk_Linea\n"
                    + "left join Marcas ma on \n"
                    + "Ma.Codigo =Ln.Fk_Marca\n"
                    + "left join Parametros Cl on \n"
                    + "Cl.Fk_grupo = 1 AND Cl.Codigo = Ve.Clase_Vehiculo \n"
                    + "\n"
                    + "where ve.estado in (1,5,6) \n"
                    + "and Ve.Id_Vehiculo not in \n"
                    + "(select po.fk_vehiculo from Propietarios po where Po.Fk_Persona  in (146149) and Po.Fk_Vehiculo = Ve.Id_Vehiculo and Po.Fecha_Fin is null)\n"
                    + "and Ve.Id_Vehiculo not in (Select\n"
                    + "            fk_vehiculo\n"
                    + "        FROM\n"
                    + "            carteras\n"
                    + "        WHERE\n"
                    + "            tipo = 2\n"
                    + "        AND\n"
                    + "            estado_cartera = 1\n"
                    + "        AND\n"
                    + "            referencia != To_char(" + ano + ")\n"
                    + "        AND\n"
                    + "            fk_vehiculo IS NOT NULL\n"
                    + "    )\n"
                    + ")\n"
                    + "group by FACTURA, NOMBRE_PROPIETARIO, ORGANISMO, DIRECCION, PLACA, \n"
                    + "TELEFONO, CELULAR, LINEA, MARCA, CLASE, \n"
                    + "SERVICIO, MODELO, FECHA_EXPEDICION, FECHA_LIM_PERIODO_PAGO, COMPARENDOS, \n"
                    + "SALDOS_A_FAVOR, SALDOS_EN_CONTRA, CIUDAD_ENVIO, PERIODO_DE_PAGO\n"
                    + "Order By PLACA");
            rst = pst.executeQuery();
            while (rst.next()) {
                fact.add(FacturaDomiciliaria.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return fact;
    }

    public java.util.List<Prendatarios> ConsultarPrendatarios(String prendatario) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Prendatarios> prendatarios = new java.util.LinkedList<Prendatarios>();
        try {
            pst = con.prepareStatement("SELECT A.OBSERVACIONES FROM ALERTAS A WHERE A.OBSERVACIONES IS NOT NULL AND A.OBSERVACIONES LIKE '%" + prendatario + "%' GROUP BY A.OBSERVACIONES");
            rst = pst.executeQuery();
            while (rst.next()) {
                prendatarios.add(Prendatarios.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return prendatarios;
    }

    public java.util.List<Prendasporbeneficiario> reporteporprenda(String prenda) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Prendasporbeneficiario> prendatarios = new java.util.LinkedList<Prendasporbeneficiario>();
        try {
            pst = con.prepareStatement("SELECT V.PLACA, P.NOMBRE ESTADO_VEHICULO,NVL(DECODE(A.FECHA_FIN,'','ACTIVA'),'LEVANTADA') ESTADO_ALERTA,A.FECHA_INI FECHA_PRENDA, A.FECHA_FIN FECHA_LEVANT, A.OBSERVACIONES FROM VEHICULOS V, ALERTAS A, PARAMETROS P WHERE V.ID_VEHICULO = A.FK_VEHICULO AND V.ESTADO = P.CODIGO AND P.FK_GRUPO = 66 AND (A.OBSERVACIONES = '" + prenda + "' OR '0' = '" + prenda + "')AND A.OBSERVACIONES IS NOT NULL ORDER BY ESTADO_ALERTA");
            rst = pst.executeQuery();
            while (rst.next()) {
                prendatarios.add(Prendasporbeneficiario.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return prendatarios;
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void actualizarusuruntfecha(Date fecha, long fk_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update runt_usuarios set fecha_ini= ? where fk_usuario = ?");
            pst.setDate(1, fecha);
            pst.setLong(2, fk_usuario);
            pst.executeUpdate();
        } catch (Exception e) {
            throw new SQLException("No se pudo actualizar la fecha del Usuario" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public java.util.List<UsuarioRunt> verificarUsuariosToken() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<UsuarioRunt> usuariosToken = new java.util.LinkedList<UsuarioRunt>();
        try {
            pst = con.prepareStatement("select * from runt_usuarios");
            rst = pst.executeQuery();
            while (rst.next()) {
                usuariosToken.add(UsuarioRunt.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return usuariosToken;
    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void actualizartoken(String cod) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update runt_usuarios set template= ? where codigo in (select codigo from runt_usuarios)");
            pst.setString(1, cod);
            pst.executeUpdate();
        } catch (Exception e) {
            throw new SQLException("Error al Actualizar Token: ---> " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }
/////////////////////////////////////////////////////////////////////////////////////////////////////////

    public UsuarioRunt consultarUsuarioRuntpass(long nom, String pass, long fk_usuario)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM RUNT_USUARIOS WHERE codigo= ? and password= ? and fk_usuario= ? AND FECHA_FIN IS NULL");
            pst.setLong(1, nom);
            pst.setString(2, pass);
            pst.setLong(3, fk_usuario);
            rst = pst.executeQuery();
            if (rst.next()) {
                return UsuarioRunt.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }
/////////////////////////////////////////////////////////////////////////////////////////////////////////

    public java.util.List<Mclc> consultaMclc(long clase, long carroceria, long marca, long linea) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Mclc> Lista = new java.util.LinkedList<Mclc>();

        try {
            pst = con.prepareStatement("SELECT V.PLACA,(SELECT C.NOMBRE FROM PARAMETROS C WHERE C.CODIGO = V.CLASE_VEHICULO AND C.FK_GRUPO = 1) CLASE,(SELECT C.NOMBRE FROM PARAMETROS C WHERE C.CODIGO = V.SERVICIO AND C.FK_GRUPO = 3) SERVICIO,M.NOMBRE MARCA,L.NOMBRE LINEA,(SELECT CR.NOMBRE FROM PARAMETROS CR WHERE CR.FK_GRUPO = 2 AND CR.NOMBRE_CORTO = V.CLASE_VEHICULO AND CR.CODIGO IN(SELECT DV.VALOR FROM DATOS_VEHICULOS DV WHERE DV.FK_VEHICULO = V.ID_VEHICULO AND DV.SUB_GRUPO_CODIGO = 2 AND DV.FECHA_FIN IS NULL)) CARROCERIA, (SELECT PE.DOCUMENTO||' - '||PE.NOMBRE_1||' '||PE.APELLIDO_1 FROM PERSONAS PE WHERE PE.ID_PERSONA IN(SELECT MAX(PR.FK_PERSONA) FROM PROPIETARIOS PR WHERE PR.FECHA_FIN IS NULL AND PR.FK_VEHICULO = V.ID_VEHICULO)) PROPIETARIO FROM VEHICULOS V,LINEAS L,MARCAS M WHERE V.ID_VEHICULO IN(SELECT DV.FK_VEHICULO FROM DATOS_VEHICULOS DV WHERE DV.SUB_GRUPO_CODIGO = 2 AND DV.FECHA_FIN IS NULL AND (DV.VALOR = '" + carroceria + "' OR '" + carroceria + "' = '2000')) AND V.FK_LINEA = L.ID_LINEA AND (L.ID_LINEA = '" + linea + "' OR '" + linea + "' = '1000000') AND M.CODIGO = L.FK_MARCA AND (M.CODIGO = '" + marca + "' OR '" + marca + "' = '1000000') AND (V.CLASE_VEHICULO = '" + clase + "' OR '" + clase + "' = '100')");
            rst = pst.executeQuery();
            while (rst.next()) {
                Lista.add(Mclc.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return Lista;
////////////////////////////////////////////////////////////////
    }

    public java.util.List<TramiteValor> Listatramites(long clase, long tramite) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<TramiteValor> Lista = new java.util.LinkedList<TramiteValor>();

        try {
            pst = con.prepareStatement("select t.nombre, SUM(s.valor) valor from tramite_conceptos tc, sede_tramite_conceptos s, tramites t where s.fk_concepto = tc.fk_concepto and  tc.fk_tramite in (t.id_tramite)  and tc.fk_tramite = s.fk_tramite and s.fecha_fin is null and t.clase_tramite  In (" + tramite + ")  and (tc.valor_1=" + clase + " or tc.valor_1 is null) group by t.nombre, t.id_tramite order by t.id_tramite");
            rst = pst.executeQuery();
            while (rst.next()) {
                Lista.add(TramiteValor.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return Lista;
    }
////////////////////////////////////////////////////////////////
/*    ------------------ jose carre�o ----------------   */

    public java.util.List<Comparendo> ConsultarComparendoByInfraccion(long fk_infraccion) throws java.sql.SQLException {

        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;
        java.util.List<Comparendo> Lista = new java.util.LinkedList<Comparendo>();
        try {
            pst = con.prepareStatement("select * from comparendos c where c.fk_infraccion = ?");
            pst.setLong(1, fk_infraccion);
            rst = pst.executeQuery();
            while (rst.next()) {
                Lista.add(Comparendo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return Lista;
    }

    /*    ------------------ jose carre�o ----------------   */
    public java.util.List<Infraccion> listaDeInfracciones() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Infraccion> Lista = new java.util.LinkedList<Infraccion>();
        try {
            pst = con.prepareStatement("select * from infracciones order by id_infraccion");
            rst = pst.executeQuery();
            while (rst.next()) {
                Lista.add(Infraccion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return Lista;
    }

    public java.util.List<Comparendo> consultarComparendoByFecha(String fechaI, String fechaF)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Comparendo> Lista = new java.util.LinkedList<Comparendo>();

        try {
            pst = con.prepareStatement("SELECT * FROM comparendos WHERE TO_DATE(TO_CHAR(FECHA,'dd/MM/yyyy'),'dd/MM/yyyy') BETWEEN ? and ? ORDER BY fecha");
            pst.setString(1, fechaI);
            pst.setString(2, fechaF);
            rst = pst.executeQuery();
            while (rst.next()) {
                Lista.add(Comparendo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return Lista;
    }
///

    public void editarTokentodos(String token) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RUNT_USUARIOS SET TEMPLATE = ? ");
            pst.setString(1, token);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
    /////

    public java.util.List<Financiacion> consultarFinanciacionesFechas(String fechaI, String fechaF) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Financiacion> financiaciones = new java.util.LinkedList<Financiacion>();
        try {
            pst = con.prepareStatement("SELECT * FROM FINANCIACIONES WHERE (FECHA BETWEEN ? and ?) ORDER BY ID_FINANCIACION");
            pst.setString(1, fechaI);
            pst.setString(2, fechaF);
            rst = pst.executeQuery();
            while (rst.next()) {
                financiaciones.add(Financiacion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return financiaciones;
    }
// Consulta Usuarios por perfil By: EOA 13/03/2012

    public java.util.List<Perfil> consultarPerfiles() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Perfil> perfil = new java.util.LinkedList<Perfil>();
        try {
            pst = con.prepareStatement("select * from conf_perfiles");
            rst = pst.executeQuery();
            while (rst.next()) {
                perfil.add(Perfil.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return perfil;
    }
    //consulta de Financianciones imcumplidas por fecha By: EOA 15/03/2012

    public java.util.List<Financiacion> consultarFinanciacionesFechasIncumplidas(String fechaI, String fechaF) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Financiacion> financiacionesimcumplidas = new java.util.LinkedList<Financiacion>();
        try {
            pst = con.prepareStatement("SELECT F.* "
                    + "FROM financiaciones F, usuarios U, tipo_financiacion TF, personas P, detalles_financiaciones DF "
                    + "WHERE (F.fecha BETWEEN ? and ?) "
                    + "AND U.ID_USUARIO = F.FK_USUARIO "
                    + "AND F.FK_PERSONA = P.ID_PERSONA "
                    + "AND TF.ID_TIPO_FINANCIACION = F.FK_TIPO_FINANCIACION "
                    + "AND  DF.ESTADO=1 "
                    + "AND to_char(sysdate, 'MM/DD/YYYY')>to_char(DF.FECHA_PAGO,'dd/mm/yyyy') "
                    + "and F.ID_FINANCIACION = DF.FK_FINANCIACION");
            pst.setString(1, fechaI);
            pst.setString(2, fechaF);
            rst = pst.executeQuery();
            while (rst.next()) {
                financiacionesimcumplidas.add(Financiacion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return financiacionesimcumplidas;
    }

    //consulta de caja general de pagos por usuario entre fecha By: Jefrey Padilla 31/07/2012
    public java.util.List listarTiqueteGeneralByUsuario(Date fechaI, Date fechaF, long fk_usuario) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaTiquete = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * From tiquetes  where fecha between ? and ? and fk_usuario = ? and estado_preliquidacion = ? order by numero_tiquete");
            pst.setDate(1, fechaI);
            pst.setDate(2, fechaF);
            pst.setLong(3, fk_usuario);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaTiquete.add(Tiquete.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaTiquete;
    }

    //consulta de caja general de pagos entre  fecha By: EOA 16-17/03/2012
    public java.util.List listarTiqueteGeneral(Date fechaI, Date fechaF) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaTiquete = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * From tiquetes  where fecha between ? and ? order by numero_tiquete");
            pst.setDate(1, fechaI);
            pst.setDate(2, fechaF);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaTiquete.add(Tiquete.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaTiquete;
    }

//Listar tiquetes no pagados create Jefrey Padilla
    public java.util.List listarTiquetesNoCancelados(Date fechaI, Date fechaF, long est_preliquidacion) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaTiquete = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * From tiquetes  where fecha between ? and ? and estado_preliquidacion = ? order by numero_tiquete");
            pst.setDate(1, fechaI);
            pst.setDate(2, fechaF);
            pst.setLong(3, est_preliquidacion);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaTiquete.add(Tiquete.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaTiquete;
    }

// consulta de vehiculos por servicio grupo By: EOA 30/04/2012
    // select * from vehiculos V where  V.Servicio = ?
    public java.util.List<Vehiculo> consultarVehiculosServicio(long serv, long clas) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Vehiculo> vehiculo = new java.util.LinkedList<Vehiculo>();
        try {
            pst = con.prepareStatement("select * from vehiculos v where  v.Servicio = ? AND v.clase_vehiculo = ? order by 1 asc");
            pst.setLong(1, serv);
            pst.setLong(2, clas);
            rst = pst.executeQuery();
            while (rst.next()) {
                vehiculo.add(Vehiculo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return vehiculo;
    }

//Edicion de password, actualiza el historial del password y comprueba si se utilizo anteriorment  By: EOA 10/05/2012
    public void editarPassword2(String password1, String password2, String password3, long flag, long fk_id_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE HUSUARIO SET password1= ?, password2= ?, password3= ?, flag= ?, fecha= to_date((to_char(sysdate,'DD/MM/yyyy')),'DD/MM/YYYY') WHERE fk_id_usuario= ? ");
            pst.setString(1, password1);
            pst.setString(2, password2);
            pst.setString(3, password3);
            pst.setLong(4, flag);
            //pst.setDate(5, fecha);
            pst.setLong(5, fk_id_usuario);
            pst.executeUpdate();
        } catch (Exception e) {
            throw new SQLException("Error al ingresar el historico del usuario: ---> " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

//Consulta el historial del usuario con sus password  By: EOA 10/05/2012
    public java.util.List<HUsuario> consultarHUsuario(long id_usu) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION DEL H USUARIO");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<HUsuario> husuario = new java.util.LinkedList<HUsuario>();
        try {
            pst = con.prepareStatement("SELECT * FROM HUSUARIO WHERE fk_id_usuario = ?");
            pst.setLong(1, id_usu);
            rst = pst.executeQuery();
            while (rst.next()) {
                husuario.add(HUsuario.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar el historico del usuario" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return husuario;
    }

    //Edicion del estado, actualiza a 1 el estado  By: EOA 10/05/2012
    public void editarRuntSincronizacion(long pl) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RUNT_SINCRONIZACION SET ESTADO = 1 WHERE fk_vehiculo = ?");
            pst.setLong(1, pl);
            pst.executeUpdate();
        } catch (Exception e) {
            throw new SQLException("Error al ingresar el estado: ---> " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
//  Consulta de Vehiculos por placa By: EOA

    public java.util.List<Vehiculo> consultarVplaca(String placa) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Vehiculo> vehiculo = new java.util.LinkedList<Vehiculo>();
        try {
            pst = con.prepareStatement("select * from vehiculos where placa= ? order by 1 asc");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            while (rst.next()) {
                vehiculo.add(Vehiculo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return vehiculo;
    }

    public void adicionarHUsuario(long id, String p1, String p2, String p3, long flag) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO  husuario(FK_ID_USUARIO,password1,password2,password3,flag,fecha) VALUES (?,?,?,?,?,to_date((to_char(sysdate,'DD/MM/yyyy')),'DD/MM/YYYY'))");
            pst.setLong(1, id);
            pst.setString(2, p1);
            pst.setString(3, p2);
            pst.setString(4, p3);
            pst.setLong(5, flag);
            pst.execute();
        } catch (Exception e) {
            throw new SQLException("Error al insertat el Husuario por primera vez " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
//////////////////////////////JOSE CARREÑO/////////////////////////////////

    public java.util.List<Usuario> ListarUsuario() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Usuario> usuario = new java.util.LinkedList<Usuario>();
        try {
            pst = con.prepareStatement("select * from Usuarios order by nombre");
            rst = pst.executeQuery();
            while (rst.next()) {
                usuario.add(Usuario.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return usuario;
    }/////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void HabilitarUsuarios(Date fecha, long id_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update usuarios u set u.fecha_fin= ? where u.id_usuario = ?");
            pst.setDate(1, fecha);
            pst.setLong(2, id_usuario);
            pst.executeUpdate();
        } catch (Exception e) {
            throw new SQLException("No se realizo el proceso" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
//EOA VI-MMXII

    public java.util.List<Respuesta_Solicitud> ConsultarRS(String num) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Respuesta_Solicitud> conrs = new java.util.LinkedList<Respuesta_Solicitud>();
        try {
            pst = con.prepareStatement("select * from respuesta_solicitud where NUM_OFICIO_RESPUESTA =?");
            pst.setString(1, num);
            rst = pst.executeQuery();
            while (rst.next()) {
                conrs.add(Respuesta_Solicitud.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("oficios Respuesta_Solicitud consultados: ---> " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return conrs;
    }

    //EOA VI-MMII
    public Respuesta_Solicitud consultarRespuestaSolicitud(long numero) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select * from respuesta_solicitud where fk_solicitud_oficio =  ? and estado = 1");
            pst.setLong(1, numero);
            rst = pst.executeQuery();
            while (rst.next()) {
                return Respuesta_Solicitud.load(rst);
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    /// CREADO BY EOA VI-MMXII
    public Detalle_Respuesta consultarRespuestaDetalle(String placa, long ni) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abiertaaaaa ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select * from detalle_respuesta where referencia= ? and fk_respuesta = ?");
            pst.setString(1, placa);
            pst.setLong(2, ni);
            rst = pst.executeQuery();
            while (rst.next()) {
                return Detalle_Respuesta.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido consultar el detalle de la respuesta " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }
//////////////////////////////jose carreño/////////////////////

    public void RegistrarLinea(Long id_linea, Long fk_marca, String nombre) throws SQLException {
        System.out.println("Entro en el registro del grupo");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("insert into lineas values(?,?,?)");
            pst.setLong(1, id_linea);
            pst.setString(2, nombre);
            pst.setLong(3, fk_marca);

            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! " + e);

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
    }

    public void EliminarPerfilesRecurso(long fk_perfil) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement("DELETE FROM CONF_PERFIL_RECURSOS where FK_PERFIL = ? AND FECHA_FINAL IS NOT NULL");
            pstmt.setLong(1, fk_perfil);
            pstmt.executeUpdate();
        } finally {
            if (pstmt != null) {
                pstmt.close();
            }
        }
    }
//Consulta el historial del usuario con sus password  By: EOA 10/05/2012

    public FechaMaxUsuario consultarMaxFechaHis(long id_usu) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select max(fecha) from his_pas_usuario where fk_id_usuario=?");
            pst.setLong(1, id_usu);
            rst = pst.executeQuery();
            if (rst.next()) {
                return FechaMaxUsuario.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultarMaxFechaHis del usuario: ---> " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public java.util.List<HIS_PAS_USUARIO> consultarHIS_PAS_USUARIO(long id_usu) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<HIS_PAS_USUARIO> idusuario = new java.util.LinkedList<HIS_PAS_USUARIO>();
        try {
            pst = con.prepareStatement("SELECT * FROM HIS_PAS_USUARIO WHERE FK_ID_USUARIO= ?");
            pst.setLong(1, id_usu);
            rst = pst.executeQuery();
            while (rst.next()) {
                idusuario.add(HIS_PAS_USUARIO.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar  el consultarHIS_PAS_USUARIO por primera vez " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return idusuario;
    }

    public void adicionarHIS_PAS_USUARIO(long id, String p1) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO his_pas_usuario(FK_ID_USUARIO,PASSWORD1,FECHA) VALUES (?,?,to_date((to_char(sysdate,'DD/MM/yyyy')),'DD/MM/YYYY'))");
            pst.setLong(1, id);
            pst.setString(2, p1);
            pst.execute();
        } catch (Exception e) {
            throw new SQLException("Error al insertar el adicionarHIS_PAS_USUARIO por primera vez " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
//////////////////////////////////////////////////////////////
///////////////////////////jose//////////////////////////////

    public java.util.List<UsuarioCaja> ListarUsuarioCajas() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<UsuarioCaja> usuario = new java.util.LinkedList<UsuarioCaja>();
        try {
            pst = con.prepareStatement("select * from usuario_cajas Where fk_usuario in (select id_usuario from usuarios)order by fk_usuario");
            rst = pst.executeQuery();
            while (rst.next()) {
                usuario.add(UsuarioCaja.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return usuario;
    }///////////////////////////////////esta es otra//////////////////////

    public java.util.List<UsuarioCaja> ListarUsuarioCajas(Long fk_usu) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<UsuarioCaja> usuario = new java.util.LinkedList<UsuarioCaja>();
        try {
            pst = con.prepareStatement("select * from usuario_cajas Where fk_usuario=" + fk_usu + " order by fk_caja");
            rst = pst.executeQuery();
            while (rst.next()) {
                usuario.add(UsuarioCaja.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return usuario;
    }/////////////////////////////////////////////////////////

    public UsuarioCaja consultarCajaUsuarioById_caja(long id_caja, long id_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rst = null;
        try {
            prst = con.prepareStatement("SELECT * FROM USUARIO_CAJAS WHERE FK_caja = ? and fk_usuario= ?");
            prst.setLong(1, id_caja);
            prst.setLong(2, id_usuario);
            rst = prst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return UsuarioCaja.load(rst);
                } else {
                    return null;
                }
            }
        } catch (Exception e) {
            throw new SQLException("ERRORj,khg kjhgvkjhsh llasyibvc \n" + e);
        } finally {
            if (prst != null) {
                prst.close();
            }
            prst = null;
        }
        return null;
    }

    public void AdicinonarUsuarioCaja(long fk_usuario, long sede, long caja, Date f_inicio) throws SQLException {
        System.out.println("Entro en el registro del grupo");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into USUARIO_CAJAS (FK_USUARIO,FK_SEDE,FK_CAJA,FECHA_INICIO)values(?,?,?,?)");
            pst.setLong(1, fk_usuario);
            pst.setLong(2, sede);
            pst.setLong(3, caja);
            pst.setDate(4, f_inicio);

            pst.executeQuery();
        } catch (Exception e) {
            throw new SQLException(" Error! " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
        }
    }

    public void HabilitarCaja(Date date, Long id_usuario, Long id_caja) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE USUARIO_CAJAS SET fecha_FIN=to_date((to_char(?,'DD/MM/yyyy')),'DD/MM/YYYY') WHERE fk_usuario= ? AND fk_caja= ?");
            pst.setDate(1, date);
            pst.setLong(2, id_usuario);
            pst.setLong(3, id_caja);
            pst.executeUpdate();
        } catch (Exception e) {
            throw new SQLException("No se pudo actualizar la el usu caja" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////otro incermas/////////////////////////////
    public void AdicionarUsuTipoPago(Long fk_usuario, Long fk_caja, Long tipoPago, Long estado) throws SQLException {
        System.out.println("Entro en el registro del grupo");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("insert into usuarios_tipopagos f (f.fk_usuario,f.fk_caja,f.tipo_pago,f.estado) values (?,?,?,?)");
            pst.setLong(1, fk_usuario);
            pst.setLong(2, fk_caja);
            pst.setLong(3, tipoPago);
            pst.setLong(4, estado);
            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! " + e);

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
    }
/////////////////////////////////////////////////////////////////////////////////////////////////////////otra mas////////////////////////

    public TipoPagos consultarTipopago(long fk_usuario, long fk_caja, long tipo_pago) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rst = null;
        try {
            prst = con.prepareStatement("select * from usuarios_tipopagos f where f.fk_usuario= ? and f.fk_caja= ? and f.tipo_pago = ?");
            prst.setLong(1, fk_usuario);
            prst.setLong(2, fk_caja);
            prst.setLong(3, tipo_pago);
            rst = prst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return TipoPagos.Load(rst);
                } else {
                    return null;
                }
            }
        } catch (Exception e) {
            throw new SQLException("ERRORj,khg kjhgvkjhsh llasyibvc \n" + e);
        } finally {
            if (prst != null) {
                prst.close();
            }
            prst = null;
        }
        return null;
    }
//////////////////////////////////otro incermas/////////////////////////////

    public void AdicionarUsTipoPago(Long fk_usuario, Long fk_caja, Long tipoPago, Long estado) throws SQLException {
        System.out.println("Entro en el registro del grupo");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("insert into usuarios_tipopagos f (f.fk_usuario,f.fk_caja,f.tipo_pago,f.estado) values (?,?,?,?)");
            pst.setLong(1, fk_usuario);
            pst.setLong(2, fk_caja);
            pst.setLong(3, tipoPago);
            pst.setLong(4, estado);
            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! " + e);

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////

    public LinkedList consultarTipoPago(long fk_usuario, long fk_caja) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaTipos = new LinkedList();

        try {

            pst = con.prepareStatement("SELECT T.* FROM USUARIOS_TIPOPAGOS T,PARAMETROS P WHERE T.FK_USUARIO = ? AND T.FK_CAJA = ? AND T.ESTADO = 1 AND P.CODIGO = T.TIPO_PAGO AND P.FK_GRUPO = 301 ORDER BY TIPO_PAGO");
            pst.setLong(1, fk_usuario);
            pst.setLong(2, fk_caja);
            rst = pst.executeQuery();

            while (rst.next()) {
                listaTipos.add(TipoPagos.Load(rst));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

        return listaTipos;
    }
    ////////////////////////////////////////////////////////////////////////////

    public void ActualizarTipoPago(long estado, Long fk_usuario, Long fk_caja, long tipopago) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update usuarios_tipopagos f set f.estado=? where f.fk_usuario =? and f.fk_caja=? and f.tipo_pago=?");
            pst.setLong(1, estado);
            pst.setLong(2, fk_usuario);
            pst.setLong(3, fk_caja);
            pst.setLong(4, tipopago);
            pst.executeUpdate();
        } catch (Exception e) {
            throw new SQLException("No se pudo actualizar" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
    // Consulta consultarPerfil_Recurs By: EOA 15/06/2012

    public java.util.List<Perfil_Recurso> consultarPerfil_Recurso(long id_perfil) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Perfil_Recurso> perfil_recurso = new java.util.LinkedList<Perfil_Recurso>();
        try {
            pst = con.prepareStatement("SELECT CR.NOMBRE FROM conf_perfiles CP, conf_recursos CR, conf_perfil_recursos CPR where CP.ID_PERFIL = CPR.FK_PERFIL AND CR.ID_RECURSO = CPR.FK_RECURSO AND CP.ID_PERFIL = ?");
            pst.setLong(1, id_perfil);
            rst = pst.executeQuery();
            while (rst.next()) {
                perfil_recurso.add(Perfil_Recurso.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar  el consultarPerfil_Recurso por primera vez " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return perfil_recurso;
    }

    // Consulta consultarRecurso_Perfill By: EOA 15/06/2012
    public java.util.List<Recursos_Perfil> consultarRecurso_Perfil(long id_recurso) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Recursos_Perfil> recurso_perfil = new java.util.LinkedList<Recursos_Perfil>();
        try {
            pst = con.prepareStatement("SELECT  CP.NOMBRE FROM conf_perfiles CP, conf_recursos CR, conf_perfil_recursos CPR where CP.ID_PERFIL = CPR.FK_PERFIL AND CR.ID_RECURSO = CPR.FK_RECURSO and CR.id_recurso =?");
            pst.setLong(1, id_recurso);
            rst = pst.executeQuery();
            while (rst.next()) {
                recurso_perfil.add(Recursos_Perfil.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar  el consultarRecurso_Perfil por primera vez " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return recurso_perfil;
    }
// Consulta consultarPerfilesNombre By: EOA 15/06/2012

    public java.util.List<Perfil> consultarPerfilesNombre(long id_perfil) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Perfil> perfil_nombre = new java.util.LinkedList<Perfil>();
        try {
            pst = con.prepareStatement("select * from conf_perfiles where id_perfil=?");
            pst.setLong(1, id_perfil);
            rst = pst.executeQuery();
            while (rst.next()) {
                perfil_nombre.add(Perfil.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return perfil_nombre;
    }
    // Consulta consultarPerfilesNombre By: EOA 15/06/2012

    public java.util.List<Recurso> consultarRecursoNombre(long id_recurso) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Recurso> recurso_nombre = new java.util.LinkedList<Recurso>();
        try {
            pst = con.prepareStatement("select * from conf_recursos where id_recurso=?");
            pst.setLong(1, id_recurso);
            rst = pst.executeQuery();
            while (rst.next()) {
                recurso_nombre.add(Recurso.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return recurso_nombre;
    }
    // Consulta listado de recursos  By: EOA 15/06/2012

    public java.util.List<Recurso> consultarRecursos() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Recurso> recursos = new java.util.LinkedList<Recurso>();
        try {
            pst = con.prepareStatement("select * from conf_recursos");
            rst = pst.executeQuery();
            while (rst.next()) {
                recursos.add(Recurso.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return recursos;
    }

    /////////////////////////////// H C ///////////////
    public void ActualizaCaja(Date fecha, long id_caja) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update Cajas u set u.fecha_fin= ? where u.id_caja = ?");
            pst.setDate(1, fecha);
            pst.setLong(2, id_caja);
            pst.executeUpdate();
        } catch (Exception e) {
            throw new SQLException("No se pudo actualizar Caja" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listarCajas() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listacaja = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("select * from cajas");

            rst = pst.executeQuery();
            while (rst.next()) {
                listacaja.add(Caja.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listacaja;
    }

    //////////////////// f H C7///
    //////////////////rangos comparendo////////
    ////////////////////prosesocontra vencionañl
    public void adicionarRangoComparendos(Rangos_Comparendos rango_comparendo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into rangos_comparendos (num_inicial,num_final,fecha_proceso,estado,num_resolucion,fecha_resolucion,fk_usuario) values (?,?,sysdate,?,?,?,?)");
            pst.setString(1, rango_comparendo.GetNum_Inicial());
            pst.setString(2, rango_comparendo.GetNum_Final());
            pst.setLong(3, rango_comparendo.GetEstado());
            pst.setString(4, rango_comparendo.GetNum_resolucion());
            pst.setDate(5, rango_comparendo.GetFecha_Resolucion());
            pst.setLong(6, rango_comparendo.GetFk_usuario());

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////consulta////////////////////////////////////////////

    public LinkedList ConsultaRangosComparendos() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaTipos = new LinkedList();

        try {

            pst = con.prepareStatement("SELECT * FROM rangos_comparendos order by id_rango");

            rst = pst.executeQuery();
            while (rst.next()) {
                listaTipos.add(Rangos_Comparendos.load(rst));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

        return listaTipos;
    }
    /////////////////////////////////////////////////////////////////////////////

    public LinkedList ListarRangosAgentesByrango(long id_rango) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaTipos = new LinkedList();

        try {

            pst = con.prepareStatement("SELECT * FROM detalle_rango_comparendos where fk_rango=" + id_rango);

            rst = pst.executeQuery();
            while (rst.next()) {
                listaTipos.add(Detalle_Rango_Comparendo.load(rst));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

        return listaTipos;
    }
    ///////////////////////////////////////////////////////

    public Rangos_Comparendos consultarRangoComparendoByid_rango(long id_rango)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Rangos_Comparendos rango = new Rangos_Comparendos();
        try {
            pst = con.prepareStatement("SELECT * FROM rangos_comparendos where id_rango =?");
            pst.setLong(1, id_rango);
            rst = pst.executeQuery();
            if (rst.next()) {
                rango = Rangos_Comparendos.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return rango;
    }
    /////////////////////////////////////////////////////////////////////7

    public void adicionarDetalleRango(Detalle_Rango_Comparendo detalle) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("Insert Into detalle_rango_comparendos c (c.fk_rango,c.numero,c.estado,c.fk_agente,c.fecha_asignacion,c.fk_usuario) values (?,?,?,?,?,?)");
            pst.setLong(1, detalle.GetFk_rango());
            pst.setString(2, detalle.GetNumero());
            pst.setLong(3, detalle.GetEstado());
            pst.setLong(4, detalle.GetFk_agente());
            pst.setDate(5, detalle.GetFecha_asignacion());
            pst.setLong(6, detalle.GetFk_usuario());
            //javax.swing.JOptionPane.showMessageDialog(null,detalle.GetFk_usuario());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    /////////////////f ranfo camparendo///////
    ///////////////////////
    public java.util.List listarConfRecursos(long fk_perfil) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listPatios = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM  CONF_PERFIL_RECURSOS WHERE FK_PERFIL = ? AND FECHA_FINAL IS NULL");
            pst.setLong(1, fk_perfil);
            rst = pst.executeQuery();
            while (rst.next()) {
                listPatios.add(Recurso_Perfil.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listPatios;

    }

    public Boolean ConsultarUsuario(String user, String password) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
//            pst = con.prepareStatement("UPDATE USUARIOS SET PASSWORD = ? WHERE NOMBRE = ?");
//            pst.setString(1, password);
//            pst.setString(2, user);
//            pst.execute();
//            pst = con.prepareStatement("SELECT PASSWORD FROM USUARIOS U WHERE U.NOMBRE = ?");
//            pst.setString(1, user);
//            rst = pst.executeQuery();
//            if (rst.next()) {
//                System.out.println("Usuario :"+user+" Password :"+Encrypt.desencriptar(rst.getString(1)));
//            }

            pst = con.prepareStatement("SELECT U.* FROM USUARIOS U WHERE U.NOMBRE = ? AND U.FECHA_FIN IS NULL AND U.PASSWORD = ?");
            pst.setString(1, user);
            pst.setString(2, password);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    //Usuario usuario = Usuario.load(rst);
                    //userHandler = consultarPersona(usuario.getId_persona()).getDocumento();
                    //passUserHandler = password;
                    return true;
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return false;
    }

    public Radicacion_Propietario consultarRadicacionPropietarios(long fk_formulario) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Radicacion_Propietario radicacion = new Radicacion_Propietario();
        try {
            pst = con.prepareStatement("SELECT * FROM RADICACION_PROPIETARIO WHERE FK_FORMULARIO = ?");
            pst.setLong(1, fk_formulario);
            rst = pst.executeQuery();
            if (rst.next()) {
                radicacion = Radicacion_Propietario.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return radicacion;
    }

    //////////////////////
/*14/11/2012*/
//Creado por Jefrey Padilla 18/10/2012
    public void actualizarTipoPagoTiquete(long id_tiquete, int tipo_pago, String referencia, Date fecha_referencia, long fk_banco) throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE TIQUETES SET TIPO_PAGO = ?, REFERENCIA = ?, FECHA_REFERENCIA = ?, FK_BANCO = ? WHERE ID_TIQUETE = ?");
            pst.setInt(1, tipo_pago);
            pst.setString(2, referencia);
            pst.setDate(3, fecha_referencia);
            pst.setLong(4, fk_banco);
            pst.setLong(5, id_tiquete);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    //Creado por Jefrey Padilla 18/10/2012
    public void actualizarTipoPagos(long id_tiquete, int tipo_pago, String referencia, Date fecha_referencia, long fk_banco) throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE PAGOS SET TIPO_PAGO = ?, REFERENCIA = ?, FECHA_TIPO_PAGO = ?, FK_BANCO = ? WHERE FK_TIQUETE = ?");
            pst.setInt(1, tipo_pago);
            pst.setString(2, referencia);
            pst.setDate(3, fecha_referencia);
            pst.setLong(4, fk_banco);
            pst.setLong(5, id_tiquete);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    /*----------------------------------------------------*/
    //CREADO POR ANDRES DONADO
    public void AdicionarCarteraRevocatoria(String placa, int vig, int periodo, int servicio, int estado, int usuario, String ano) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO TRANSITO.CARTERAS(FK_VEHICULO,FK_SEDE,TIPO,REFERENCIA,FECHA_CREACION,FECHA_INGRESO,VALOR,SALDO,FECHA_SALDO,"
                    + "ESTADO_CARTERA,FECHA_ESTADO,ESTADO_VIGENCIA,FECHA_ESTADO_VIGENCIA ,FK_USUARIO,FK_CONCEPTO,PERIODO)"
                    + " SELECT V.ID_VEHICULO,234,2,D.VIGENCIA, DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)),SYSDATE,SUM(D.VALOR),SUM(D.VALOR),"
                    + "DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)),1, "
                    + "DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)),NVL(DECODE(D.VIGENCIA,'" + ano + "',1)," + estado + "),SYSDATE," + usuario + ",NVL(DECODE(D.VIGENCIA,'" + ano + "',"
                    + "DECODE(D.TIPO,1,34,2,35,3,32,4,33)),D.CONCEPTO)," + periodo + " FROM TRANSITO.VEHICULOS V,TRANSITO.DETALLES2 D WHERE PLACA = '" + placa + "'AND D.TIPO = " + servicio + " AND D.VIGENCIA BETWEEN " + vig + " AND " + vig + " "
                    + "GROUP BY V.ID_VEHICULO,234,2,D.VIGENCIA,"
                    + "DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)), SYSDATE,DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)),1, "
                    + "DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)),NVL(DECODE(D.VIGENCIA,'" + ano + "',1),3), SYSDATE,1,NVL(DECODE(D.VIGENCIA,'" + ano + "',DECODE(D.TIPO,1,34,2,35,3,32,4,33)),D.CONCEPTO)," + periodo);
            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

//CREADO POR ANDRES DONADO
    public void AdicionarDetalleCarteraRevocatoria(String placa, int vig, int servicio, int usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO TRANSITO.DETALLE_CARTERAS(FK_CARTERA,FK_CONCEPTO,REFERENCIA,FECHA,FECHA_SISTEMA,"
                    + "FK_USUARIO,ESTADO,VALOR)SELECT C.ID_CARTERA,D.CONCEPTO,D.VIGENCIA,C.FECHA_CREACION,SYSDATE,?,1,D.VALOR "
                    + "FROM TRANSITO.VEHICULOS V,TRANSITO.DETALLES2 D,TRANSITO.CARTERAS C WHERE PLACA = ? AND D.TIPO = ? "
                    + " AND D.VIGENCIA BETWEEN ? AND ? AND V.ID_VEHICULO = C.FK_VEHICULO AND C.REFERENCIA = D.VIGENCIA");
            pst.setInt(1, usuario);
            pst.setString(2, placa);
            pst.setInt(3, servicio);
            pst.setInt(4, vig);
            pst.setInt(5, vig);
            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

//CREADO POR ANDRES DONADO
    public void ActualizarCarteraRevocatoria(int usuario, long fkvehiculo, int estadocartera, int est_cartera) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            //PreparedStatement pst = null;
            pst = con.prepareStatement("UPDATE CARTERAS SET ESTADO_CARTERA = ?, FK_USUARIO = ? WHERE FK_VEHICULO = ? AND ESTADO_CARTERA = ?");
            pst.setInt(1, estadocartera);
            pst.setInt(2, usuario);
            pst.setLong(3, fkvehiculo);
            pst.setInt(4, est_cartera);
            pst.executeUpdate();

        } catch (Exception ex) {
            System.out.println("/*-" + ex + "*/");
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

//CREADO POR ANDRES DONADO
    public String consultarPeriodoRev(long id_vehiculo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT TO_CHAR(FECHA_MATRICULA,'MM') FROM VEHICULOS WHERE ID_VEHICULO = ?");
            pst.setLong(1, id_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                String result = rst.getString(1);
                if (result.equals("01") || result.equals("02") || result.equals("03") || result.equals("04")) {
                    return "1";
                } else if (result.equals("05") || result.equals("06") || result.equals("07") || result.equals("08")) {
                    return "2";
                } else if (result.equals("09") || result.equals("10") || result.equals("11") || result.equals("12")) {
                    return "3";
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return "";
    }

    //CREADO POR ANDRES DONADO
    public void AdicionarTrasladoCuenta(Date fecha_resol, long num_resol, int usuario, long vehi) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO TRANSITO.RESOLUCIONES_VEH (NUM_RESOLUCION,FECHA_RESOLUCION,FK_USUARIO,FECHA_PROCESO,FK_VEHICULO) VALUES (?,?,?,SYSDATE,?)");
            pst.setLong(1, num_resol);
            pst.setDate(2, fecha_resol);
            pst.setInt(3, usuario);
            pst.setLong(4, vehi);
            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

//////
//CREADO POR ANDRES DONADO
    public void InsertarObserCert(String placa, String observacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE TRANSITO.DOCUMENTOS SET OBSERVACION = ? WHERE FK_VEHICULO IN (SELECT ID_VEHICULO FROM VEHICULOS WHERE PLACA = ?)");
            pst.setString(1, observacion);
            pst.setString(2, placa);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    /*--------------------------------------------------*/
    //CREADO POR ANDRES DONADO
    public Cartera consultarCarteraRev(long id_vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {

            pst = con.prepareStatement("select * from Carteras where FK_VEHICULO = ?");
            pst.setLong(1, id_vehiculo);
            rst = pst.executeQuery();

            while (rst.next()) {

                return Cartera.Load(rst);

            }
        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha consultar el concepto ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }

    /*14/11/2012*/
 /*---*/
    public boolean fechaf(String fecha) throws SQLException {

        int An = Integer.parseInt(fecha.substring(0, 4));
        int mes = Integer.parseInt(fecha.substring(5, 7));
        int dia = Integer.parseInt(fecha.substring(8, 10));
        System.out.println(dia + "//" + mes + "//" + An);
        //{{{{16-03-2010}}}}
        boolean sw = false;
        if (An >= 2010) {
            if (An == 2010) {
                if (mes >= 3) {
                    if (mes == 3) {
                        if (dia <= 16) {
                            sw = false;
                        } else {
                            sw = true;
                        }
                    }
                } else {
                    sw = true;
                }
            } else {
                sw = true;
            }
            sw = true;
        } else {
            sw = false;
        }
        return sw;
    }//fechaf--->
//--------------------------------//


    /*â—„â–º*/
    //--------------------------------//
    public java.util.List<Comparendo> consultarComparendoToSancion() throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Comparendo> Lista = new java.util.LinkedList<Comparendo>();

        try {
            pst = con.prepareStatement("SELECT * FROM comparendos c where c.sancionado is null");
            rst = pst.executeQuery();
            while (rst.next()) {
                Lista.add(Comparendo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return Lista;
    }

    public void sancionarComparendo(String fk_comparendo, long usu) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("Select * from carteras where id_cartera in (Select c.fk_cartera from comparendos c where c.numero=?) and estado_cartera = 1 and tipo=1");
            pst.setString(1, fk_comparendo);
            rst = pst.executeQuery();
            //Date fecha=null;
            Cartera cartera = new Cartera();
            while (rst.next()) {
                cartera = Cartera.Load(rst);
                System.out.println("/*estado->" + cartera.getEstado_cartera());
                System.out.println("/*referencia->" + cartera.getReferencia());
                System.out.println("/*REFERENCIA->" + fk_comparendo);
                System.out.println("/*Fecha->" + cartera.getFecha_creacion());

                System.out.println("/*Fecha->" + cartera.getFecha_creacion());
                boolean swf = fechaf(cartera.getFecha_creacion().toString());
                System.out.println("/*Shitf->" + swf);
                /*GregorianCalendar fechaactss = new GregorianCalendar();
                Date fec1 = cartera.getFecha_creacion();
                System.out.println("/*fec1->"+fec1);
                java.util.Date fec2 = fechaactss.getTime();
                System.out.println("/*fec2->"+fec2);
                long time = fec2.getTime() - fec1.getTime();
                long dif = (time/(3600*24*1000));*/

                pst = con.prepareStatement("Select * from comparendos where numero=?");
                pst.setString(1, fk_comparendo);
                rst = pst.executeQuery();
                Comparendo comp = new Comparendo();

                while (rst.next()) {
                    comp = Comparendo.load(rst);//Cartera.Load(rst);
                    GregorianCalendar fechaactss = new GregorianCalendar();
                    int dias = consultarDiasHabiles(new java.sql.Date(comp.getFecha().getTime()));
                    java.sql.Timestamp fec1 = comp.getFecha();
                    System.out.println("/*fec1->*/" + fec1);
                    java.util.Date fec2 = fechaactss.getTime();
                    System.out.println("/*fec2->*/" + fec2);
                    long time = fec2.getTime() - fec1.getTime();
                    long dif = (time / (3600 * 24 * 1000));
                    /**/
                    if (dias > 30 && swf == true && dif < 180) {

                        /*while(rst.next()){
                        comp = Comparendo.load(rst);//Cartera.Load(rst);*/
                        System.out.println("/*" + comp.getFk_agente() + "-" + comp.getId_comparendo() + "-" + comp.getFk_persona() + "--" + comp.getFecha() + "/");
                        pst = con.prepareStatement("update comparendos set estado=8 where numero=?");
                        pst.setString(1, fk_comparendo);
                        pst.executeUpdate();
                        con.commit();
                        System.out.println("ok");
                        pst = con.prepareStatement("Update carteras cd set cd.estado_vigencia=3,cd.fecha_estado_vigencia=sysdate,cd.fecha_saldo=sysdate where cd.referencia='" + fk_comparendo + "'");
                        pst.executeUpdate();
                        con.commit();
                        Sancion sann = new Sancion();
                        sann.SetFk_agente(comp.getFk_agente());
                        sann.SetFk_comparendo(comp.getId_comparendo());
                        sann.SetFk_persona(comp.getFk_persona());
                        sann.setC_Fecha(comp.getFecha());
                        sann.setImpreso(0);
                        System.out.println("/*" + sann.getFk_agente() + "-" + sann.getFk_comparendo() + "-" + sann.getFk_persona() + "-" + sann.getImpreso() + "-" + sann.getC_Fecha() + "/");
                        actualizarInteresesCostasComparendo(0, cartera.getId_cartera(), usu);
                        adicionarSancionado(sann);

                    } else if (dif >= 180) {
                        System.out.println("/*" + comp.getFk_agente() + "-" + comp.getId_comparendo() + "-" + comp.getFk_persona() + "--" + comp.getFecha() + "/");
                        pst = con.prepareStatement("update comparendos set estado=7 where numero=?");
                        pst.setString(1, fk_comparendo);
                        pst.executeUpdate();
                        con.commit();
                        Sancion sann = new Sancion();
                        sann.SetFk_agente(comp.getFk_agente());
                        sann.SetFk_comparendo(comp.getId_comparendo());
                        sann.SetFk_persona(comp.getFk_persona());
                        sann.setC_Fecha(comp.getFecha());
                        sann.setImpreso(0);
                        System.out.println("/*" + sann.getFk_agente() + "-" + sann.getFk_comparendo() + "-" + sann.getFk_persona() + "-" + sann.getImpreso() + "-" + sann.getC_Fecha() + "/");
                        adicionarSancionado(sann);
                    }
                }//next

//            if(swf==true){
//                cf++;
//            }
//                cd++;
//                System.out.println("cd->"+cd+"cf->"+cf);
            }//next

        } catch (Exception e) {

            throw new SQLException("/*error->*/" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarSancionado(Sancion san)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            System.out.println("/*SANCION*/");
            pst = con.prepareStatement("insert into sancionados (fk_comparendo,fk_agente,fk_persona,impreso,fecha_c,fecha_s) values (?,?,?,?,?,sysdate)");
            pst.setLong(1, san.getFk_comparendo());
            pst.setLong(2, san.getFk_agente());
            pst.setLong(3, san.getFk_persona());
            pst.setLong(4, san.getImpreso());
            pst.setTimestamp(5, san.getC_Fecha());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List<Comparendo> ListarComparendo()
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * from comparendos where to_date(to_char(fecha,'DD/MM/YYYY')) between '01/01/2012' and to_char(Sysdate,'DD/MM/YYYY') and estado = 1");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Comparendo.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List<Sancion> ListarSancionados()
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("Select * from sancionados order by impreso,fecha_s desc");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Sancion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    /**/
    public java.util.List<Sancion> ListarSancionadosbyImpreso(long imp)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("Select * from sancionados where impreso=? order by impreso,fecha_s desc");
            pst.setLong(1, imp);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Sancion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    /**/
    public void actualizarImpresionSancion(long id_sancion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update sancionados set impreso = 1 where id_sancion = ?");
            pst.setLong(1, id_sancion);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //----------------------------------------------------------------------------------------------//
    public void actualizarInteresesCostasComparendo(long fk_vehiculo, long fk_cartera, long usuario) throws Exception {
        System.out.println("/*inicio*/");
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        System.out.println("/*creo pst y rst*/");
        try {
            procesos.calcularIntereses calcularI = new procesos.calcularIntereses();
            int s = consultarMaxCodigo();
            String tasas[][] = getIntereses();
            calcularI.setTasas("s", s, tasas);
            System.out.println("/*proceso*/");
            if (fk_vehiculo != 0) {
                System.out.println("/*si->*/" + fk_vehiculo);
                pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE FK_VEHICULO = ? AND ESTADO_CARTERA = 1 ORDER BY FECHA_CREACION,REFERENCIA");
                pst.setLong(1, fk_vehiculo);
            } else if (fk_cartera != 0) {
                System.out.println("/*si->*/" + fk_cartera);
                pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE id_cartera = ? AND ESTADO_CARTERA = 1 ORDER BY FECHA_CREACION,REFERENCIA");
                pst.setLong(1, fk_cartera);
            }
            rst = pst.executeQuery();
            while (rst.next()) {
                Cartera cartera = Cartera.Load(rst);
                int idc = cartera.getTipo() == 1 ? 318 : cartera.getTipo() == 2 ? 249 : 319;
                Comparendo comp = new Comparendo();
                if (idc == 318) {
                    /**/
                    pst = con.prepareStatement("Select * from comparendos c where c.fk_cartera=" + cartera.getId_cartera());
                    rst = pst.executeQuery();
                    while (rst.next()) {
                        comp = Comparendo.load(rst);//Cartera.Load(rst);
                    }
                    /**/
                }
                //136819
                System.out.println("/*estado->" + cartera.getEstado_cartera());
                System.out.println("/*tipo_cartera ->*/" + idc);
                java.util.Date fechaInicio = new java.util.Date(comp.getFecha().getTime());
                System.out.println("/*Inicio->*/" + fechaInicio);
                java.util.Date fechaRef = new java.util.Date(tasas[0][0]);
                System.out.println("/*referencia->*/" + fechaRef);
                java.util.Date fechaActual = new java.util.Date();
                System.out.println("/*Actual->*/" + fechaActual);
                fechaInicio = fechaInicio.getTime() < fechaRef.getTime() ? fechaRef : fechaInicio;
                System.out.println("/*inicio-Actual->*/" + fechaActual);
                System.out.println("/*inicio-->*/" + fechaInicio);

                /*------------------------------------*/
                int dias = 0;
                long time = 0;
                boolean sww = false;
                if (comp != null) {

                    System.out.println("/*----------------------*/");
                    GregorianCalendar fechaactss = new GregorianCalendar();
                    java.sql.Timestamp fec1 = comp.getFecha();
                    System.out.println("/*fec1->*/" + fec1);
                    java.util.Date fec2 = fechaactss.getTime();
                    System.out.println("/*fec2->*/" + fec2);
                    time = fec2.getTime() - fec1.getTime();
                    System.out.println("/*time*/" + time);
                    dias = consultarDiasHabiles(new java.sql.Date(comp.getFecha().getTime()));

                    System.out.println("/*dif->*/" + dias);
                    System.out.println("/*----------------------*/");
                    sww = fechaf(cartera.getFecha_creacion().toString());
                    System.out.println("/*sww->*/" + sww);
                } else {
                    dias = 0;
                }
                /*-----------------------------------*/
                pst = con.prepareStatement("Select codigo from parametros where fk_grupo in (356)");
                rst = pst.executeQuery();
                long fsancion = 0;
                while (rst.next()) {
                    fsancion = rst.getLong(1);
                }

                System.out.println("/*Creacion->*/" + cartera.getFecha_creacion());
                fechaf(cartera.getFecha_creacion().toString());
                float valorReal = 0; //valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 3);

                if (idc == 318 && dias > fsancion) {
                    if (sww == true) {
                        try {
                            if (cartera.getEstado_cartera() == 1) {
                                con.setAutoCommit(false);
                                pst = con.prepareStatement("update carteras set estado_vigencia=3 where id_cartera=" + cartera.getId_cartera());
                                rst = pst.executeQuery();
                                con.commit();
                            }
                            if (cartera.getEstado_vigencia() == 1) {
                                if (fk_vehiculo != 0) {
                                    System.out.println("/*si->*/" + fk_vehiculo);
                                    pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE FK_VEHICULO = ? AND ESTADO_CARTERA = 1 ORDER BY FECHA_CREACION,REFERENCIA");
                                    pst.setLong(1, fk_vehiculo);
                                } else if (fk_cartera != 0) {
                                    System.out.println("/*si CARTERA->*/" + fk_cartera);
                                    pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE id_cartera = ? AND ESTADO_CARTERA = 1 ORDER BY FECHA_CREACION,REFERENCIA");
                                    pst.setLong(1, fk_cartera);
                                }
                                rst = pst.executeQuery();
                                cartera = Cartera.Load(rst);

                            }
                            valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 1);
                        } catch (Exception ex) {
                            getCon().rollback();
                            System.out.println("/*Error->" + ex);
                        }

                        valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 1);
                    }
                } else if (idc == 249 || idc == 319) {
                    valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 3);
                }
                float interes = calcularI.getValor(fechaInicio, fechaActual, valorReal);
                int interesR = Math.round(interes);
                System.out.println("interres I*/" + interes);
                System.out.println("interres VR*/" + valorReal);
                System.out.println("interres MI*/" + interesR);
                interesR = interesR <= 0 ? 0 : interesR;
                boolean existeC = existeConcepto(idc, cartera.getId_cartera());
                System.out.println("interres MI*/" + existeC);
                if (!existeC) {
                    System.out.println("Crear concepto*/");

                    if (interesR > 0) {
                        Detalle_Cartera dc = new Detalle_Cartera();
                        dc.setEstado(1);
                        dc.setFecha(cartera.getFecha_creacion());
                        dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                        dc.setFk_cartera(cartera.getId_cartera());
                        dc.setFk_concepto(idc);
                        dc.setFk_usuario(usuario);
                        dc.setReferencia(cartera.getReferencia());
                        dc.setValor(interesR);
                        adicionarDetalleCartera(dc);
                        System.out.println("/*creo interes*/");
                    }
                } else {
                    System.out.println("/*si->actualizo?1*/");
                    actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) interesR);
                }
                if (interesR >= 0) {

                    System.out.println("/*entroR*/");
                    idc = cartera.getTipo() == 1 ? 307 : cartera.getTipo() == 2 ? 276 : 303;
                    System.out.println("/*Carteraestado->" + cartera.getEstado_vigencia() + "<->" + cartera.getFk_concepto());
                    interes = Float.parseFloat(consultarPorcentajeCostas(cartera.getEstado_vigencia(), cartera.getFk_concepto()));
                    //valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 4);
                    valorReal = 0;
                    //valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 3);
                    if (idc == 307) {
                        System.out.println("/*entroR->*/" + idc);
                        valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 6);
                    } else if (idc == 276 || idc == 303) {
                        valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 4);
                    }
                    System.out.println("/*creointeres*/" + idc);
                    System.out.println("interres I>*/" + interes);
                    System.out.println("interres VR>*/" + valorReal);
                    System.out.println("interres MI>*/" + interesR);
                    float costas = (float) (valorReal * interes);
                    int costasR = Math.round(costas);
                    costasR = costasR < 0 ? 0 : costasR;
                    costasR = interesR == 0 ? 0 : costasR;
                    existeC = existeConcepto(idc, cartera.getId_cartera());
                    System.out.println("/*CostaR*/" + costasR);
                    if (!existeC) {
                        if (costasR > 0) {
                            Detalle_Cartera dc = new Detalle_Cartera();
                            dc.setEstado(1);
                            dc.setFecha(cartera.getFecha_creacion());
                            dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                            dc.setFk_cartera(cartera.getId_cartera());
                            dc.setFk_concepto(idc);
                            dc.setFk_usuario(usuario);
                            dc.setReferencia(cartera.getReferencia());
                            dc.setValor(costasR);
                            adicionarDetalleCartera(dc);
                            System.out.println("/*si->detallecartera?1*/");
                        }
                    } else {
                        System.out.println("/*si->detallecartera?2*/");
                        actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) costasR);
                    }
                }
                System.out.println("/*si->actualizo? cartera*/->" + cartera.getId_cartera());
                actualizarValoresCartera(cartera.getId_cartera());
                con.commit();
            }
        } catch (Exception exc) {
            System.out.println("No se actualizo intereses " + exc);
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
            }
        }

    }

    /*---*/
    public LinkedList ListadoDeCursosCia() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaParametros = new LinkedList();

        try {

            pst = con.prepareStatement("select * from cursos_cia order by NOMBRE");

            rst = pst.executeQuery();

            while (rst.next()) {

                listaParametros.add(Cursos_cia.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar los cursoscia ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return listaParametros;
    }

    public Cartera consultarCartera2013() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE REFERENCIA = '2013'"); // orden

            //pst.setLong(1, id_cartera);
            // sql
            rst = pst.executeQuery();
            if (rst.next()) {
                return Cartera.Load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void actualizarCartera2013(Date fecha_creacion, Date fecha_ingreso, Date fecha_saldo, Date fecha_estado, Date fecha_estado_vigencia, long fk_cartera) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        //Si tipo = 1, indica que modifica el saldo, el estado y el pago.
        //Si tipo = 2, indica que modifica unicamente el saldo.
        try {

            pst = con.prepareStatement("UPDATE CARTERAS SET FECHA_CREACION = ?,FECHA_INGRESO = ?,FECHA_SALDO = ?,FECHA_ESTADO = ?, FECHA_ESTADO_VIGENCIA = ? WHERE ID_CARTERA = ?");
            pst.setDate(1, fecha_creacion);
            pst.setDate(2, fecha_ingreso);
            pst.setDate(3, fecha_saldo);
            pst.setDate(4, fecha_estado);
            pst.setDate(5, fecha_estado_vigencia);
            pst.setLong(6, fk_cartera);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarDetalle2013(Date fecha_creacion, long fk_cartera) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        //Si tipo = 1, indica que modifica el saldo, el estado y el pago.
        //Si tipo = 2, indica que modifica unicamente el saldo.
        try {

            pst = con.prepareStatement("UPDATE DETALLE_CARTERAS SET FECHA = ? , FECHA_SISTEMA = SYSDATE WHERE FK_CARTERA = ?");
            pst.setDate(1, fecha_creacion);
            pst.setLong(2, fk_cartera);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarValor2013(double valor, long fk_cartera) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        //Si tipo = 1, indica que modifica el saldo, el estado y el pago.
        //Si tipo = 2, indica que modifica unicamente el saldo.
        try {

            pst = con.prepareStatement("UPDATE CARTERAS SET VALOR = ? WHERE ID_CARTERA = ?");
            pst.setDouble(1, valor);
            pst.setLong(2, fk_cartera);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listado2013() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList lista = new java.util.LinkedList();
        String referencia = "2013";
        try {
            pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE REFERENCIA = ?");
            pst.setString(1, referencia);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Cartera.Load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public void actualizarTiqueteConceptoByID(long id_tiquete_concepto, double valor) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE TIQUETE_CONCEPTOS SET VALOR = ? WHERE ID_TIQUETE_CONCEPTO = ?");
            pst.setDouble(1, valor);
            pst.setLong(2, id_tiquete_concepto);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List<Tiquete_Concepto> consultarDetalleTiqueteConceptos(long fk_detalle_tiquete) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Tiquete_Concepto> lista = new java.util.LinkedList<Tiquete_Concepto>();
        try {
            pst = con.prepareStatement("SELECT * FROM TIQUETE_CONCEPTOS WHERE FK_DETALLE_TIQUETE = ?");
            pst.setLong(1, fk_detalle_tiquete);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Tiquete_Concepto.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar detalles_concepto debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;

    }

    public void actualizarValorTiquete(long id_tiquete, double valor) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE TIQUETES SET VALOR_TOTAL = ?, VALOR_TOTAL_IVA = ?, VALOR_TOTAL_DESCUENTO = ? WHERE ID_TIQUETE = ?");
            pst.setDouble(1, valor);
            pst.setDouble(2, valor);
            pst.setDouble(3, valor);
            pst.setLong(4, id_tiquete);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarValorPago(long id_tiquete, double valor) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE PAGOS SET VALOR_TOTAL = ?, VALOR_IVA = ?, VALOR_DESCUENTO = ? WHERE FK_TIQUETE = ?");
            pst.setDouble(1, valor);
            pst.setDouble(2, valor);
            pst.setDouble(3, valor);
            pst.setLong(4, id_tiquete);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarValorDetalleTiq(long id_det_tiquete, float valor) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DETALLE_TIQUETES SET VALOR_UNITARIO = ?,VALOR_DESCUENTO = ?,VALOR_IVA = ?, VALOR_TOTAL = ? WHERE ID_DET_TIQUETE = ?");
            pst.setFloat(1, valor);
            pst.setFloat(2, valor);
            pst.setFloat(3, valor);
            pst.setFloat(4, valor);
            pst.setLong(5, id_det_tiquete);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarDetalleTiqById(long id_det_tiquete, long estado) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DETALLE_TIQUETES SET ESTADO = ? WHERE ID_DET_TIQUETE = ?");
            pst.setLong(1, estado);
            pst.setLong(2, id_det_tiquete);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarReciboExcedente(long fk_tiquete_ant, long fk_tiquete_nue, long fk_usuario, String observacion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO RECIBOS_EXCEDENTES (FK_TIQUETE_ANT,FK_TIQUETE_NUE,FK_USUARIO,FECHA_PROCESO,OBSERVACION)VALUES(?,?,?,SYSDATE,?)");
            pst.setLong(1, fk_tiquete_ant);
            pst.setLong(2, fk_tiquete_nue);
            pst.setLong(3, fk_usuario);
            pst.setString(4, observacion);
            pst.executeQuery();
        } catch (Exception e) {
            throw new SQLException("Error: " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Creadopor Jefrey padilla
    public float consultarValorDetTiquete(long id_det_tiquete) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT SUM(VALOR) FROM TIQUETE_CONCEPTOS WHERE FK_DETALLE_TIQUETE = ?");
            pst.setLong(1, id_det_tiquete);

            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    /**
     * Jose*
     */
    /**
     * ***
     */
    public LinkedList listadoreincidentes(Long fk_per, String feI, String feF) throws SQLException {
        System.out.println("Entro en el listado REINCIDENTES");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaGrupos = new LinkedList();
        try {
            System.out.println("EJECUCION PSL/QL");
            pst = con.prepareStatement("Select * from comparendos where fk_persona = ? and to_date(to_char(fecha,'DD/MM/YYYY')) between ? and ?");
            pst.setLong(1, fk_per);
            pst.setString(2, feI);
            pst.setString(3, feF);
            rst = pst.executeQuery();
            while (rst.next()) {
                System.out.println("ADD PSL/QL");
                listaGrupos.add(Comparendo.load(rst));
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! LISTAR REINCIDENTES");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
        }

        return listaGrupos;
    }

    /**
     * ***
     */
    public LinkedList listadoreincidentesbyplaca(String placa, String feI, String feF) throws SQLException {
        System.out.println("Entro en el listado REINCIDENTES");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaGrupos = new LinkedList();
        try {
            System.out.println("EJECUCION PSL/QL");
            pst = con.prepareStatement("Select * from comparendos where placa = ? and to_date(to_char(fecha,'DD/MM/YYYY')) between ? and ?");
            pst.setString(1, placa);
            pst.setString(2, feI);
            pst.setString(3, feF);
            rst = pst.executeQuery();
            while (rst.next()) {
                System.out.println("ADD PSL/QL");
                listaGrupos.add(Comparendo.load(rst));
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! LISTAR REINCIDENTES");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
        }

        return listaGrupos;
    }

    public LinkedList ListadoComparendo(String fi, String ff, Long op) throws SQLException {
        System.out.println("Entro en el listado de Rein");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaGrupos = new LinkedList();
        try {
            if (op == 1) {
                pst = con.prepareStatement("Select to_char(c.fk_persona) from comparendos c where to_date(to_char(fecha,'DD/MM/YYYY')) between ? and ? group by fk_persona");
            } else {
                pst = con.prepareStatement("Select c.placa from comparendos c where c.placa is not null and  to_date(to_char(fecha,'DD/MM/YYYY')) between ? and ? group by c.placa");
            }
            pst.setString(1, fi);
            pst.setString(2, ff);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaGrupos.add(Rein.load(rst));
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar rein ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
        }

        return listaGrupos;
    }
//.-----------------------------------------
    ////////////////////////////////////////////////////

    public void adicionarRecursoPerfil2(Recurso_Perfil recurso_perfil) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into historial_perfil_recurso (fk_perfil,fk_recurso,fecha_inicio,fecha_final) values(?,?,SYSDATE,?)");
            pst.setLong(1, recurso_perfil.getFk_perfil());
            pst.setLong(2, recurso_perfil.getFk_recurso());
            pst.setDate(3, recurso_perfil.getFecha_final());

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
    /////////////////////////////////////////////////

    public Recurso_Perfil consultarHistoRecurso(long fk_recurso, long fk_perfil)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Recurso_Perfil temp = new Recurso_Perfil();
        try {
            pst = con.prepareStatement("select * from historial_perfil_recurso g where g.fk_recurso= ? and g.fk_perfil=?");
            pst.setLong(1, fk_recurso);
            pst.setLong(2, fk_perfil);
            rst = pst.executeQuery();
            if (rst.next()) {
                temp = Recurso_Perfil.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return temp;
    }
    //////////////////////////////////////////////////////////

    public void actualizarPerfilRecurso2(long perfil, long recurso) throws SQLException {
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE historial_perfil_recurso SET FECHA_FINAL = SYSDATE WHERE FK_PERFIL = ? AND FK_RECURSO = ? AND FECHA_FINAL IS NULL ");
            pst.setLong(1, perfil);
            pst.setLong(2, recurso);
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
//y cac otar////////////////////////////////////

    public LinkedList ConsultarHistorialRecursos(long fk_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaTipos = new LinkedList();

        try {

            pst = con.prepareStatement("select f.* from historial_perfil_recurso f WHERE f.fk_perfil=?");
            pst.setLong(1, fk_usuario);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaTipos.add(Recurso_Perfil.load(rst));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

        return listaTipos;

    }

    public java.util.List listarVias() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listavenal = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * from via order by 2 desc ");
            rst = pst.executeQuery();
            while (rst.next()) {
                listavenal.add(Vias.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listavenal;
    }

    public Vias consultarVia(long fk_via) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
//            pst = con.prepareStatement("UPDATE USUARIOS SET PASSWORD = ? WHERE NOMBRE = ?");
//            pst.setString(1, password);
//            pst.setString(2, user);
//            pst.execute();
//            pst = con.prepareStatement("SELECT PASSWORD FROM USUARIOS U WHERE U.NOMBRE = ?");
//            pst.setString(1, user);
//            rst = pst.executeQuery();
//            if (rst.next()) {
//                System.out.println("Usuario :"+user+" Password :"+Encrypt.desencriptar(rst.getString(1)));
//            }

            pst = con.prepareStatement("Select * from via where id_via in (?)");
            pst.setLong(1, fk_via);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    Vias vi = Vias.load(rst);
                    //userHandler = consultarPersona(usuario.getId_persona()).getDocumento();
                    //passUserHandler = password;
                    return vi;
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }
    //**Jose**//

    // Ingeniero JOhann Gutierrez Ultima Actualizacion 18-02-2013
    public void adicionarEmpresaV(Empresa_Vinculadora empresaV) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO EMPRESAS_VINCULADORAS (FK_PERSONA,FK_VEHICULO,FECHA_INICIO,FECHA_FIN) values(?,?,?,?)");
            pst.setLong(1, empresaV.getFk_persona());
            pst.setLong(2, empresaV.getFk_vehiculo());
            pst.setDate(3, empresaV.getFecha_inicio());
            pst.setDate(4, empresaV.getFecha_fin());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Empresa_Vinculadora getEmpresaVinculadora(long id_empresaV) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM EMPRESAS_VINCULADORAS WHERE ID_EMPRESA_VINCULADORA = ?");
            pst.setLong(1, id_empresaV);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Empresa_Vinculadora.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void actualizarEmpresaV(Empresa_Vinculadora empresaV) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE EMPRESAS_VINCULADORAS SET FK_PERSONA = ?,FK_VEHICULO = ?,FECHA_INICIO = ?,FECHA_FIN = ? WHERE ID_EMPRESA_VINCULADORA = ?");
            pst.setLong(1, empresaV.getFk_persona());
            pst.setLong(2, empresaV.getFk_vehiculo());
            pst.setDate(3, empresaV.getFecha_inicio());
            pst.setDate(4, empresaV.getFecha_fin());
            pst.setLong(5, empresaV.getId_empresa_vinculadora());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List<Salarios_Minimos> consultarSalariosMinimos(int sw, long vigencia) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Salarios_Minimos> lista = new java.util.LinkedList<Salarios_Minimos>();
        try {
            if (sw == 0) {
                pst = con.prepareStatement("SELECT * FROM SALARIOS_MINIMOS ORDER BY VIGENCIA DESC");
                rst = pst.executeQuery();
                while (rst.next()) {
                    lista.add(Salarios_Minimos.load(rst));
                }
            } else {
                pst = con.prepareStatement("SELECT * FROM SALARIOS_MINIMOS WHERE VIGENCIA = ? ");
                pst.setLong(1, vigencia);
                rst = pst.executeQuery();
                while (rst.next()) {
                    lista.add(Salarios_Minimos.load(rst));
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;
    }

    public java.util.List listarInfraccionesByNumero(String codigo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listainfraccion = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM INFRACCIONES WHERE (NUMERO = ? OR ? = '1000')");
            pst.setString(1, codigo);
            pst.setString(2, codigo);
            rst = pst.executeQuery();
            while (rst.next()) {
                listainfraccion.add(Infraccion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listainfraccion;
    }

    public java.util.List listarValorInfraccionesVigencia(long fk_infraccion, int vigencia) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listainfraccion = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM VALORINFRACCION WHERE FK_INFRACCION = ? AND (TO_NUMBER(TO_CHAR(FECHA_INI,'YYYY')) = ? or ? = 0) ORDER BY FECHA_INI DESC");
            pst.setLong(1, fk_infraccion);
            pst.setInt(2, vigencia);
            pst.setInt(3, vigencia);
            rst = pst.executeQuery();
            while (rst.next()) {
                listainfraccion.add(Valor_Infraccion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listainfraccion;
    }

    public long adicionarInfraccion(Infraccion infraccion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet srk = null;
        try {
            pst = con.prepareStatement("insert into infracciones(fk_ley,numero,tipo,fk_sede,salarios_minimos,descripcion,fecha_ini) values(?,?,?,?,?,?,?)", new String[]{"ID_INFRACCION"});
            pst.setLong(1, infraccion.getFk_ley());
            pst.setString(2, infraccion.getNumero());
            pst.setInt(3, infraccion.getTipo());
            pst.setLong(4, infraccion.getFk_sede());
            pst.setInt(5, infraccion.getSalarios_minimos());
            pst.setString(6, infraccion.getDescripcion());
            pst.setDate(7, infraccion.getFecha_ini());
            pst.executeUpdate();
            srk = pst.getGeneratedKeys();
            if (srk != null) {
                if (srk.next()) {
                    return srk.getLong(1);
                }
            }
        } finally {
            if (srk != null) {
                srk.close();
            }
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    public void adicionarValorInfraccion(Valor_Infraccion valorI) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement("INSERT INTO VALORINFRACCION (FK_INFRACCION,PORCENTAJE,VALOR,FECHA_INI) VALUES(?,?,?,?)");
            pstmt.setLong(1, valorI.getFk_infraccion());
            pstmt.setInt(2, valorI.getPorcentaje());
            pstmt.setFloat(3, valorI.getValor());
            pstmt.setDate(4, valorI.getFecha_ini());
            pstmt.executeUpdate();
        } finally {
            if (pstmt != null) {
                pstmt.close();
            }
        }
    }

    public java.util.LinkedList<BSP> ConsultarBSP() throws SQLException {
        PreparedStatement pst = null;
        long cont = 0;
        ResultSet rst = null;
        java.util.LinkedList<BSP> lista = new java.util.LinkedList<BSP>();
        try {
            pst = con.prepareStatement("SELECT * FROM BSP_SOLUTIONS");
            rst = pst.executeQuery();
            while (rst.next() && cont < 30000) {
                lista.add(BSP.load(rst));
                cont = cont + 1;
                System.out.println("cont : " + cont);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;
    }

    public java.util.Vector<BSP> ConsultarBSPV() throws SQLException {
        PreparedStatement pst = null;
        long cont = 0;
        ResultSet rst = null;
        java.util.Vector<BSP> lista = new java.util.Vector<BSP>();
        try {
            pst = con.prepareStatement("SELECT * FROM BSP_SOLUTIONS");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(BSP.load(rst));
                cont = cont + 1;
                System.out.println("cont : " + cont);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;
    }

    //CREADO POR JEFREY PADILLA
    public java.util.List listarTiposdePago() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listarParametros = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * From parametros where fk_grupo = 301 order by codigo");
            rst = pst.executeQuery();
            while (rst.next()) {
                listarParametros.add(Parametro.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listarParametros;
    }

    //CREADO POR JEFREY PADILLA
    public java.util.List listarClaseConceptos() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listarParametros = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * From parametros where fk_grupo = 25 order by codigo");
            rst = pst.executeQuery();
            while (rst.next()) {
                listarParametros.add(Parametro.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listarParametros;
    }

    //CREADO BY JEFREY PADILLA
    public void adicionarBancos(String nombre) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO BANCOS (NOMBRE)VALUES(?)");
            pst.setString(1, nombre);
            pst.executeQuery();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //CREADO BY JEFREY PADILLA
    public void adicionarTipoPago(String nombre, long codigo, long fk_grupo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO PARAMETROS (NOMBRE,CODIGO,FK_GRUPO)VALUES(?,?,?)");
            pst.setString(1, nombre);
            pst.setLong(2, codigo);
            pst.setLong(3, fk_grupo);
            pst.executeQuery();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Creado por Jefrey Padilla
    public long consultarCodigoByFk_grupo(long fk_grupo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("Select max(codigo) from parametros where fk_grupo = ?");
            pst.setLong(1, fk_grupo);
            rst = pst.executeQuery();
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getLong(1);
            }

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    //Creado por Jefrey Padilla
    public long consultarConceptoAgregado() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("Select max(id_concepto) from conceptos");

            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getLong(1);
            }

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    //CREADO POR JEFREY PADILLA
    public void adicionarConcepto(Concepto concepto) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("INSERT INTO CONCEPTOS (NOMBRE,TIPO_CONCEPTO,CLASE_CONCEPTO,PRIORIDAD)VALUES(?,?,?,?)");
            pst.setString(1, concepto.getNombre());
            pst.setLong(2, concepto.getTipo());
            pst.setLong(3, concepto.getClase());
            pst.setLong(4, concepto.getPrioridad());
            pst.execute();

        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
            }
        }

    }

    //CREADO POR JEFREY PADILLA
    public void adicionarSedeConcepto(Sede_concepto sede_concepto) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;

        try {
            pst = con.prepareStatement("INSERT INTO SEDE_CONCEPTOS (FK_SEDE,FK_CONCEPTO,FECHA_INICIO)VALUES(?,?,?)");
            pst.setLong(1, sede_concepto.getFk_sede());
            pst.setLong(2, sede_concepto.getFk_concepto());
            pst.setDate(3, sede_concepto.getFecha_inicio());
            pst.executeQuery();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    //Creado por Jefrey Padilla
    public Configuracion_descuentos getConfiguracion_descuentos(long fk_sede, long fk_concepto, long fk_entidad_distribucion, int estado, long fk_tramite) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM CONFIGURACION_DESCUENTOS WHERE FK_SEDE = ? AND FK_CONCEPTO = ? AND ESTADO = ? "
                    + "AND FK_ENTIDAD_DISTRIBUCION = ? AND TO_DATE(TO_CHAR(SYSDATE,'dd/MM/yyyy')) BETWEEN TO_DATE(TO_CHAR(FECHA_INI,'dd/MM/yyyy')) "
                    + "AND TO_DATE(TO_CHAR(FECHA_FIN,'dd/MM/yyyy')) AND FK_TRAMITE = ? ");
            pst.setLong(1, fk_sede);
            pst.setLong(2, fk_concepto);
            pst.setInt(3, estado);
            pst.setLong(4, fk_entidad_distribucion);
            pst.setLong(5, fk_tramite);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Configuracion_descuentos.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    //Creado por Jefrey Padilla
    public Configuracion_descuentos getConfiguracion_descuento(long fk_sede, long fk_concepto, long fk_entidad_distribucion, int estado) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM CONFIGURACION_DESCUENTOS WHERE FK_SEDE = ? AND FK_CONCEPTO = ? AND ESTADO = ? "
                    + "AND FK_ENTIDAD_DISTRIBUCION = ? AND TO_DATE(TO_CHAR(SYSDATE,'dd/MM/yyyy')) BETWEEN TO_DATE(TO_CHAR(FECHA_INI,'dd/MM/yyyy')) "
                    + "AND TO_DATE(TO_CHAR(FECHA_FIN,'dd/MM/yyyy'))  ");
            pst.setLong(1, fk_sede);
            pst.setLong(2, fk_concepto);
            pst.setInt(3, estado);
            pst.setLong(4, fk_entidad_distribucion);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Configuracion_descuentos.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    //Creado Por Jefrey Padilla
    public void adicionarDescuentoConcepto(Configuracion_descuentos configuracion_descuentos) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO CONFIGURACION_DESCUENTOS (FK_SEDE,FK_ENTIDAD_DISTRIBUCION,FK_CONCEPTO,PORCENTAJE,FECHA_INI,"
                    + "FECHA_FIN,ESTADO,RESOLUCION,FECHA_RESOLUCION,FK_TRAMITE)VALUES(?,?,?,?,?,?,?,?,?,?)");

            pst.setLong(1, configuracion_descuentos.getFk_sede());
            pst.setLong(2, configuracion_descuentos.getFk_entidad_distribucion());
            pst.setLong(3, configuracion_descuentos.getFk_concepto());
            pst.setFloat(4, configuracion_descuentos.getPorcentaje());
            pst.setDate(5, configuracion_descuentos.getFecha_ini());
            pst.setDate(6, configuracion_descuentos.getFecha_fin());
            pst.setLong(7, configuracion_descuentos.getEstado());
            pst.setString(8, configuracion_descuentos.getResolucion());
            pst.setDate(9, configuracion_descuentos.getFecha_resolucion());
            pst.setLong(10, configuracion_descuentos.getFk_tramite());

            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    //Creado por Jefrey Padilla
    public void actualizarEstadoConfiguracionDesc(int estado, long id_conf_desc) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE CONFIGURACION_DESCUENTOS SET ESTADO = ? WHERE ID_CONFIGURACION_DESCUENTOS = ?");
            pst.setInt(1, estado);
            pst.setLong(2, id_conf_desc);

            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Creado por Jefrey Padilla
    public Configuracion_descuentos consultarConf_Decuento(long id_conf_desc)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Configuracion_descuentos configuracion_descuento = null;
        try {
            pst = con.prepareStatement("Select * From CONFIGURACION_DESCUENTOS Where id_configuracion_descuentos = ? ");
            pst.setLong(1, id_conf_desc);

            rst = pst.executeQuery();
            if (rst.next()) {
                configuracion_descuento = Configuracion_descuentos.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return configuracion_descuento;
    }

    //Creado por Jefrey Padilla
    public void adicionarHisDescuentoConc(Historial_descuento_concepto historial_descuento_concepto)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet key = null;
        try {
            pst = con.prepareStatement("INSERT INTO HISTORIAL_DESCUENTO_CONCEPTOS (FK_CONF_DESCUENTO,FK_USUARIO,FECHA_PROCESO)VALUES(?,?,?)");

            pst.setLong(1, historial_descuento_concepto.getFk_conf_descuento());
            pst.setLong(2, historial_descuento_concepto.getFk_usuario());
            pst.setDate(3, historial_descuento_concepto.getFecha_proceso());

            pst.executeQuery();

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (key != null) {
                key.close();
            }
        }

    }

    //Creado por Jefrey Padilla
    public long consultarMaxIdDescuento() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT MAX(C.ID_CONFIGURACION_DESCUENTOS) FROM CONFIGURACION_DESCUENTOS C");
            rst = pst.executeQuery();

            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    //Creado por Jefrey Padilla
    public java.util.List listarTramiteByConcepto(long fk_concepto, long fk_sede) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT * FROM VALOR_CONCEPTOS_TRAMITE WHERE FK_CONCEPTO = ? AND FK_SEDE = ? AND TO_DATE(TO_CHAR(SYSDATE,'dd/MM/yyyy')) BETWEEN TO_DATE(TO_CHAR(FECHA_INI, 'dd/MM/yyyy')) AND TO_DATE(TO_CHAR(FECHA_FIN, 'dd/MM/yyyy'))");
            pst.setLong(1, fk_concepto);
            pst.setLong(2, fk_sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Valor_conceptos_tramite.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    //Creado por Jefrey Padilla
    public void actualizarSedeTraConcepto(java.sql.Date fecha_ini, long fk_concepto, long fk_tramite, long fk_sede) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE SEDE_TRAMITE_CONCEPTOS SET FECHA_FIN = ? WHERE FK_CONCEPTO = ? AND FK_TRAMITE = ? AND FK_SEDE = ? AND FECHA_FIN IS NULL");
            pst.setDate(1, fecha_ini);
            pst.setLong(2, fk_concepto);
            pst.setLong(3, fk_tramite);
            pst.setLong(4, fk_sede);

            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Creado POr Jefrey Padilla
    public Sede_tramite_concepto consultarSedeTramiteConc(long fk_concepto, long fk_tramite, long fk_sede) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM SEDE_TRAMITE_CONCEPTOS WHERE FK_CONCEPTO = ? AND FK_TRAMITE = ? AND FK_SEDE = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, fk_concepto);
            pst.setLong(2, fk_tramite);
            pst.setLong(3, fk_sede);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Sede_tramite_concepto.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    //Creado Por Jefrey Padilla
    public void adicionarSedeTramiteConc(Sede_tramite_concepto sede_tramite_concepto) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO SEDE_TRAMITE_CONCEPTOS (FK_CONCEPTO,FECHA_INI,RESOLUCION,FECHA_RESOL,VALOR,FK_SEDE,FK_TRAMITE)VALUES(?,?,?,?,?,?,?)");

            pst.setLong(1, sede_tramite_concepto.getFk_concepto());
            pst.setDate(2, sede_tramite_concepto.getFecha_ini());
            pst.setString(3, sede_tramite_concepto.getResolucion());
            pst.setDate(4, sede_tramite_concepto.getFecha_resol());
            pst.setFloat(5, sede_tramite_concepto.getValor());
            pst.setLong(6, sede_tramite_concepto.getFk_sede());
            pst.setLong(7, sede_tramite_concepto.getFk_tramite());

            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }

    }

    //Creado por Jefrey Padilla
    public java.util.List listarConfDescVencidos() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM CONFIGURACION_DESCUENTOS WHERE ESTADO = 1 AND TO_DATE(TO_CHAR(SYSDATE, 'dd/MM/yyyy')) > TO_DATE(TO_CHAR(FECHA_FIN,'dd/MM/yyyy'))");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Configuracion_descuentos.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    //CREADO BY JEFREY PADILLA - ARCHIVOS PLANOS GENERADOS
    public java.util.List listarPlanoSimit(long id_simit_plano) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT * FROM SIMIT_PLANOS WHERE CONSECUTIVO = ?");
            pst.setLong(1, id_simit_plano);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(SimitPlano.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    //Listar Planos Simit - Creado by Jefrey Padilla
    public java.util.List listarPlanosSimit() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT * FROM SIMIT_PLANOS ORDER BY 1 DESC");
            rst = pst.executeQuery();

            while (rst.next()) {
                lista.add(SimitPlano.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    //Consultar Plano By Consecutivo - Creado by Jefrey Padilla
    public SimitPlano consultarPlanoSimitById(long id_simit_plano) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        SimitPlano simitplano = new SimitPlano();

        try {
            pst = con.prepareStatement("SELECT * FROM SIMIT_PLANOS WHERE ID_SIMIT_PLANO = ?");
            pst.setLong(1, id_simit_plano);
            rst = pst.executeQuery();

            while (rst.next()) {
                return SimitPlano.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    //Creado POr Jefrey Padilla
    public Valor_conceptos_tramite consultarValorConcTra(long fk_concepto, long fk_tramite, long fk_sede) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM VALOR_CONCEPTOS_TRAMITE WHERE FK_TRAMITE = ? AND FK_CONCEPTO = ? AND FK_SEDE = ? AND TO_DATE(TO_CHAR(SYSDATE,'dd/MM/yyyy')) BETWEEN TO_DATE(TO_CHAR(FECHA_INI,'dd/MM/yyyy')) AND TO_DATE(TO_CHAR(FECHA_FIN,'dd/MM/yyyy'))");
            pst.setLong(1, fk_tramite);
            pst.setLong(2, fk_concepto);
            pst.setLong(3, fk_sede);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Valor_conceptos_tramite.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    //Creado por Jefrey Padilla
    //**************************************************************//
    public void InsertAuditoriaComparendo(auditoria_comparendo aud) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into auditoria_comparendo (fk_comparendo,fecha_proceso,usuario,estado,fecha_inicio,fecha_fin,fk_estado) values (?,?,?,?,?,?,?)");
            pst.setLong(1, aud.getFk_comaprendo());
            pst.setTimestamp(2, aud.getFecha_proceso());
            pst.setLong(3, aud.getUsuario());
            pst.setLong(4, aud.getEstado());
            pst.setTimestamp(5, aud.getFecha_inicio());
            pst.setTimestamp(6, aud.getFecha_fin());
            pst.setLong(7, aud.getFk_estado());
            pst.execute();

        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! AC ->" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

//***//
    public void UpdateAditoriaComparendo(Timestamp fecha, long fk_comparendo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta ");

        }

        PreparedStatement pst = null;

        try {

            //String sentence = "";
            pst = con.prepareStatement("update auditoria_comparendo set fecha_fin = ?  where fk_comparendo = ? and  fecha_fin is null");
            pst.setTimestamp(1, fecha);
            pst.setLong(2, fk_comparendo);
            pst.executeUpdate();

        } catch (Exception e) {
            System.out.println("Error Update Auditoria Comparendo -->" + e);
            throw new SQLException("Error actualizando auditoria comparendo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listarAC(long usuario, long fk_comparendo, String fi, String ff) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listavenal = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * from Auditoria_Comparendo ac where (ac.usuario = ? or ? =0) and (ac.fk_comparendo = ? or ? = 0) and to_date(to_char(ac.fecha_inicio,'DD/MM/YYYY')) between ? and ? order by 1 asc");
            pst.setLong(1, usuario);
            pst.setLong(2, usuario);
            pst.setLong(3, fk_comparendo);
            pst.setLong(4, fk_comparendo);
            pst.setString(5, fi);
            pst.setString(6, ff);
            rst = pst.executeQuery();
            while (rst.next()) {
                listavenal.add(auditoria_comparendo.Load(rst));
            }
        } catch (Exception e) {
            System.out.println("Error Update Auditoria Comparendo -->" + e);
            throw new SQLException("Error actualizando auditoria comparendo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listavenal;
    }
    //*ing johann Gutierrez *///

    public Radicacion consultarRadicacionPlacaTramite(String numeroR, String placa, int fk_tramite) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Radicacion radicacion = null;
        try {
            pst = con.prepareStatement("SELECT R.* FROM FORMULARIOS F,RADICACIONES R WHERE R.ID_RADICACION = F.FK_RADICACION "
                    + " AND R.NUMERO = ? AND F.PLACA = ? AND F.FK_TRAMITE = ? AND R.ESTADO IN(4,5)");
            pst.setString(1, numeroR);
            pst.setString(2, placa);
            pst.setInt(3, fk_tramite);
            rst = pst.executeQuery();
            if (rst.next()) {
                radicacion = Radicacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return radicacion;
    }

    public void adicionarActoAdministrativo(Actos_Administrativos actosA) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO ACTOS_ADMINISTRATIVOS (NUMERO,FECHA,FECHA_PROCESO,ESTADO,FK_USUARIO,TIPO,TRAMITE,"
                    + "MODIFICACION,PLACA,FK_VEHICULO,OBSERVACIONES) values(?,?,?,?,?,?,?,?,?,?,?)");
            pst.setString(1, actosA.getNUMERO());
            pst.setDate(2, actosA.getFECHA());
            pst.setDate(3, actosA.getFECHA_PROCESO());
            pst.setInt(4, actosA.getESTADO());
            pst.setLong(5, actosA.getFK_USUARIO());
            pst.setInt(6, actosA.getTIPO());
            pst.setString(7, actosA.getTRAMITE());
            pst.setString(8, actosA.getMODIFICACION());
            pst.setString(9, actosA.getPLACA());
            pst.setLong(10, actosA.getFK_VEHICULO());
            pst.setString(11, actosA.getOBSERVACIONES());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Creado por Jefrey Padilla
    public UsuarioRunt consultarUsuarioRunt2(long id_usuario)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM RUNT_USUARIOS WHERE FK_USUARIO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, id_usuario);
            rst = pst.executeQuery();
            if (rst.next()) {
                return UsuarioRunt.load(rst);
            }
        } catch (Exception ex) {
            System.out.println("consultarUsuarioRunt2");
            ex.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void editarPasswordRunt(String pass, long fk_usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE RUNT_USUARIOS SET PASSWORD = ? WHERE fk_usuario= ? AND FECHA_FIN IS NULL");
            pst.setString(1, pass);
            pst.setLong(2, fk_usuario);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //CREADO ANDRES DONADO
    public DatosVehiculo consultarDatosVehiculo2(long id_vehiculo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM DATOS_VEHICULOS WHERE PARAM_CODIGO = 11 AND SUB_GRUPO_CODIGO = 40 AND FK_VEHICULO = ?");
            pst.setLong(1, id_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return DatosVehiculo.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public void CargarImpuestosCartera(String placa, int vig, int periodo, int servicio, int estado, int usuario, String ano) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO CARTERAS(FK_VEHICULO,FK_SEDE,TIPO,REFERENCIA,FECHA_CREACION,FECHA_INGRESO,VALOR,SALDO,FECHA_SALDO,"
                    + "ESTADO_CARTERA,FECHA_ESTADO,ESTADO_VIGENCIA,FECHA_ESTADO_VIGENCIA ,FK_USUARIO,FK_CONCEPTO,PERIODO)"
                    + " SELECT V.ID_VEHICULO,234,2,D.VIGENCIA, DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)),SYSDATE,SUM(D.VALOR),SUM(D.VALOR),"
                    + "DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)),1, "
                    + "DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)),NVL(DECODE(D.VIGENCIA,'" + ano + "',1)," + estado + "),SYSDATE," + usuario + ",NVL(DECODE(D.VIGENCIA,'" + ano + "',"
                    + "DECODE(D.TIPO,1,34,2,35,3,32,4,33)),D.CONCEPTO)," + periodo + " FROM VEHICULOS V,DETALLES2 D WHERE PLACA = '" + placa + "'AND D.TIPO = " + servicio + " AND D.VIGENCIA BETWEEN " + vig + " AND " + vig + " "
                    + "GROUP BY V.ID_VEHICULO,234,2,D.VIGENCIA,"
                    + "DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)), SYSDATE,DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)),1, "
                    + "DECODE(" + periodo + ",1,'01/05/'||D.VIGENCIA,2,'01/09/'||D.VIGENCIA,3,'01/01/'||(D.VIGENCIA+1)),NVL(DECODE(D.VIGENCIA,'" + ano + "',1),3), SYSDATE,1,NVL(DECODE(D.VIGENCIA,'" + ano + "',DECODE(D.TIPO,1,34,2,35,3,32,4,33)),D.CONCEPTO)," + periodo);
            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void CargarImpuestosDetalleCartera(String placa, int vig, int servicio, int usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO DETALLE_CARTERAS(FK_CARTERA,FK_CONCEPTO,REFERENCIA,FECHA,FECHA_SISTEMA,"
                    + "FK_USUARIO,ESTADO,VALOR)SELECT C.ID_CARTERA,D.CONCEPTO,D.VIGENCIA,C.FECHA_CREACION,SYSDATE,?,1,D.VALOR "
                    + "FROM VEHICULOS V,DETALLES2 D,CARTERAS C WHERE PLACA = ? AND D.TIPO = ? "
                    + " AND D.VIGENCIA BETWEEN ? AND ? AND V.ID_VEHICULO = C.FK_VEHICULO AND C.REFERENCIA = D.VIGENCIA");
            pst.setInt(1, usuario);
            pst.setString(2, placa);
            pst.setInt(3, servicio);
            pst.setInt(4, vig);
            pst.setInt(5, vig);
            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void AdicionarCargueImpuesto(String obser, int usuario, long vehi) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO IMPUESTOS_CARGADOS (OBSERVACION,FK_USUARIO,FECHA_PROCESO,FK_VEHICULO) VALUES (?,?,SYSDATE,?)");
            pst.setString(1, obser);
            pst.setInt(2, usuario);
            pst.setLong(3, vehi);
            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Cartera consultarCarteraImp(long id_vehiculo, String referencia) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {

            pst = con.prepareStatement("select * from Carteras where FK_VEHICULO = ? and referencia = ?");
            pst.setLong(1, id_vehiculo);
            pst.setString(2, referencia);
            rst = pst.executeQuery();

            while (rst.next()) {

                return Cartera.Load(rst);

            }
        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha consultar el concepto ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }

    public java.util.List consultarPagosByReferencia(String factura) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM TIQUETES WHERE referencia = ?");
            pst.setString(1, factura);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Tiquete.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lista;

    }

//** 31/05/2013 **//
    public java.util.List listaActos(long fk_cartera) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * from actos_administrativos at where at.fk_vehiculo=" + fk_cartera + " order by 1 asc");

            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Actos_Administrativos.load(rst));
            }
        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! ACTOS");
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

//** 31/05/2013 **//
    public void insert_Pagos_externo(Pagos_externos pe) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into pagos_externos t (t.referencia,t.fk_vehiculo,t.aplicado,t.fecha_pago,t.fecha_proceso) values (?,?,?,?,Sysdate)");
            pst.setString(1, pe.getReferencia());
            pst.setLong(2, pe.getFk_vehiculo());
            pst.setLong(3, pe.getAplico());
            pst.setDate(4, pe.getFecha_inicio());

            pst.execute();
        } catch (Exception e) {
            throw new SQLException("Error al adicionar el Pago_externo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public java.util.List listado_Pago_ex(String fecha) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList lista = new java.util.LinkedList();
        String referencia = "2013";
        try {
            pst = con.prepareStatement("Select * from pagos_externos t where to_char(t.fecha_proceso,'DD/MM/YYYY')=?");
            pst.setString(1, fecha);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Pagos_externos.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("Error al adicionar el Pago_externo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

//Creado por jefrey Padilla
    public java.util.List listasDetalleTiquetesByFactura(long fk_tiquete, int estado) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM DETALLE_TIQUETES WHERE FK_TIQUETE = ? AND ESTADO = ? AND FK_TRAMITE IS NOT NULL");
            pst.setLong(1, fk_tiquete);
            pst.setInt(2, estado);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Detalle_Tiquete.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    //Creado por Jefrey Padilla
    public void adicionarVenalPreasignacion(Venal_preasignacion venal) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO VENAL_PREASIGNACION (FK_VENAL,FK_USUARIO,FECHA,FECHA_PROCESO,FECHA_INI) values(?,?,TO_DATE(TO_CHAR(SYSDATE,'dd/MM/yyyy')),SYSDATE,TO_DATE(TO_CHAR(SYSDATE,'dd/MM/yyyy')))");
            pst.setLong(1, venal.getFk_venal());
            pst.setLong(2, venal.getFk_usuario());

            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Creado por Jefrey Padilla
    public Venal_preasignacion consultarVenalPreasignacionByVenal(long fk_venal) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        Venal_preasignacion venalP = null;
        try {
            pst = con.prepareStatement("select * from venal_preasignacion  where  fk_venal = ? and fecha_fin is null");
            pst.setLong(1, fk_venal);

            rst = pst.executeQuery();
            if (rst.next()) {
                venalP = Venal_preasignacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return venalP;

    }

    //Creado por Jefrey Padilla
    public java.util.List listarVenalPreasignacion(long fk_venal) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listavenal = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM VENAL_PREASIGNACION WHERE FK_VENAL = ?");
            pst.setLong(1, fk_venal);

            rst = pst.executeQuery();
            while (rst.next()) {
                listavenal.add(Venal_preasignacion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listavenal;
    }

    //Creado por Jefrey Padilla
    public void actualizarVenalPreasignacion(Venal_preasignacion venal)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {

            pst = con.prepareStatement("UPDATE VENAL_PREASIGNACION SET FECHA_FIN = SYSDATE WHERE FK_VENAL = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, venal.getFk_venal());

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //Creado por Jefrey Padilla
    public Banco consultarBancosByNombre(String nombre)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Banco banco = null;
        try {
            pst = con.prepareStatement("SELECT * FROM BANCOS WHERE NOMBRE LIKE ?");
            pst.setString(1, "'%" + nombre + "%'");
            rst = pst.executeQuery();
            if (rst.next()) {
                banco = Banco.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return banco;
    }

    public Departamento consultarDepartamentosById(long id_depto)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM DEPARTAMENTOS WHERE ID_DEPARTAMENTO = ?");
            pst.setLong(1, id_depto);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Departamento.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    /**
     * *******************************************
     * @param id_vehiculo
     */
    public void UpdatePropietario(long id_vehiculo, long Propietario, long Persona)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update propietarios p set p.fk_persona=? where p.fk_vehiculo=? and fk_persona = ?");
            pst.setLong(1, Propietario);
            pst.setLong(2, id_vehiculo);
            pst.setLong(3, Persona);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    /**
     * **********************
     */
    ///***********************///update propietarios p set p.fk_persona=? where p.fk_vehiculo=?
    public void UpdateLineas(long id_vehiculo, long linea)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update Vehiculos Vi set vi.fk_linea= ? where vi.id_vehiculo=?");
            pst.setLong(1, linea);
            pst.setLong(2, id_vehiculo);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void UpdateCilindraje(long id_vehiculo, long cilind)
            throws SQLException {
        // verificar si existe una conexion
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("update datos_vehiculos dv set dv.valor = ? where dv.grupo_codigo = 2 and dv.param_codigo = 11 and dv.sub_grupo_codigo = 40 and dv.fk_vehiculo=?");
            pst.setLong(1, cilind);
            pst.setLong(2, id_vehiculo);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

//FINANCIACION CARTERA IMP
    public void adicionarFinanciacionCartera_Imp(Financiacion_Cartera financiacion_cartera)
            /*
             * Author     : Jorge Lopez
             */
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO FINANCIACION_CARTERA_IMP(FK_FINANCIACION,FK_CARTERA) VALUES(?,?)");
            pst.setLong(1, financiacion_cartera.getFk_financiacion());
            pst.setLong(2, financiacion_cartera.getFk_cartera());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public long adicionarFinanciacion_Imp(Financiacion_Imp financiacion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet srk = null;
        try {
            pst = con.prepareStatement("insert into financiaciones_imp (fk_usuario,fecha,numero,"
                    + "valor,cuotas,cuota_inicial,periodo_gracia,estado,fecha_proceso,observacion,fk_tipo_financiacion,"
                    + "fk_persona,fk_sede"
                    + "" + (financiacion.getFk_vehiculo() != 0 ? ",fk_vehiculo" : "") + ")"
                    + " values(?,?,?,?,?,?,?,?,?,?,?,?,?" + (financiacion.getFk_vehiculo() != 0 ? ",?" : "") + ")", new String[]{"ID_FINANCIACION_IMP"});

            pst.setLong(1, financiacion.getFk_usuario());
            pst.setDate(2, financiacion.getFecha());
            pst.setString(3, financiacion.getNumero());
            pst.setFloat(4, financiacion.getValor());
            pst.setInt(5, financiacion.getCuotas());
            pst.setFloat(6, financiacion.getCuota_inicial());
            pst.setInt(7, financiacion.getPeriodo_gracia());
            pst.setInt(8, financiacion.getEstado());
            pst.setTimestamp(9, financiacion.getFecha_proceso());
            pst.setString(10, financiacion.getObservacion());
            pst.setLong(11, financiacion.getFk_tipo_financiacion());
            pst.setLong(12, financiacion.getFk_persona());
            pst.setLong(13, financiacion.getFk_sede());

            if (financiacion.getFk_vehiculo() != 0) {
                pst.setLong(14, financiacion.getFk_vehiculo());
            }
            pst.executeUpdate();
            srk = pst.getGeneratedKeys();
            if (srk != null) {
                if (srk.next()) {
                    return srk.getLong(1);
                }
            }

        } finally {
            if (srk != null) {
                srk.close();
            }
            if (pst != null) {
                pst.close();
            }
        }
        return 0;
    }

    public void adicionarDetalleFinanciacion_IMP(Detalle_Financiacion_Imp detalle_financiacion_imp)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO DETALLES_FINANCIACIONES_IMP(FK_FINANCIACION,FK_CARTERA,CUOTA,VALOR,SALDO,ESTADO,INTERESES,FECHA_PAGO,FECHA_PROCESO) VALUES(?,?,?,?,?,?,?,?,?)");
            pst.setLong(1, detalle_financiacion_imp.getFk_financiacion());
            pst.setLong(2, detalle_financiacion_imp.getFk_cartera());
            pst.setInt(3, detalle_financiacion_imp.getCuota());
            pst.setFloat(4, detalle_financiacion_imp.getValor());
            pst.setFloat(5, detalle_financiacion_imp.getSaldo());
            pst.setInt(6, detalle_financiacion_imp.getEstado());
            pst.setFloat(7, detalle_financiacion_imp.getIntereses());
            pst.setDate(8, detalle_financiacion_imp.getFecha_pago());
            pst.setTimestamp(9, detalle_financiacion_imp.getFecha_proceso());
            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Financiacion_Imp consultarFinanciacion_Imp(long idFinanciacion) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM FINANCIACIONES_IMP WHERE ID_FINANCIACION_IMP = ?");
            pst.setLong(1, idFinanciacion);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Financiacion_Imp.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }

    public Financiacion_Imp consultarFinanciacion_Imp(String numero) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM FINANCIACIONES_IMP WHERE NUMERO = ?");
            pst.setString(1, numero);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Financiacion_Imp.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }

    public java.util.List<Detalle_Financiacion_Imp> consultarDetalleFinanciacion_Imp(long id_financiacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Detalle_Financiacion_Imp> lista = new java.util.LinkedList<Detalle_Financiacion_Imp>();
        try {
            pst = con.prepareStatement("SELECT * FROM DETALLES_FINANCIACIONES_IMP WHERE FK_FINANCIACION = ? ORDER BY CUOTA");
            pst.setLong(1, id_financiacion);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Detalle_Financiacion_Imp.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;

    }

    public java.util.List<Financiacion_Cartera_Imp> consultarCarterasFinanciadas_Imp(long fkFinanciacion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Financiacion_Cartera_Imp> lista = new java.util.LinkedList<Financiacion_Cartera_Imp>();
        try {
            pst = con.prepareStatement("SELECT * FROM FINANCIACION_CARTERA_IMP WHERE FK_FINANCIACION = ?");
            pst.setLong(1, fkFinanciacion);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Financiacion_Cartera_Imp.Load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List<Financiacion_Imp> consultarFinanciacionesFechas_Imp(String fechaI, String fechaF) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<Financiacion_Imp> financiaciones_imp = new java.util.LinkedList<Financiacion_Imp>();
        try {
            pst = con.prepareStatement("SELECT * FROM FINANCIACIONES_IMP WHERE (FECHA BETWEEN to_date(?,'dd/MM/yyyy') and to_date(?,'dd/MM/yyyy')) ORDER BY ID_FINANCIACION_IMP");
            pst.setString(1, fechaI);
            pst.setString(2, fechaF);
            rst = pst.executeQuery();
            while (rst.next()) {
                financiaciones_imp.add(Financiacion_Imp.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return financiaciones_imp;
    }

    public Financiacion_Imp consultarFinanciacion_Imp2(long idVehiculo) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM FINANCIACIONES_IMP WHERE FK_VEHICULO = ?");
            pst.setLong(1, idVehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Financiacion_Imp.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }

    public Tipo_Financiacion consultarTipoDeFinanciacion2ByTotal(float total) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM TIPO_FINANCIACION WHERE SALDO_DESDE <= ? AND SALDO_HASTA >= ?");
            pst.setFloat(1, total);
            pst.setFloat(2, total);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Tipo_Financiacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return null;

    }

    public Propietario consultarPropietarioVehiculo(long id_vehiculo) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM PROPIETARIOS WHERE FECHA_FIN IS NULL AND FK_VEHICULO = ?");
            pst.setLong(1, id_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Propietario.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;

    }

//FIN FINANCIACION IMPUESTOS
//INICIO DESCUENTOS
    public void InsertarValorDescuento(long idveh, long idcart, String vigencia, long valdescontado, long estado_descu, long valinteres, long id_usuario, String numresol, String fecharesol, Date fecha_proceso, long fk_concepto) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO DESCUENTOS_INTERESES (FK_VEHICULO,FK_CARTERA,ESTADO_DESCUENTO,VIGENCIA,VALOR_INTERES,VALOR_DESCONTADO,FK_USUARIO,RESOLUCION,FECHA_RESOLUCION,FECHA_PROCESO,FK_CONCEPTO) VALUES (?,?,?,?,?,?,?,?,?,?,?)");
            pst.setLong(1, idveh);
            pst.setLong(2, idcart);
            pst.setLong(3, estado_descu);
            pst.setString(4, vigencia);
            pst.setLong(5, valinteres);
            pst.setLong(6, valdescontado);
            pst.setLong(7, id_usuario);
            pst.setString(8, numresol);
            pst.setString(9, fecharesol);
            pst.setDate(10, fecha_proceso);
            pst.setLong(11, fk_concepto);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Detalle_Cartera consultarDetalleCartera(long id_cartera, long fk_concepto) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {

            pst = con.prepareStatement("select * from Detalle_carteras where fk_cartera = ? and fk_concepto=?");
            pst.setLong(1, id_cartera);
            pst.setLong(2, fk_concepto);
            rst = pst.executeQuery();

            while (rst.next()) {

                return Detalle_Cartera.load(rst);

            }
        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha consultar el concepto ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }

    public java.util.List consultarCarteraVehiculo(long fk_vehiculo)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("Select * From carteras Where estado_cartera=1 and fk_vehiculo = ?");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Cartera.Load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lista;

    }

    public long consultarDescuentoInternacion(long fk_vehiculo, long estado) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        long id_descuentos_internacion = 0;
        try {
            pst = con.prepareStatement("SELECT ID_DESCUENTOS_INTERESES FROM DESCUENTOS_INTERESES WHERE FK_VEHICULO=? AND ESTADO_DESCUENTO=?");
            pst.setLong(1, fk_vehiculo);
            pst.setLong(2, estado);
            rst = pst.executeQuery();
            if (rst.next()) {
                id_descuentos_internacion = rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return id_descuentos_internacion;

    }

    public void eliminarDescuentoInternacionDC(long fk_cartera, String referencia, long fk_concepto) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("DELETE FROM DETALLE_CARTERAS WHERE FK_CARTERA = ? AND FK_CONCEPTO IN(?) AND REFERENCIA = ?");
            pst.setLong(1, fk_cartera);
            pst.setLong(2, fk_concepto);
            pst.setString(3, referencia);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Detalle_Cartera consultarDetalleCarteraExtempo(long id_cartera) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {

            pst = con.prepareStatement("select * from Detalle_carteras where fk_cartera = ? and fk_concepto in (87,257,258,267,268,269,270,271,272,273,274,275)");
            pst.setLong(1, id_cartera);
            rst = pst.executeQuery();

            while (rst.next()) {

                return Detalle_Cartera.load(rst);

            }
        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha consultar el concepto ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;

    }
//FIN DESCUENTOS
//**17/09/2013**//

    public void updateDistribucionINtereces(long fk_pago) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            con.setAutoCommit(false);
            pst = con.prepareStatement("update distribucion d set d.valor = (Select sum(valor) from detalle_carteras where fk_pago in (?) and fk_concepto in (249,1093)), d.valor_base = (Select sum(valor) from detalle_carteras where fk_pago in (?) and fk_concepto in (249,1093)) where d.fk_concepto_distribucion = 249  and d.fk_pago=?");
            pst.setLong(1, fk_pago);
            pst.setLong(2, fk_pago);
            pst.setLong(3, fk_pago);
            pst.executeUpdate();
            getCon().commit();

            /**
             * ******************************************
             */
//            pst = con.prepareStatement("update distribucion d set d.valor = 10800, d.valor_base = 10800 where d.fk_concepto_distribucion = 87  and d.fk_pago=?");
//            pst.setLong(1, fk_pago);
//            pst.executeUpdate();
//            getCon().commit();
            /**
             * ******************************************
             */
//            pst = con.prepareStatement("update distribucion d set d.valor = 4000, d.valor_base = 4000 where d.fk_concepto_distribucion in(257,258) and d.fk_pago=?");
//            pst.setLong(1, fk_pago);
//            pst.executeUpdate();
//            getCon().commit();
        } catch (Exception e) {
            throw new SQLException("No se pudo actualizar la fecha del Usuario" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    /**
     *
     */
    public java.util.List listarPagosTaquilla(long fk_taquilla, long op) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listaTiquete = new java.util.LinkedList();
        try {

            pst = con.prepareStatement("Select * From pagos  where fk_taquilla=? order by numero_factura");
            pst.setLong(1, fk_taquilla);
            rst = pst.executeQuery();

            while (rst.next()) {
                listaTiquete.add(Pago.load(rst));
            }
        } catch (Exception e) {
            throw new SQLException("No se pudo listar pagos taquilla" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaTiquete;
    }
//**17/09/2013**//

    //Creado by Jefrey Padilla 04/09/2013
    public VehiculosWS consultarVehiculoWS(String placa) throws Exception {
        PreparedStatement pst = null;
        ResultSet rst = null;
        VehiculosWS vehiculosws = null;
        CarterasWS cartera = null;
        StatusService statusService = null;

        try {
            pst = con.prepareStatement("SELECT V.PLACA,NVL((SELECT M.NOMBRE FROM MARCAS M,LINEAS L WHERE M.CODIGO = L.FK_MARCA AND L.ID_LINEA = V.FK_LINEA),'') MARCA,NVL((SELECT L.NOMBRE FROM LINEAS L WHERE L.ID_LINEA = V.FK_LINEA),'') LINEA,NVL((SELECT P.NOMBRE FROM PARAMETROS P WHERE P.FK_GRUPO = 1 AND P.CODIGO = V.CLASE_VEHICULO),'') CLASE,NVL((SELECT P.NOMBRE FROM PARAMETROS P WHERE P.FK_GRUPO = 3 AND P.CODIGO = V.SERVICIO),'') SERVICIO,V.MODELO,NVL((SELECT P.NOMBRE FROM PARAMETROS P WHERE P.FK_GRUPO = 66 AND P.CODIGO = V.ESTADO),'') ESTADO,V.ID_VEHICULO FROM VEHICULOS V WHERE PLACA = ?");
            pst.setString(1, placa);

            rst = pst.executeQuery();
            if (rst.next()) {
                vehiculosws = VehiculosWS.load(rst);
            } else {
                statusService = new StatusService();
                statusService.setStatusCode(2);
                statusService.setSeverity(1);
                statusService.setStatusMensaje("El vehículo no se encuentra registrado");
                vehiculosws.setStatusService(statusService);
                return vehiculosws;
            }

            String fecha_hoy = new java.text.SimpleDateFormat("dd/MM/yyyy").format(new java.util.Date());
            java.sql.Date fechaPago = new java.sql.Date(new java.text.SimpleDateFormat("dd/MM/yyyy").parse(fecha_hoy).getTime());
            /*//                SetIpCivitrans("WEB SERVICE");
//                SetUsuarioApp("INTERNET");
            boolean 
             */

//                SetIpCivitrans("WEB SERVICE");
//                SetUsuarioApp("INTERNET");
            //swActualizo = actualizarInteresesCostasVehiculos(vehiculosws.getReferencia(), 2);
            boolean swActualizo = actualizarInteresesCostasVehiculos(vehiculosws.getReferencia(), 2, fechaPago);

            if (!swActualizo) {
                statusService = new StatusService();
                statusService.setStatusCode(4);
                statusService.setSeverity(3);
                statusService.setStatusMensaje("Error al momento de calcular intereses, intente nuevamente");
                vehiculosws.setStatusService(statusService);
                throw new Exception("Ocurrio un error al actualizar Intereses");
            }

            vehiculosws.setCarteraWS(consultarCarteraWS(placa));
            vehiculosws.setPropietario(consultarPropietarios(placa));

            statusService = new StatusService();
            statusService.setStatusCode(1);
            statusService.setSeverity(0);
            statusService.setStatusMensaje("Consulta realizada con éxito");
            vehiculosws.setStatusService(statusService);

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return vehiculosws;
    }

    //Creado by Jefrey Padilla
    public java.util.List<CarterasWS> consultarCarteraWS(String placa)
            throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<CarterasWS> list = new java.util.LinkedList<CarterasWS>();

        try {
            pst = con.prepareStatement("SELECT CO.NOMBRE,C.REFERENCIA,NVL((SELECT SUM(D.VALOR) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO NOT IN(249,276,83,84,85,86,87,257,258) AND D.ESTADO = 1 AND D.VALOR >= 0),0) VALOR,NVL((SELECT SUM(D.VALOR) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO IN(83,84,85,86,87,257,258) AND D.ESTADO = 1),0) EXTEMPORANEIDAD,NVL((SELECT SUM(D.VALOR) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO IN(249) AND D.ESTADO = 1),0) INTERESES,NVL((SELECT SUM(D.VALOR) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO  IN(276) AND D.ESTADO = 1),0) COSTAS,C.SALDO,C.PERIODO FROM CARTERAS C,CONCEPTOS CO,VEHICULOS V WHERE V.PLACA = ? AND V.ID_VEHICULO = C.FK_VEHICULO AND C.ESTADO_CARTERA = 1 AND C.TIPO = 2 AND CO.ID_CONCEPTO = C.FK_CONCEPTO ORDER BY C.REFERENCIA");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            String fecha_hoy = new java.text.SimpleDateFormat("dd/MM/yyyy").format(new java.util.Date());
            Conf_Descuento cd = null;// new Conf_Descuento().getCnf_des(this, 1, 249, fecha_hoy);
            while (rst.next()) {
                CarterasWS cartera = CarterasWS.load(rst);
                if (cd != null) { // Existen un descuento para el concepto
                    if (Integer.parseInt(cartera.getVigencia()) >= Integer.parseInt(cd.getVig_inicial()) && Integer.parseInt(cartera.getVigencia()) <= Integer.parseInt(cd.getVig_final())) {
                        // La vigencia se encuentra dentro del rango de calculo de los descuentos
                        int interesD = (int) ((cartera.getInteres() * cd.getPorcentaje()) / 100);
                        float descuento = cartera.getInteres() - interesD;
                        cartera.setInteres(descuento);
                    }
                } else {
                    new Conf_Descuento().eliminarDescuento(this, consultarVehiculo(placa).getId_vehiculo(), consultarUsuario(412), 1);
                }
                list.add(cartera);

            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return list;

    }

    //Creado by Jefrey Padilla descuentos
/*
    public java.util.List<CarterasWS> consultarCarteraWS(String placa)
    throws SQLException {

    PreparedStatement pst = null;
    ResultSet rst = null;
    java.util.List<CarterasWS> list = new java.util.LinkedList<CarterasWS>();

    try {
    pst = con.prepareStatement("SELECT CO.NOMBRE,C.REFERENCIA,NVL((SELECT SUM(D.VALOR) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO NOT IN(249,276,83,84,85,86,87,257,258) AND D.ESTADO = 1 AND D.VALOR >= 0),0) VALOR, NVL((SELECT SUM(D.VALOR) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO IN(83,84,85,86,87,257,258) AND D.ESTADO = 1),0) EXTEMPORANEIDAD, NVL(Round((SELECT SUM(D.VALOR*0.8) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO IN(83,84,85,86,87,257,258) AND D.ESTADO = 1 AND C.REFERENCIA<='2010')),0) DESCUENTO_EXTEMPORANEIDAD, NVL((SELECT SUM(D.VALOR) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO IN(249) AND D.ESTADO = 1),0) INTERESES, NVL(Round((SELECT SUM(D.VALOR*0.8) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO IN(249) AND D.ESTADO = 1 AND C.REFERENCIA <='2010')),0) DESCUENTO_INTERESES, NVL((SELECT SUM(D.VALOR) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO  IN(276) AND D.ESTADO = 1),0) COSTAS, Round(C.SALDO - NVL((SELECT SUM(D.VALOR*0.8) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO IN(83,84,85,86,87,257,258) AND D.ESTADO = 1 AND C.REFERENCIA<='2010'),0) - NVL((SELECT SUM(D.VALOR*0.8) FROM DETALLE_CARTERAS D WHERE D.FK_CARTERA = C.ID_CARTERA AND D.FK_CONCEPTO IN(249) AND D.ESTADO = 1 AND C.REFERENCIA <='2010'),0)) SALDO, C.PERIODO FROM CARTERAS C,CONCEPTOS CO,VEHICULOS V WHERE V.PLACA = '?' AND V.ID_VEHICULO = C.FK_VEHICULO AND C.ESTADO_CARTERA = 1 AND C.TIPO = 2 AND CO.ID_CONCEPTO = C.FK_CONCEPTO ORDER BY C.REFERENCIA");
    pst.setString(1, placa);
    rst = pst.executeQuery();

    while (rst.next()) {
    list.add(CarterasWS.load(rst));
    }
    } finally {
    if (pst != null) {
    pst.close();
    }
    if (rst != null) {
    rst.close();
    }
    }

    return list;

    }
     */
    //Creado by Jefrey Padilla
    public java.util.List<String> consultarPropietarios(String placa) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<String> lista = new java.util.LinkedList<String>();

        try {
            pst = con.prepareStatement("SELECT S.NOMBRE_1||' '||S.APELLIDO_1||' '||S.APELLIDO_2 FROM PERSONAS S,PROPIETARIOS P,VEHICULOS V WHERE S.ID_PERSONA = P.FK_PERSONA AND P.FK_VEHICULO = V.ID_VEHICULO AND P.FECHA_FIN IS NULL AND V.PLACA = ?");
            pst.setString(1, placa);
            rst = pst.executeQuery();

            while (rst.next()) {
                lista.add(rst.getString(1));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lista;

    }

    public void modificarcomaprendo(long id, Comparendo comp) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;
        System.out.println("modificar");

        try {

            pst = con.prepareStatement("update comparendos p set p.fk_persona=?,p.fk_usuario_organismo=?,p.fk_infraccion=?,p.fk_agente=?, p.numero=?,p.fecha=?,p.lugar=?,p.placa=?,p.clase=?,p.servicio=?,p.tipo_infractor=?,p.licencia_transito=?,p.observaciones=?, p.fuga=?,p.accidente=?,p.inmovilizacion=?,p.polca=?,p.firmado=?,p.licencia_conduccion=?,p.parqueadero=?,p.fk_via=? where p.id_comparendo=?");
            System.out.println(" " + comp.getFk_persona() + " " + comp.getFk_usuario_organismo() + " " + comp.getFk_infraccion() + " " + comp.getFk_agente() + " " + comp.getNumero() + " " + comp.getFecha() + " " + comp.getLugar() + " " + comp.getPlaca() + " " + comp.getClase() + " " + comp.getServicio() + " " + comp.getTipo_infractor() + " " + comp.getLicencia_transito() + " " + comp.getObservaciones() + " " + comp.getFuga() + " " + comp.getAccidente() + " " + comp.getInmovilizacion() + " " + comp.getPolca() + " " + comp.getFirmado() + " " + comp.getLicencia_conduccion() + " " + comp.getFk_parqueadero() + " " + comp.getfk_via() + " " + id);
            pst.setLong(1, comp.getFk_persona());
            pst.setLong(2, comp.getFk_usuario_organismo());
            pst.setLong(3, comp.getFk_infraccion());
            pst.setLong(4, comp.getFk_agente());
            pst.setString(5, comp.getNumero());
            pst.setTimestamp(6, comp.getFecha());
            pst.setString(7, comp.getLugar());
            pst.setString(8, comp.getPlaca());
            pst.setInt(9, comp.getClase());
            pst.setInt(10, comp.getServicio());
            pst.setInt(11, comp.getTipo_infractor());
            pst.setString(12, comp.getLicencia_transito());
            pst.setString(13, comp.getObservaciones());
            pst.setInt(14, comp.getFuga());
            pst.setInt(15, comp.getAccidente());
            pst.setInt(16, comp.getInmovilizacion());
            pst.setInt(17, comp.getPolca());
            pst.setInt(18, comp.getFirmado());
            pst.setString(19, comp.getLicencia_conduccion());
            pst.setLong(20, comp.getFk_parqueadero());
            pst.setLong(21, comp.getfk_via());
            pst.setLong(22, id);

            pst.execute();

        } catch (Exception e) {
            //throw new SQLException(" Error! no se ha podido modificar el comparendo ");
            e.printStackTrace();
            //System.out.println(e);

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }

    }
//******************************//

    public void InsertDetCompPublico(Comparendo_publico Compp) throws SQLException {
        System.out.println("Entro en el registro del grupo");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("insert into DETALLE_COMPARENDO_PUBLICO "
                    + " (radio_de_accion,Modalidad_De_Transporte,Transporte_De_Pasajeros,Tipo_Especial) values(?,?,?,?)");
            pst.setLong(1, Compp.getRadio_accion());
            pst.setLong(2, Compp.getModalidad());
            pst.setLong(3, Compp.getTransporte_pasajeros());
            pst.setLong(4, Compp.getEspecial());
            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido registrar el grupo ");
        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
    }

    //**//
    //**********************//
    public void InsertSolicitudes_audiencia(Solicitud_Audiencia aud) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into solicitudes_audiencia (consecutivo,fk_comparendo,radicacion,fk_usuario,fk_persona,fecha,estado) values (?,?,?,?,?,?,?)");
            pst.setString(1, aud.getConsecutivo());
            pst.setLong(2, aud.getFk_comaprendo());
            pst.setString(3, aud.getRadicacion());
            pst.setLong(4, aud.getFk_ususario());
            pst.setLong(5, aud.getFk_persoan());
            pst.setDate(6, aud.getFecha());
            pst.setLong(7, aud.getEstado());
            pst.execute();

        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! SA ->" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    /**
     * ***
     */
    public java.util.List listarSA(long fk_comparendo, long op) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList listavenal = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * from solicitudes_audiencia where (fk_comparendo= ? or ?=0) and estado=? order by 1 asc   ");
            pst.setLong(1, fk_comparendo);
            pst.setLong(2, fk_comparendo);
            pst.setLong(3, op);
            rst = pst.executeQuery();
            while (rst.next()) {
                listavenal.add(Solicitud_Audiencia.load(rst));
            }
        } catch (Exception e) {
            System.out.println("Error Update Auditoria Comparendo -->" + e);
            throw new SQLException("Error actualizando auditoria comparendo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listavenal;
    }

    public Solicitud_Audiencia ConsultarSA(long fk_comparendo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Solicitud_Audiencia aud = null;
        try {
            pst = con.prepareStatement("Select * from solicitudes_audiencia where fk_comparendo= ? order by 1 asc");
            pst.setLong(1, fk_comparendo);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    System.out.println("Q PASO");
                    aud = Solicitud_Audiencia.load(rst);
                }
            } else {
                System.out.println("NULL");
                return null;
            }
        } catch (Exception e) {
            System.out.println("Error Update Auditoria Comparendo -->" + e);
            throw new SQLException("Error actualizando auditoria comparendo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return aud;
    }
    //****//

    public LinkedList listadoAudiencia(long op, long fk_comp) throws SQLException {
        System.out.println("Entro en el listado de Grupos");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaGrupos = new LinkedList();
        try {
            pst = con.prepareStatement("Select * from audiencias a where (a.fk_comparendo=? or ?=0) and a.estado=? order by 1 desc");
            pst.setLong(1, fk_comp);
            pst.setLong(2, fk_comp);
            pst.setLong(3, op);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaGrupos.add(Audiencias.load(rst));
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar los grupos ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
        }

        return listaGrupos;
    }

    public void AdicionarAudiencia(Audiencias aud) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into audiencias (fk_comparendo,fk_agente,fecha,hora,estado,fk_inspector,fk_usuario) values (?,?,?,?,?,?,?)");
            pst.setLong(1, aud.getFk_comparendo());
            pst.setLong(2, aud.getFk_agente());
            pst.setDate(3, aud.getFecha());
            pst.setString(4, aud.getHora());
            pst.setLong(5, aud.getEstado());
            pst.setLong(6, aud.getFk_inspector());
            pst.setLong(7, aud.getFk_usuario());

            pst.executeUpdate();

        } catch (Exception exc) {
            System.out.println("Error Audiencias " + exc);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

//*//
    public void UpdateSA(long fk_comparendo, long op) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta ");

        }

        PreparedStatement pst = null;
        PreparedStatement pst1 = null;

        try {
            //update Audiencias set estado=2 where fk_comparendo = 7864
            //String sentence = "";
            pst = con.prepareStatement("update Solicitudes_Audiencia set estado=2 where fk_comparendo = ?");
            pst.setLong(1, fk_comparendo);
            pst.executeUpdate();
            if (op == 0) {
                pst1 = con.prepareStatement("update Audiencias"
                        + " set estado=2 where fk_comparendo = ?");
                pst1.setLong(1, fk_comparendo);
                pst1.executeUpdate();

            }

        } catch (Exception e) {
            System.out.println("Error Update Auditoria Comparendo -->" + e);
            throw new SQLException("Error actualizando auditoria comparendo debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
//*****///

    public long adicionarPagoSimit(pagos_simit pago) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("insert into pagos_simit (numero_factura,valor_descuento,valor_iva,valor_total,tipo_pago,referencia,fk_sede,fk_taquilla,fk_tiquete,fecha,fecha_tipo_pago,estado,fk_persona,fk_usuario,observacion,fk_vehiculo,fk_banco) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setString(1, pago.getNumero_factura());
            pst.setFloat(2, pago.getValor_descuento());
            pst.setFloat(3, pago.getValor_iva());
            pst.setFloat(4, pago.getValor_total());
            pst.setInt(5, pago.getTipo_pago());
            pst.setString(6, pago.getNumero_tipo_pago());
            pst.setLong(7, pago.getFk_sede());
            pst.setLong(8, pago.getFk_taquilla());
            pst.setLong(9, pago.getFk_tiquete());
            pst.setDate(10, pago.getFecha());
            pst.setDate(11, pago.getFecha_tipo_pago());
            pst.setInt(12, pago.getEstado());
            pst.setLong(13, pago.getFk_persona());
            pst.setLong(14, pago.getFk_usuario());
            pst.setString(15, pago.getObservacion());
            int sig = 16;
            pst.setLong(16, pago.getFk_vehiculo());
            pst.setLong(17, pago.getFk_banco());

            pst.executeUpdate();

            rst = pst.getGeneratedKeys();
            if (rst != null) {
                if (rst.next()) {
                    return rst.getLong(1);
                }
            }
            return 0;

        } catch (Exception e) {
            System.out.println("Error pagos simit - > " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    public long adicionarTiqueteSimit(tiquete_simit tiquete) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("insert into tiquetes_simit (numero_tiquete,fecha,valor_total_descuento,valor_total_iva,valor_total,estado,descripcion,fecha_proceso,fk_persona,fk_taquilla,fk_usuario,tipo_pago,referencia,fecha_referencia" + (tiquete.getFk_vehiculo() != 0 ? ",fk_vehiculo" : "") + (tiquete.getFk_banco() != 0 ? ",fk_banco" : "") + ",estado_preliquidacion) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?" + (tiquete.getFk_vehiculo() != 0 ? ",?" : "") + (tiquete.getFk_banco() != 0 ? ",?" : "") + ",?)", new String[]{"ID_TIQUETE"});
            //System.out.println("sql-> insert into tiquetes (numero_tiquete,fecha,valor_total_descuento,valor_total_iva,valor_total,estado,descripcion,fecha_proceso,fk_persona,fk_taquilla,fk_usuario,tipo_pago,referencia,fecha_referencia" + (tiquete.getFk_vehiculo() != 0 ? ",fk_vehiculo" : "") + (tiquete.getFk_banco() != 0 ? ",fk_banco" : "") + ",estado_preliquidacion) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?" + (tiquete.getFk_vehiculo() != 0 ? ",?" : "") + (tiquete.getFk_banco() != 0 ? ",?" : "") + ",?)");
            // datos personales

            pst.setString(1, tiquete.getNumero_factura());
            pst.setDate(2, tiquete.getFecha());
            pst.setFloat(3, tiquete.getValor_total_descuento());
            pst.setFloat(4, tiquete.getValor_total_iva());
            pst.setFloat(5, tiquete.getValor_total());
            pst.setInt(6, tiquete.getEstado());
            pst.setString(7, tiquete.getDescripcion());
            pst.setTimestamp(8, tiquete.getFecha_proceso());
            pst.setLong(9, tiquete.getFk_persona());
            pst.setLong(10, tiquete.getFk_taquilla());
            pst.setLong(11, tiquete.getFk_usuario());
            pst.setInt(12, tiquete.getTipo_pago());
            pst.setString(13, tiquete.getReferencia());
            pst.setDate(14, tiquete.getFecha_referencia());

            int sig = 15;

            if (tiquete.getFk_vehiculo() != 0) {
                System.out.println("ok vehiculo sig 16");
                pst.setLong(15, tiquete.getFk_vehiculo());
                sig = 16;
            }
            if (tiquete.getFk_banco() != 0) {

                //System.out.println(sig+"ok banco sig 17");
                pst.setLong(sig, tiquete.getFk_banco());
                if (tiquete.getFk_vehiculo() == 0) {
                    sig = 16;
                } else {
                    sig = 17;
                }
            }

            if (tiquete.getEstado_preliquidacion() != 0) {
                //System.out.println(sig+"ok error");
                pst.setInt(sig, tiquete.getEstado_preliquidacion());
            }

            pst.executeUpdate();

            rst = pst.getGeneratedKeys();
            if (rst != null) {
                if (rst.next()) {
                    return rst.getLong(1);
                }
            }
            return 0;

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
    }

    public Tiquete consultarTiquete_simit(long fk_taquilla) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM Tiquetes_simit WHERE fk_taquilla = ?");
            pst.setLong(1, fk_taquilla);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    Tiquete.load(rst);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar las aletas debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    /**
     *
     */
    //Creado por Jefrey Padilla
    public Respuesta_Solicitud consultarRespuestaSolicituds(String numero) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select * from respuesta_solicitud where num_oficio_respuesta =  ? and estado = 1");
            pst.setString(1, numero);
            rst = pst.executeQuery();
            while (rst.next()) {
                return Respuesta_Solicitud.load(rst);
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido consultar el vehiculo ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    //Creado por Jefrey Padilla
    public void adicionarPagoOnline(PagoOnline pagoOnline) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("insert into pagos_online (fk_vehiculo,fk_persona,fk_pago,referencia,valor,fecha,estado,fk_usuario,fecha_proceso)values(?,?,?,?,?,?,?,?,?)");
            pst.setLong(1, pagoOnline.getFk_vehiculo());
            pst.setLong(2, pagoOnline.getFk_persona());
            pst.setLong(3, pagoOnline.getFk_pago());
            pst.setString(4, pagoOnline.getReferencia());
            pst.setFloat(5, pagoOnline.getValor());
            pst.setDate(6, pagoOnline.getFecha());
            pst.setLong(7, pagoOnline.getEstado());
            pst.setLong(8, pagoOnline.getFk_usuario());
            pst.setTimestamp(9, pagoOnline.getFecha_proceso());

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
    }

    //AjustarValorInteresCostas by Jefrey Padilla
    public boolean AjustarValorInteresCostas(long fk_vehiculo, long usuario, Date fechaPago) throws Exception {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            System.out.println(" | Ajuste cartera Interes: " + fk_vehiculo + " user: " + usuario + " Date: " + fechaPago);
            con.setAutoCommit(false);
            procesos.calcularIntereses calcularI = new procesos.calcularIntereses();
            int s = consultarMaxCodigo();
            String tasas[][] = getIntereses();
            calcularI.setTasas("s", s, tasas);
            pst = con.prepareStatement("SELECT * FROM CARTERAS WHERE FK_VEHICULO = ? AND ESTADO_CARTERA = 1 ORDER BY FECHA_CREACION,REFERENCIA");
            pst.setLong(1, fk_vehiculo);
            rst = pst.executeQuery();
            List<String> Permitidas = new ArrayList<String>();
            while (rst.next()) {
                System.out.println(" | Carteras: ");
                Cartera cartera = Cartera.Load(rst);
                //long referencia = Long.parseLong(cartera.getReferencia());

                /*   if(sw==1){
                long descuento = consultarDescuentoInternacion(fk_vehiculo , 1);
                if(descuento==0){
                if(referencia==2013){
                Detalle_Cartera dtcartera = consultarDetalleCartera(cartera.getId_cartera(), 1093);
                if(dtcartera!=null){
                eliminarDescuentoInternacionDC(dtcartera.getFk_cartera(), dtcartera.getReferencia(), 1093);
                }
                }
                }
                }*/
                int idc = cartera.getTipo() == 1 ? 318 : cartera.getTipo() == 2 ? 249 : 319;
                java.util.Date fechaInicio = new java.util.Date(cartera.getFecha_saldo().getTime());
                java.util.Date fechaRef = new java.util.Date(tasas[0][0]);
                java.util.Date fechaActual = new java.util.Date();
                java.util.Date fechaP = new java.util.Date(fechaPago.getTime());
                System.out.println(" | Concepto: " + idc);
                fechaInicio = fechaInicio.getTime() < fechaRef.getTime() ? fechaRef : fechaInicio;
                float valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 3);
                System.out.println("fecha ini=" + fechaInicio + " fecha actual=" + fechaP + " valor real=" + valorReal);
                //Voy por aqui
                float interes = calcularI.getValor(fechaInicio, fechaP, valorReal);
                float descuento = 0;
                System.out.println("interes rr=" + interes);
                int interesR = Math.round(interes);
                System.out.println("interesR=" + interesR);
                interesR = interesR <= 0 ? 0 : interesR;
                boolean existeC = existeConcepto(idc, cartera.getId_cartera());
                String fecha_hoy = new java.text.SimpleDateFormat("dd/MM/yyyy").format(fechaP);
                /*Nuevo*/
                Conf_Descuento cd = null; //new Conf_Descuento().getCnf_des(this, 1, idc, fecha_hoy);
                if (cd != null) {
                    if (Permitidas.isEmpty()) {
                        for (int i = Integer.parseInt(cd.getVig_inicial()); i <= Integer.parseInt(cd.getVig_final()); i++) {
                            Permitidas.add(i + "");
                        }
                    }

                    if (!Permitidas.contains(cartera.getReferencia())) {
                        //null
                    } else {
                        int interesD = (int) ((interesR * cd.getPorcentaje()) / 100);
                        descuento = -interesD;

                        if (!existeConcepto((int) cd.getFk_concepto_desc(), cartera.getId_cartera())) {
                            Detalle_Cartera dc = new Detalle_Cartera();
                            dc.setEstado(1);
                            dc.setFecha(cartera.getFecha_creacion());
                            dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                            dc.setFk_cartera(cartera.getId_cartera());
                            dc.setFk_concepto(cd.getFk_concepto_desc());
                            dc.setFk_usuario(usuario);
                            dc.setReferencia(cartera.getReferencia());
                            dc.setValor(-interesD);
                            adicionarDetalleCartera(dc);
                        } else {
                            actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) -interesD);
                        }
                    }
                } else {
                    new Conf_Descuento().eliminarDescuento(this, fk_vehiculo, consultarUsuario(usuario), 1);
                }
                /*Nuevo*/
                java.text.SimpleDateFormat formato = new java.text.SimpleDateFormat("dd/MM/yyyy");
                String fechaInicio2 = formato.format(fechaInicio);
                System.out.println("Fecha inicio= " + fechaInicio2);

                String fechaActual2 = formato.format(fechaP);
                System.out.println("Fecha Actual= " + fechaActual2);

                //java.util.Date fechaActual3 = formato.parse(fechaActual2);
                //java.util.Date fechaInicio3 = formato.parse(fechaInicio2);
                if (!fechaInicio2.equals(fechaActual2) || fechaInicio.after(fechaP)) {
                    if (!existeC) {
                        if (interesR > 0) {
                            Detalle_Cartera dc = new Detalle_Cartera();
                            dc.setEstado(1);
                            dc.setFecha(cartera.getFecha_creacion());
                            dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                            dc.setFk_cartera(cartera.getId_cartera());
                            dc.setFk_concepto(idc);
                            dc.setFk_usuario(usuario);
                            dc.setReferencia(cartera.getReferencia());
                            dc.setValor(interesR);
                            adicionarDetalleCartera(dc);
                        }
                    } else {
                        actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) interesR);
                    }

                    if (interesR >= 0) {
                        idc = cartera.getTipo() == 1 ? 302 : cartera.getTipo() == 2 ? 276 : 303;
                        interes = Float.parseFloat(consultarPorcentajeCostas(cartera.getEstado_vigencia(), cartera.getFk_concepto()));
                        valorReal = valorDetalleCarteraAtributos(cartera.getId_cartera(), cartera.getFk_sede(), 4);
                        float costas = (float) ((valorReal + descuento) * interes);
                        int costasR = Math.round(costas);
                        costasR = costasR < 0 ? 0 : costasR;
                        costasR = interesR == 0 ? 0 : costasR;
                        existeC = existeConcepto(idc, cartera.getId_cartera());
                        if (!existeC) {
                            if (costasR > 0) {
                                Detalle_Cartera dc = new Detalle_Cartera();
                                dc.setEstado(1);
                                dc.setFecha(cartera.getFecha_creacion());
                                dc.setFecha_sistema(new java.sql.Timestamp(new java.util.Date().getTime()));
                                dc.setFk_cartera(cartera.getId_cartera());
                                dc.setFk_concepto(idc);
                                dc.setFk_usuario(usuario);
                                dc.setReferencia(cartera.getReferencia());
                                dc.setValor(costasR);
                                adicionarDetalleCartera(dc);
                            }
                        } else {
                            actualizarDetalleCartera(cartera.getId_cartera(), 1, idc, (double) costasR);
                        }
                    }
                    actualizarValoresCartera(cartera.getId_cartera());
                    con.commit();
                }
            }
            return true;
        } catch (Exception exc) {
            System.out.println("No se actualizo intereses " + exc);
        } finally {
            if (rst != null) {
                rst.close();
            }
            if (pst != null) {
                pst.close();
            }
        }
        return false;
    }

    //Creado por Jefrey Padilla
    public Cargo consultarCargoByUsuario(long fk_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM CARGOS WHERE FK_USUARIO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, fk_usuario);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Cargo.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultarMaxFechaHis del usuario: ---> " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    //Creado por Jefrey Padilla
    public void actualizarCargoUsuario(long id_usuario_proceso, long fk_usuario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("UPDATE CARGOS SET FECHA_FIN = SYSDATE, FK_USUARIO_PROCESO = ?, FECHA_PROCESO = SYSDATE WHERE FK_USUARIO = ? AND FECHA_FIN IS NULL");
            pst.setLong(1, id_usuario_proceso);
            pst.setLong(2, fk_usuario);
            pst.executeUpdate();
        } catch (Exception e) {
            throw new SQLException("Error al actualizar Cargos del usuario: ---> " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
    }

    //Creado por Jefrey padilla
    public void ingresarCargosUsuario(Cargo cargo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("INSERT INTO CARGOS (FK_USUARIO,GRUPO_CARGO,FECHA_INI,CODIGO,CARGO, FK_USUARIO_PROCESO, FECHA_PROCESO)values(?,?,SYSDATE,?,?,?,SYSDATE)");
            pst.setLong(1, cargo.getFk_usuario());
            pst.setLong(2, cargo.getGrupo_cargo());
            pst.setString(3, cargo.getCodigo());
            pst.setLong(4, cargo.getCargo());
            pst.setLong(5, cargo.getFk_usuario_proceso());
            pst.executeQuery();
        } catch (Exception e) {
            throw new SQLException("Error al IngresarCargosUsuario del usuario: ---> " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
    }

    //Creado por Jefrey Padilla
    public List consultarTiqueteByPlaca(String placa, long fk_vehiculo) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        List lista = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM TIQUETES WHERE DESCRIPCION = ? OR FK_VEHICULO = ? AND ESTADO = 3");
            pst.setString(1, placa);
            pst.setLong(2, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Tiquete.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lista;

    }

// Creado por Jefrey Padilla
    public Detalle_Tiquete consultarDetalleTiqueteMatriculaIni(long fk_tiquete, int estado, int fk_tramite) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Detalle_Tiquete detalleT = null;
        try {
            pst = con.prepareStatement("SELECT * FROM DETALLE_TIQUETES WHERE FK_TIQUETE = ? AND ESTADO = ? AND FK_TRAMITE = ?");
            pst.setLong(1, fk_tiquete);
            pst.setInt(2, estado);
            pst.setInt(3, fk_tramite);
            rst = pst.executeQuery();
            if (rst.next()) {
                detalleT = Detalle_Tiquete.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return detalleT;
    }

    public LinkedList listadoMarcasRNMA() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaMarcas = new LinkedList();

        try {

            pst = con.prepareStatement("select * from MARCAS_MAQUINARIA ORDER BY DESCRIPCION");

            rst = pst.executeQuery();

            while (rst.next()) {
                listaMarcas.add(Marcas_maquinaria.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar las marcas ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaMarcas;
    }

    public Marcas_maquinaria consultaMarcaMquinaria(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("select m.* from vehiculos v, LINEAS_MAQUINARIA l,marcas_maquinaria m where v.fk_linea = l.CODIGO_LINEA and l.CODIGO_MARCA = m.CODIGO_MARCA and placa =?"); // orden

            pst.setString(1, placa);
            // sql
            rst = pst.executeQuery();
            if (rst.next()) {
                return Marcas_maquinaria.load(rst);
            }

        } catch (Exception e) {
            System.out.println("Error al consultar la marca de la maquinaria" + e);

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;

    }

    public Marcas_maquinaria getMarcaMaquinaria(long id_marca_maq) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM MARCAS_MAQUINARIA WHERE CODIGO_MARCA = ?");
            pst.setLong(1, id_marca_maq);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Marcas_maquinaria.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Linea_maquinaria getLineaMaquinaria(long id_linea_maq) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM LINEAS_MAQUINARIA WHERE codigo_linea = ?");
            pst.setLong(1, id_linea_maq);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Linea_maquinaria.load(rst);
            }
        } catch (Exception e) {
            System.out.println("modelo.Model.getLineaMaquinaria() " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

//Creado por Jefrey Padilla
    public LinkedList crearListaClasesVeh(String radicacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pSt = null;
        ResultSet rst = null;
        LinkedList listaClases = new LinkedList();
        try {
            pSt = con.prepareStatement("SELECT * FROM PARAMETROS WHERE FK_GRUPO = 1 AND NOMBRE_CORTO = ? ORDER BY NOMBRE"); // orden
            pSt.setString(1, radicacion);
            // sql
            rst = pSt.executeQuery();

            while (rst.next()) {
                listaClases.add(Parametro.load(rst));
            }
        } finally {
            if (pSt != null) {
                pSt.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return listaClases;
    }

    //Creado por Jefrey Padilla
    public String consultarParametroCodigo(long claseV) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT CLASIFICACION FROM RUNT_CLASIFICACION WHERE ID_CLASE_VEHICULO = ?");
            pst.setLong(1, claseV);
            rst = pst.executeQuery();
            if (rst != null) {
                while (rst.next()) {
                    return rst.getString(1);
                }
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar el parametro debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            pst = null;
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    //Creado por Jefrey Padilla
    public String verificarPlacaRN(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("No hay conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT (SELECT COUNT(*) FROM VEHICULOS WHERE PLACA = ? AND ESTADO !=2)||(SELECT COUNT(*) FROM RUNT_PREASIGNACION WHERE PLACA = ? AND ESTADO = 1)  EXISTE FROM DUAL");
            pst.setString(1, placa);
            pst.setString(2, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } catch (Exception e) {
            throw new SQLException("Error al verificar la placa debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    /**
     * *RETENCION**
     */
    //CREADO ANDRES DONADO
    public DatosVehiculo consultarDatosVehiculoRete(long id_vehiculo, int param, int subgrupo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM DATOS_VEHICULOS WHERE PARAM_CODIGO = ? AND SUB_GRUPO_CODIGO = ? AND FK_VEHICULO = ? AND FECHA_FIN IS NULL");
            pst.setInt(1, param);
            pst.setInt(2, subgrupo);
            pst.setLong(3, id_vehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return DatosVehiculo.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

//CREADO POR ANDRES DONADO
    public String consultarDatosMotos(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT CONCAT(P.NOMBRE, GC.CODIGO) AS GRUPO FROM DATOS_VEHICULOS DV, PARAMETROS P, VEHICULOS V, MARCAS M, LINEAS L, GRUPOS_CILINDRAJE_MOTOS GC, GRUPOS_MARCAS_MOTOS GM "
                    + "WHERE (DV.VALOR BETWEEN GC.CILIN_DESDE AND GC.CILIN_HASTA) AND GC.FECHA_FIN IS NULL AND V.ID_VEHICULO=DV.FK_VEHICULO AND DV.PARAM_CODIGO=11 AND DV.SUB_GRUPO_CODIGO=40 "
                    + "AND DV.FECHA_FIN IS NULL AND P.FK_GRUPO = 356 AND P.CODIGO=GM.PARAM_GRUPO_MARCA AND M.CODIGO=L.FK_MARCA AND L.ID_LINEA=V.FK_LINEA "
                    + "AND M.CODIGO=GM.FK_COD_MARCA AND V.PLACA=? ");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

//CREADO POR ANDRES DONADO
    public String consultarAvaluoMotos(String grupo, long modelo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT AM.VALOR_AVALUO_MOTOS AS VALOR_AVALUO FROM AVALUOS_MOTOCICLETAS AM WHERE AM.MODELO=? AND AM.CATEGORIA_MOTOS=?");
            pst.setLong(1, modelo);
            pst.setString(2, grupo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    //CREADO POR ANDRES DONADO
    public long consultarAvaluoVehiculos(long modelo, long marca, long linea, long cilindraje) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT A.VALOR AVALUO FROM AVALUOS_VEHICULOS A WHERE A.FK_MARCA = ? AND A.FK_LINEA = ? AND A.MODELO=? AND A.CILINDRAJE=?");
            pst.setLong(1, marca);
            pst.setLong(2, linea);
            pst.setLong(3, modelo);
            pst.setLong(4, cilindraje);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return 0;
    }

    //CREADO POR ANDRES DONADO
    public String consultarAvaluoVehiculosAct(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT DV.VALOR FROM DATOS_VEHICULOS DV WHERE DV.PARAM_CODIGO = 18 AND DV.SUB_GRUPO_CODIGO = 40 AND DV.FK_VEHICULO IN (SELECT V.ID_VEHICULO FROM VEHICULOS V WHERE V.PLACA = ?)  AND FECHA_FIN IS NULL");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

//CREADO POR ANDRES DONADO
    public String consultarCategoriaMarca(long fk_marca, int sw) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            if (sw == 1) {
                pst = con.prepareStatement("SELECT GM.PARAM_GRU_CARGA FROM GRUPOS_MARCAS_CARGA GM WHERE GM.FK_COD_MARCA=? AND GM.PARAM_GRU_CARGA IN(13)");
                pst.setLong(1, fk_marca);
                rst = pst.executeQuery();
            } else if (sw == 2) {
                pst = con.prepareStatement("SELECT GM.PARAM_GRU_CARGA FROM GRUPOS_MARCAS_CARGA GM WHERE GM.FK_COD_MARCA=? AND GM.PARAM_GRU_CARGA IN(14,15)");
                pst.setLong(1, fk_marca);
                rst = pst.executeQuery();
            } else {
                pst = con.prepareStatement("SELECT GM.PARAM_GRU_CARGA FROM GRUPOS_MARCAS_CARGA GM WHERE GM.FK_COD_MARCA=? AND GM.PARAM_GRU_CARGA IN(16,17)");
                pst.setLong(1, fk_marca);
                rst = pst.executeQuery();
            }
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

//CREADO POR ANDRES DONADO
    public String consultarAvaluoVehPasajero(String placa, long modelo, int codcategoria) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT A.VALOR_AVALUO_CARGA FROM AVALUOS_VEHICULOS_CARGA A WHERE /*A.FECHA_FIN IS NULL AND*/ A.MODELO=? AND A.GRUPO IN ("
                    + "SELECT P.NOMBRE||GN.CODIGO GRUPO "
                    + "FROM VEHICULOS V, DATOS_VEHICULOS DV, GRUPOS_NUM_SILLAS GN,"
                    + "PARAMETROS P WHERE V.ID_VEHICULO=DV.FK_VEHICULO "
                    + "AND DV.SUB_GRUPO_CODIGO=40 AND DV.PARAM_CODIGO=1 AND DV.FECHA_FIN IS NULL "
                    + "AND DV.VALOR BETWEEN GN.NSILLAS_DESDE AND GN.NSILLAS_HASTA "
                    + "AND P.CODIGO=? AND P.FK_GRUPO=361 AND V.PLACA=?)");
            pst.setLong(1, modelo);
            pst.setInt(2, codcategoria);
            pst.setString(3, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    //CREADO POR ANDRES DONADO
    public String consultarAvaluoVehCargaPico(String placa, long modelo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT A.VALOR_AVALUO_CARGA FROM AVALUOS_VEHICULOS_CARGA A "
                    + "WHERE /*A.FECHA_FIN IS NULL AND */A.MODELO=? AND A.GRUPO IN(SELECT (P.NOMBRE||'0') GRUPO "
                    + "FROM VEHICULOS V, DATOS_VEHICULOS DV, GRUPOS_CILINDRAJE_VEH GC, PARAMETROS P "
                    + "WHERE DV.SUB_GRUPO_CODIGO=40 AND DV.PARAM_CODIGO=11 AND DV.FECHA_FIN IS NULL "
                    + "AND DV.VALOR BETWEEN GC.CILINDRAJE_DESDE AND GC.CILINDRAJE_HASTA "
                    + "AND P.FK_GRUPO=361 AND GC.COD_CATEGORIA=P.CODIGO "
                    + "AND DV.FK_VEHICULO=V.ID_VEHICULO AND V.PLACA=?)");
            pst.setLong(1, modelo);
            pst.setString(2, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    //CREADO POR ANDRES DONADO
    public String consultarAvaluoVehCarga(String placa, long modelo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT A.VALOR_AVALUO_CARGA AVALUO FROM AVALUOS_VEHICULOS_CARGA A WHERE A.MODELO=? AND A.GRUPO IN("
                    + "SELECT P.NOMBRE||GT.CODIGO GRUPO "
                    + "FROM VEHICULOS V, DATOS_VEHICULOS DV, GRUPOS_CARROCERIA GC, "
                    + "LINEAS L, MARCAS M, GRUPOS_MARCAS_CARGA GM, PARAMETROS P, "
                    + "DATOS_VEHICULOS DV2, GRUPOS_TONELAJE_VEH GT "
                    + "WHERE V.ID_VEHICULO=DV.FK_VEHICULO "
                    + "AND DV.SUB_GRUPO_CODIGO=2 AND TO_NUMBER(DV.VALOR)=GC.COD_CARROCERIA "
                    + "AND V.FK_LINEA=L.ID_LINEA AND L.FK_MARCA=M.CODIGO "
                    + "AND GC.COD_GRU_CARROCERIA=GM.COD_GRUPO_CARROCERIA "
                    + "AND M.CODIGO=GM.FK_COD_MARCA AND P.FK_GRUPO=361 "
                    + "AND GM.PARAM_GRU_CARGA=P.CODIGO AND V.ID_VEHICULO=DV2.FK_VEHICULO "
                    + "AND DV2.SUB_GRUPO_CODIGO=40 AND DV2.PARAM_CODIGO=2 "
                    + "AND DV2.VALOR BETWEEN GT.CAPACIDAD_DESDE AND GT.CAPACIDAD_HASTA "
                    + "/*AND A.FECHA_FIN IS NULL */"
                    + "AND V.PLACA=?)");
            pst.setLong(1, modelo);
            pst.setString(2, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    //CREADO POR ANDRES DONADO
    public void InsertarValorTimbre(String numfact, long valtimbre, long fkveh, int usuario, long vig) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO FACTURAS_TIMBRES (NUM_FACTURA,VALOR_TIMBRE,FK_VEHICULO,FK_USUARIO,FECHA_PROCESO,VIGENCIA) VALUES (?,?,?,?,SYSDATE,?)");
            pst.setString(1, numfact);
            pst.setLong(2, valtimbre);
            pst.setLong(3, fkveh);
            pst.setInt(4, usuario);
            pst.setLong(5, vig);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //CREADO POR ANDRES DONADO
    public String consultarFacturaTimbre(String numfact) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT NUM_FACTURA FROM FACTURAS_TIMBRES WHERE NUM_FACTURA=?");
            pst.setString(1, numfact);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

    public String consultarValorTimbre(long fk_vehiculo, int vigencia) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT VALOR_TIMBRE FROM FACTURAS_TIMBRES WHERE FK_VEHICULO=? AND VIGENCIA=?");
            pst.setLong(1, fk_vehiculo);
            pst.setInt(2, vigencia);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return "";
    }

    public void InsertarTipopersona(long tipo, long fkpersona, int usuario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO TIPO_PERSONA (FK_PERSONA,CODIGO_TIPO,FK_USUARIO,FECHA_PROCESO) VALUES (?,?,?,SYSDATE)");
            pst.setLong(1, fkpersona);
            pst.setLong(2, tipo);
            pst.setInt(3, usuario);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Persona consultarPersonaVehiculo(String placa) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        Persona persona = null;
        try {
            pst = con.prepareStatement("SELECT * FROM PERSONAS P WHERE P.ID_PERSONA IN ("
                    + "SELECT PR.FK_PERSONA FROM PROPIETARIOS PR WHERE PR.FECHA_FIN IS NULL AND PR.FK_VEHICULO IN ("
                    + "SELECT V.ID_VEHICULO FROM VEHICULOS V WHERE V.PLACA=?))");
            pst.setString(1, placa);
            rst = pst.executeQuery();
            if (rst.next()) {
                persona = Persona.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return persona;
    }

    public String consultarTipoPersonaR(long fk_persona) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT TP.CODIGO_TIPO FROM TIPO_PERSONA TP WHERE TP.FK_PERSONA=?");
            pst.setLong(1, fk_persona);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getString(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return null;
    }

//FIN RETENCION
    //Creado por Jefrey Padilla
    public LinkedList CrearListaTiquetes(long fk_tiquete) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pSt = null;
        ResultSet rst = null;
        LinkedList listaClases = new LinkedList();
        try {
            pSt = con.prepareStatement("SELECT C.ID_CONCEPTO CODIGO, TC.SECUENCIA CANTIDAD, C.NOMBRE CONCEPTO, TC.VALOR FROM TIQUETES T INNER JOIN DETALLE_TIQUETES DT ON DT.FK_TIQUETE = T.ID_TIQUETE  INNER JOIN TIQUETE_CONCEPTOS TC ON TC.FK_DETALLE_TIQUETE = DT.ID_DET_TIQUETE INNER JOIN CONCEPTOS C ON C.ID_CONCEPTO = TC.FK_CONCEPTO WHERE T.ID_TIQUETE = ?"); // orden
            pSt.setLong(1, fk_tiquete);
            // sql
            rst = pSt.executeQuery();

            while (rst.next()) {
                listaClases.add(ReciboExcedente.load(rst));
            }
        } finally {
            if (pSt != null) {
                pSt.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return listaClases;
    }

    //Creado por Jefrey Padilla
    public Tiquete_Concepto consultartiqueteConceptoByNumeroTiq(long fk_tiquete, long concepto) throws SQLException, Exception {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT TC.* FROM TIQUETES T INNER JOIN DETALLE_TIQUETES DT ON DT.FK_TIQUETE = T.ID_TIQUETE INNER JOIN TIQUETE_CONCEPTOS TC ON TC.FK_DETALLE_TIQUETE = DT.ID_DET_TIQUETE WHERE T.ID_TIQUETE = ? AND TC.FK_CONCEPTO = ?");
            pst.setLong(1, fk_tiquete);
            pst.setLong(2, concepto);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Tiquete_Concepto.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    //Creadopor Jefrey padilla
    public float consultarValorDetTiqueteByfk_tiquete(long fk_tiquete) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT SUM(VALOR_TOTAL) FROM DETALLE_TIQUETES WHERE FK_TIQUETE = ?");
            pst.setLong(1, fk_tiquete);

            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

// Creado por Jefrey Padilla
    public void actualizarEstadoDetalleTiqueteFkTiquete(long fk_tiquete, int estado) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DETALLE_TIQUETES SET ESTADO = ? WHERE FK_TIQUETE = ?");
            pst.setInt(1, estado);
            pst.setLong(2, fk_tiquete);

            pst.execute();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public Formulario_Licencia consultarFormularioLicenciabyFkPago(long pago)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM FORMULARIO_LICENCIAS WHERE FK_PAGO = ?");
            pst.setLong(1, pago);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Formulario_Licencia.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List listarFormulariosByPagos(long fk_pago)
            throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM FORMULARIOS where fk_pago = ?");
            pst.setLong(1, fk_pago);
            rst = pst.executeQuery();
            System.out.println("Aqui");
            while (rst.next()) {
                System.out.println("Aqui-");
                lista.add(Formulario.load(rst));
            }

        } catch (Exception e) {
            System.out.println("Aqui");
            e.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public long consultarRecivoExedente(long id_tiquete) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        long exc = 0;
        try {
            pst = con.prepareStatement("SELECT FK_tiquete_nue FROM recibos_excedentes  G WHERE G.FK_TIQUETE_ANT= ?");
            pst.setLong(1, id_tiquete);
            rst = pst.executeQuery();
            if (rst.next()) {
                exc = rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return exc;

    }

    public LinkedList Listar_Propietarios_Anteriores(Date fecha_fin, long fk_vehiculo) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaPropietarios = new LinkedList();
        try {
            pst = con.prepareStatement("select * from Propietarios where fecha_fin = ? AND fk_vehiculo = ? ");
            pst.setDate(1, fecha_fin);
            pst.setLong(2, fk_vehiculo);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaPropietarios.add(Propietario.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaPropietarios;
    }

    public void eliminarPropietarioIndeterminado(long id_propietario) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("DELETE FROM PROPIETARIOS WHERE ID_PROPIETARIO = ?");
            pst.setLong(1, id_propietario);
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarPreliquidacion(PreLiquidacion preliquidacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("insert into preliquidacion (fk_pago,valor_factura,fk_taquilla,fk_sede,fk_usuario,fecha_proceso)values(?,?,?,?,?,sysdate)");

            pst.setLong(1, preliquidacion.getFk_pago());
            pst.setDouble(2, preliquidacion.getValor_factura());
            pst.setLong(3, preliquidacion.getFk_Taquilla());
            pst.setLong(4, preliquidacion.getFk_sede());
            pst.setLong(5, preliquidacion.getFk_usuario());

            pst.executeQuery();

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
    }

    public Reclamos_Pagos consultarReclamosPagos(long fk_pago, int estado) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM RECLAMOS_PAGOS WHERE FK_PAGO = ? AND ESTADO = ?");
            pst.setLong(1, fk_pago);
            pst.setInt(2, estado);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Reclamos_Pagos.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;

    }

// ingeniero johann gutierrez 04-02-2014
    public LinkedList listadoMarcasRNRYS() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaMarcas = new LinkedList();
        try {
            pst = con.prepareStatement("select * from MARCAS_REMOLQUE ORDER BY NOMBRE");
            rst = pst.executeQuery();
            while (rst.next()) {
                listaMarcas.add(Marcas_Remolques.load(rst));
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar las marcas ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaMarcas;
    }

    public Marcas_Remolques consultaMarcaRNRYS(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("select m.id_marca_rem,m.codigo,m.nombre from vehiculos v, lineas l,marcas_remolque m  where v.fk_linea = l.id_linea and l.fk_marca = m.codigo and placa =?"); // orden

            pst.setString(1, placa);
            // sql
            rst = pst.executeQuery();
            if (rst.next()) {
                return Marcas_Remolques.load(rst);
            }

        } catch (Exception e) {
            System.out.println("Error al consultar la marca de la maquinaria" + e);

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;

    }

    public Marcas_Remolques getMarcaRNRYS(long id_marca) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM MARCAS_REMOLQUE WHERE CODIGO = ?");
            pst.setLong(1, id_marca);
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Marcas_Remolques.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Linea_Remolques getLineaRNRYS(long id_linea) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM LINEAS_REMOLQUE WHERE ID_LINEA_REM = ?");
            pst.setLong(1, id_linea);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Linea_Remolques.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public Preasignacion consultarPreasignacionRNRYS(String vin) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM RUNT_PREASIGNACION WHERE VIN = ? AND ESTADO = 1");
            pst.setString(1, vin);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Preasignacion.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public LinkedList listaLineasRNRYS(long fk_marca) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaLineas = new LinkedList();

        try {

            pst = con.prepareStatement("select * from LINEAS_REMOLQUE where fk_marca_rem = ? ORDER BY NOMBRE");
            pst.setLong(1, fk_marca);
            rst = pst.executeQuery();

            while (rst.next()) {

                listaLineas.add(Linea_Remolques.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar las lineas ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return listaLineas;
    }

    public LinkedList listaLineasRNMA(long fk_marca) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaLineas = new LinkedList();

        try {

            pst = con.prepareStatement("SELECT * FROM LINEAS_MAQUINARIA WHERE CODIGO_MARCA = ? ORDER BY DESCRIPCION");
            pst.setLong(1, fk_marca);
            rst = pst.executeQuery();

            while (rst.next()) {

                listaLineas.add(Linea_maquinaria.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar las lineas ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return listaLineas;
    }

    public void adicionarFinanciacionAnulada(Financiacion_Anulada f)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into FINANCIACIONES_ANULADAS (FK_USUARIO,FECHA_PROCESO,ESTADO,OBSERVACION,FK_FINANCIACION) values(?,?,?,?,?)");
            pst.setLong(1, f.getFK_USUARIO());
            pst.setTimestamp(2, f.getFECHA_PROCESO());
            pst.setInt(3, f.getESTADO());
            pst.setString(4, f.getOBSERVACION());
            pst.setLong(5, f.getFK_FINANCIACION());

            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public LinkedList listarDetalleFinanciacion(long fk_financiacion) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaD = new LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM DETALLES_FINANCIACIONES WHERE FK_FINANCIACION = ?"); // orden
            pst.setLong(1, fk_financiacion);
            rst = pst.executeQuery();
            while (rst.next()) {
                listaD.add(Detalle_Financiacion.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return listaD;
    }

    public Linea_Remolques getLineaRNRYSMarca(long id_linea, long marca) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM LINEAS_REMOLQUE WHERE ID_LINEA_REM = ? AND FK_MARCA_REM = ?");
            pst.setLong(1, id_linea);
            pst.setLong(2, marca);
            rst = pst.executeQuery();
            if (rst.next()) {
                return Linea_Remolques.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public java.util.List<ReporteManuel> consultarReporteManuel() throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<ReporteManuel> lista = new java.util.LinkedList<ReporteManuel>();

        try {
            pst = con.prepareStatement("select * from reporte_manuel");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(ReporteManuel.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return lista;

    }

    public void adicionarInscripcion(Inscripciones inscrp)
            throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into INSCRIPCIONES (fecha_registro,fk_usuario,estado,fk_persona) values(?,?,?,?)");
            pst.setTimestamp(1, new java.sql.Timestamp(new java.util.Date().getTime()));
            pst.setLong(2, inscrp.getFK_USUARIO());
            pst.setInt(3, inscrp.getESTADO());
            pst.setLong(4, inscrp.getFK_PERSONA());
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }

        }

    }

    public void ActualizarPagosTipoPago(int tipo_pago, String referencia, long fk_tiquete) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE PAGOS SET TIPO_PAGO = ?, REFERENCIA = ? WHERE FK_TIQUETE = ?");
            pst.setInt(1, tipo_pago);
            pst.setString(2, referencia);
            pst.setLong(3, fk_tiquete);
            pst.executeUpdate();
        } catch (Exception e) {
            throw new SQLException("No se pudo actualizar" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void EjecutarSql(String sql_ejecutar) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            //pst = con.prepareStatement(sql_ejecutar);
            pst.executeUpdate();

        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido Ejecutar el Comando SQL Enviado.. ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
    }

    public void AdicionarSql(long usuario, String sql_ejecutar) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO SQL_USUARIO(FK_USUARIO,SQL_USUARIO,FECHA_SQL) VALUES(?,?,?)");
            pst.setLong(1, usuario);
            pst.setString(2, sql_ejecutar);
            pst.setTimestamp(3, new java.sql.Timestamp(new java.util.Date().getTime()));
            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void SetUsuarioApp(String usuario_app) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareCall("{call ip_package.set_user_in_context(?)}");
            pst.setString(1, usuario_app);

            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido registrar el Contexto ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
    }

    public void passBD(String sentencia) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement(sentencia);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
    // RICARDO CANTILLO 23 OCT 2014

    public java.util.List listarUsuariosAuditoria() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT DISTINCT FK_USUARIO FROM AUDITORIA");

            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(rst.getString(1));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }
    //detalles dos//

    public void InsertDetalles2(Detalles2 d2) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into Detalles2 (Tipo,Vigencia,Concepto,Valor) values (?,?,?,?)");
            pst.setString(1, d2.getTipo());
            pst.setString(2, d2.getVigencia());
            pst.setString(3, d2.getConcepto());
            pst.setString(4, d2.getValor());
            pst.execute();

        } catch (Exception exp) {
            //throw new SQLException("Error en InsertDetalles2 :"+exp);
            System.out.println("Error en InsertDetalles2 :" + exp);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public boolean callproceso(String vigencia) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("call CARGARCARTERA(" + vigencia + ")");
            pst.execute();
            return true;
        } catch (Exception exp) {
            //throw new SQLException("Error en call");
            System.out.println("Error en Call :" + exp);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return false;
    }

    public boolean ValidarPagosAnterior(String placa) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT T.NUMERO_TIQUETE,P.FECHA FROM PAGOS P,TIQUETES T,DETALLE_TIQUETES D WHERE " + " P.FK_TIQUETE = T.ID_TIQUETE AND T.ID_TIQUETE = D.FK_TIQUETE AND D.FK_TRAMITE IS NOT NULL AND " + " ((T.FK_VEHICULO = (SELECT ID_VEHICULO FROM VEHICULOS WHERE PLACA = '" + placa + "' AND ESTADO IN (1,5))) OR (T.DESCRIPCION ='" + placa + "')) " + " AND SUBSTR((TO_CHAR(p.fecha,'DD/MM/YYYY')), 7, 4)  < SUBSTR((TO_CHAR(SYSDATE,'DD/MM/YYYY')), 7, 4) " + " AND D.ESTADO = 1 AND P.ESTADO = 3 ORDER BY P.NUMERO_FACTURA ");
            rst = pst.executeQuery();
            if (rst.next()) {
                return true;
            }

        } catch (Exception exp) {
            //throw new SQLException("Error en call");
            System.out.println("Error en ValidarPagosAnterior :" + exp);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return false;
    }

    public boolean ValidarPagosAnteriorPersona(String Documento) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT T.NUMERO_TIQUETE,P.FECHA FROM PAGOS P,TIQUETES T,DETALLE_TIQUETES D "
                    + " WHERE P.FK_TIQUETE = T.ID_TIQUETE AND T.ID_TIQUETE = D.FK_TIQUETE AND D.FK_TRAMITE IS NOT NULL AND "
                    + " d.fk_tramite in (28,29,30,31,34,35,57) and "
                    + " t.fk_persona in (Select id_persona from personas where documento = '" + Documento + "')AND "
                    + " SUBSTR((TO_CHAR(p.fecha,'DD/MM/YYYY')), 7, 4)  < SUBSTR((TO_CHAR(SYSDATE,'DD/MM/YYYY')), 7, 4) "
                    + " AND D.ESTADO = 1 AND P.ESTADO = 3 ORDER BY P.NUMERO_FACTURA ");
            rst = pst.executeQuery();
            if (rst.next()) {
                return true;
            }

        } catch (Exception exp) {
            //throw new SQLException("Error en call");
            System.out.println("Error en ValidarPagosAnteriorPersona :" + exp);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return false;
    }

    public PreLiquidacion ConsultarPreliquidacionBYfk_Pago(String num_factura) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("Select * from preliquidacion where fk_pago = (select id_pago from pagos where numero_factura = ?)");
            pst.setString(1, num_factura);
            rst = pst.executeQuery();

            if (rst.next()) {
                return PreLiquidacion.load(rst);
            }

        } catch (Exception exp) {
            //throw new SQLException("Error en InsertDetalles2 :"+exp);
            System.out.println("Error en Consultar Preliquidacion :" + exp);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return null;
    }

// JEFREY PADILLA GONZALEZ
    public boolean consultarPagoFormulario(long fk_pago) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM FORMULARIOS F INNER JOIN RADICACIONES R ON R.ID_RADICACION = F.FK_RADICACION AND R.ESTADO IN(4,5) WHERE F.FK_PAGO = ?");
            pst.setLong(1, fk_pago);
            rst = pst.executeQuery();
            if (rst.next()) {
                return true;
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return false;
    }

    // creado por Jefrey Padilla
    public boolean consultarPagoFormularioLicencia(long fk_pago) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("SELECT * FROM FORMULARIO_LICENCIAS FL INNER JOIN RADICACION_LICENCIAS RL ON RL.ID_RADICACION_LICENCIA = FL.FK_RADICACION AND RL.ESTADO IN(4,5) WHERE FL.FK_PAGO = ?");
            pst.setLong(1, fk_pago);
            rst = pst.executeQuery();
            if (rst.next()) {
                return true;
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return false;
    }

    public void insertarActivacionPago(ActivacionPagos actp)
            throws SQLException {
        PreparedStatement pst = null;

        try {
            pst = con.prepareStatement("INSERT INTO ACTIVACION_PAGOS (FK_PAGO, FK_USUARIO, FECHA_PROCESO, OBSERVACION)VALUES(?,?,SYSDATE,?)");
            pst.setLong(1, actp.getFk_pago());
            pst.setLong(2, actp.getFk_usuario());
            pst.setString(3, actp.getObservacion());
            pst.executeQuery();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void actualizarDetalleById_Tiquete(long fk_tiquete, long estado) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE DETALLE_TIQUETES SET ESTADO = ? WHERE FK_TIQUETE = ?");
            pst.setLong(1, estado);
            pst.setLong(2, fk_tiquete);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public HIS_PAS_USUARIO consultarHIS_PAS_USUARIOPass(long id_usu, String pass) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM HIS_PAS_USUARIO WHERE FK_ID_USUARIO= ? AND PASSWORD1 = ?");
            pst.setLong(1, id_usu);
            pst.setString(2, pass);
            rst = pst.executeQuery();
            if (rst.next()) {
                return HIS_PAS_USUARIO.load(rst);
            }
        } catch (Exception e) {
            throw new SQLException("Error al consultar  el consultarHIS_PAS_USUARIO por primera vez " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    /*
    Solo para proceso infotic ;  Implementado en ProcesarPlanoInfotic; /CargueCobro.java/ autor: jose carreño;
    Beging;
     */
    public void CargueCobroVeh(Cartera cartera) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("Update carteras Set estado_vigencia = ?, fecha_saldo = ? Where tipo= ? And id_cartera = ? And fk_vehiculo = ?");
            pst.setInt(1, cartera.getEstado_vigencia());
            pst.setDate(2, cartera.getFecha_creacion());
            pst.setInt(3, cartera.getTipo());
            pst.setLong(4, cartera.getId_cartera());
            pst.setLong(5, cartera.getFk_vehiculo());
            pst.executeUpdate();
        } catch (Exception EX) {
            System.err.println("Error Implementado en ProcesarPlanoInfotic: CargueCobro.java");
            EX.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    /*End;infotic*/
 /*Edtitar  Radicacion del formulario para rebocactoria de tramites*/
    public void editarFormularioTramite(long idFormulario, long fk_radicacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("UPDATE FORMULARIOS F SET F.FK_RADICACION =" + fk_radicacion + " WHERE F.ID_FORMULARIO =" + idFormulario);
            pst.executeUpdate();

        } catch (Exception ex) {
            System.out.println("Error en EditarFormularioTramite para rebocatorias \n causa : " + ex);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    //**tramites asociados**//
    public void adicionarTramiteAsociado(Tramitesasociados tramiteA) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("INSERT INTO TRAMITES_ASOCIADOS (NOMBRE_TRAMITE,REFERENCIA,FECHA,OBSERVACION,ESTADO,USUARIO_SOLICITANTE,FECHA_REGISTRO,FK_VEHICULO)VALUES(?,?,?,?,?,?,SYSDATE,?)");
            pst.setString(1, tramiteA.getNombre_tramite());
            pst.setString(2, tramiteA.getReferencia());
            pst.setDate(3, tramiteA.getFecha());
            pst.setString(4, tramiteA.getObservacion());
            pst.setString(5, tramiteA.getEstado());
            pst.setLong(6, tramiteA.getUsuario_solicitante());
            pst.setLong(7, tramiteA.getFk_vehiculo());
            pst.executeQuery();

        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
    }

    /*listarauditoria*/
    public java.util.List listarAuditoria(String usuario, String tabla, String accion, long vehiculo, String fechai, String fechaf) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT ID_AUDITORIA,FK_USUARIO,IP,TABLA,REGISTRO,ACCION,FECHA,FLAG,VEHICULO FROM AUDITORIA WHERE (FK_USUARIO = ? OR ? = '0') AND (TABLA = ? OR ? = '0') AND (ACCION = ? OR ? = '0') AND (VEHICULO = ? OR ? = 0)  And to_date(to_char(fecha,'DD/MM/YYYY')) Between ? And ? ORDER BY FECHA DESC");
            pst.setString(1, usuario);
            pst.setString(2, usuario);
            pst.setString(3, tabla);
            pst.setString(4, tabla);
            pst.setString(5, accion);
            pst.setString(6, accion);
            pst.setLong(7, vehiculo);
            pst.setLong(8, vehiculo);
            pst.setString(9, fechai);
            pst.setString(10, fechaf);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Auditoria.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    /**
     *
     * @param Servicio (int) Servicio de los vehiculos
     * @param Fi (int) Fecha Inicial de las Vigencias de las Carteras
     * @param Ff (int) Fecha Final de las Vigencias de las Carteras
     * @throws java.sql.SQLException
     *
     */
    public void CarteraInfotic(int Servicio, int Fi, int Ff) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }//end If 

        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("CREATE or REPLACE VIEW VR_INFOTIC\n"
                    + "AS (SELECT V.PLACA, Decode(V.Servicio,1,'PARTICULAR',2,'PUBLICO',4,'OFICIAL',3,'DIPLOMATICO',5,'OTROS',6,'ESPECIAL') servicio, CO.NOMBRE COLOR, V.MODELO, M.NOMBRE MARCA, L.NOMBRE LINEA, C.REFERENCIA VIGENCIA, EST_C.NOMBRE ESTADO_CARTERA, C.VALOR,\n"
                    + "NVL(INTERESES.VALOR,0) INTERESES, NVL(COSTAS.VALOR,0) COSTAS, NVL(EXTEMPORANEIDAD.VALOR,0) EXTEMPORANEIDAD,P.NOMBRE_1||' '||P.APELLIDO_1 NOMBRES,NVL(DI.DESCRIPCION,' n/a ') DIRECCION,NVL(P.CELULAR,' n/a ') CELULAR, NVL(DI.TELEFONO,' n/a ') TELEFONO \n"
                    + "FROM CARTERAS C \n"
                    + "INNER JOIN VEHICULOS V\n"
                    + "ON V.ID_VEHICULO = C.FK_VEHICULO AND V.ESTADO IN(1,5) and SERVICIO ='" + Servicio + "' \n"
                    + "INNER JOIN HISTORICO_COLOR HC\n"
                    + "ON HC.FK_VEHICULO = V.ID_VEHICULO AND HC.FECHA_FIN IS NULL\n"
                    + "INNER JOIN COLORES CO\n"
                    + "ON CO.ID_COLOR = HC.FK_COLOR\n"
                    + "INNER JOIN LINEAS L\n"
                    + "ON L.ID_LINEA = V.FK_LINEA\n"
                    + "INNER JOIN MARCAS M\n"
                    + "ON M.CODIGO = L.FK_MARCA\n"
                    + "INNER JOIN PARAMETROS EST_C\n"
                    + "ON EST_C.CODIGO = C.ESTADO_CARTERA AND EST_C.FK_GRUPO = 21\n"
                    + "LEFT JOIN DETALLE_CARTERAS INTERESES\n"
                    + "ON INTERESES.FK_CARTERA = C.ID_CARTERA AND INTERESES.FK_CONCEPTO = 249\n"
                    + "LEFT JOIN DETALLE_CARTERAS COSTAS\n"
                    + "ON COSTAS.FK_CARTERA = C.ID_CARTERA AND COSTAS.FK_CONCEPTO = 276\n"
                    + "LEFT JOIN DETALLE_CARTERAS EXTEMPORANEIDAD\n"
                    + "ON EXTEMPORANEIDAD.FK_CARTERA = C.ID_CARTERA AND EXTEMPORANEIDAD.FK_CONCEPTO IN(83, 84, 85, 86, 87, 257, 258)\n"
                    + "INNER JOIN PERSONAS P ON P.ID_PERSONA = (SELECT MAX(FK_PERSONA) FROM PROPIETARIOS WHERE FK_VEHICULO = V.ID_VEHICULO)\n"
                    + "LEFT JOIN DIRECCIONES DI ON DI.FK_PERSONA = P.ID_PERSONA AND DI.ESTADO=1\n"
                    + "WHERE C.TIPO = 2 and C.REFERENCIA BETWEEN '" + Fi + "' AND '" + Ff + "')");
            pst.executeUpdate();

        } catch (Exception ex) {//try
            System.err.println("/* Error: View cartera Infotic \n causa: " + ex.getMessage());
        } finally {//Cath
            if (pst != null) {
                pst.close();
            }//end If
            if (rst != null) {
                rst.close();
            }//end If
        }//Finally
    }//End

    public java.util.LinkedList<Infotic> consultarCarteraInfotic() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList<Infotic> lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("Select * From VR_INFOTIC ORDER BY PLACA, VIGENCIA ASC");
            rst = pst.executeQuery();

            while (rst.next()) {
                lista.add(Infotic.load(rst));
            }
        } catch (Exception ex) {
            System.err.println("Error: Listado cartera Infotic \n causa: " + ex.getMessage());
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    /**
     *
     * @param fecha_ini fecha de incio de los pagos
     * @param fecha_fin fecha final de los pagos
     * @return Lista de Objectos DetPagoInfotic
     * @throws Error en la Conexion
     * @ver 1.1
     */
    public java.util.List<DetPagoInfotic> DetPagoinfoticList(String fecha_ini, String fecha_fin) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;

        java.util.LinkedList<DetPagoInfotic> lista = new java.util.LinkedList<DetPagoInfotic>();

        try {
            pst = con.prepareStatement("Select (Select Placa From vehiculos where id_vehiculo = Pa.Fk_Vehiculo) Placa, \n"
                    + "       ca.referencia, \n"
                    + "       Pa.Numero_Factura, \n"
                    + "       ca.valor, \n"
                    + "       Cos.Valor costa, \n"
                    + "       nvl((Select sum(valor) from detalle_carteras dc where dc.fk_cartera=ca.id_cartera and fk_concepto In (249)),0) interes, \n"
                    + "       nvl((Select sum(valor) from detalle_carteras dc where dc.fk_cartera=ca.id_cartera and fk_concepto In (3,80,81,82,83,84,85,86,87,257,258,267,268,269,270,271,272,273,274,275,1094)),0) extemp\n"
                    + "  From Pagos Pa \n"
                    + " Inner Join Detalle_Tiquetes Dt \n"
                    + "    On Dt.Fk_Tiquete = Pa.Fk_Tiquete And Dt.Fk_Cartera Is Not Null  \n"
                    + " Inner Join Carteras Ca \n"
                    + "    On Ca.Id_Cartera = Dt.Fk_Cartera \n"
                    + " left Join Detalle_Carteras Cos \n"
                    + "    On Cos.Fk_Cartera = Ca.Id_Cartera And Cos.fk_pago = pa.id_pago  \n"
                    + "   And Cos.Fk_Concepto In (276) \n"
                    + " Inner Join taquillas q On q.id_taquilla = pa.fk_taquilla \n"
                    + " Inner Join tiquetes ti On ti.id_tiquete = pa.fk_tiquete  \n"
                    + " Where Pa.Estado = 3  \n"
                    + "And ti.id_tiquete = dt.fk_tiquete \n"
                    + "and ti.estado = 3 \n"
                    + "and ti.fk_taquilla = q.id_taquilla \n"
                    + "and q.estado = 5 \n"
                    + "and TO_DATE(TO_CHAR(ti.fecha,'dd/MM/yyyy'),'dd/MM/yyyy') BETWEEN TO_DATE('" + fecha_ini + "','dd/MM/yyyy') AND TO_DATE('" + fecha_fin + "','dd/MM/yyyy')   \n"
                    + " Group By Pa.Numero_Factura,ca.id_cartera,pa.fk_vehiculo,ca.referencia,ca.valor,Cos.Valor,Cos.Id_Detalle_Cartera\n"
                    + " Order By Pa.Numero_Factura Asc");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(DetPagoInfotic.load(rst));
            }
        } catch (SQLException ex) {
            System.out.println("Error detpagoinfoticlist \n /* " + ex);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List<PagoInfotic> PagoinfoticList(String fecha_ini, String fecha_fin) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList<PagoInfotic> lista = new java.util.LinkedList<PagoInfotic>();
        try {
            pst = con.prepareStatement("SELECT Nvl((Select Placa From vehiculos where id_vehiculo = Pa.Fk_Vehiculo),'financiacion') Placa,\n"
                    + "  Pa.Numero_Factura,\n"
                    + "  Pa.Fecha,\n"
                    + "  Pa.Valor_Total,\n"
                    + "  SUM(dt.valor_total),\n"
                    + "  52,\n"
                    + "  DECODE(Ca.Tipo, '2', 'Vigencia', '3', 'financiacion') Tipo_Factura,\n"
                    + "  MIN(ca.referencia),\n"
                    + "  MAX(ca.referencia)\n"
                    + "FROM Pagos Pa \n"
                    + "INNER JOIN Detalle_Tiquetes Dt\n"
                    + "ON Dt.Fk_Tiquete   = Pa.Fk_Tiquete\n"
                    + "AND Dt.Fk_Cartera IS NOT NULL \n"
                    + "INNER JOIN Carteras Ca\n"
                    + "ON Ca.Id_Cartera = Dt.Fk_Cartera \n"
                    + "INNER JOIN taquillas q\n"
                    + "ON q.id_taquilla = Pa.fk_taquilla \n"
                    + "INNER JOIN tiquetes ti\n"
                    + "ON ti.id_tiquete   = Pa.Fk_Tiquete \n"
                    + "WHERE Pa.Estado    = 3\n"
                    + "AND ti.id_tiquete  = dt.fk_tiquete\n"
                    + "AND ti.estado      = 3\n"
                    + "AND ti.fk_taquilla = q.id_taquilla \n"
                    + "AND q.estado       = 5\n"
                    + "and TO_DATE(TO_CHAR(ti.fecha,'dd/MM/yyyy'),'dd/MM/yyyy') BETWEEN TO_DATE('" + fecha_ini + "','dd/MM/yyyy') AND TO_DATE('" + fecha_fin + "','dd/MM/yyyy')   \n"
                    + "GROUP BY Pa.Numero_Factura,\n"
                    + "  Pa.Fecha,\n"
                    + "  Pa.Valor_Total,\n"
                    + "  Ca.Tipo,\n"
                    + "  Pa.Fk_Vehiculo\n"
                    + "ORDER BY Pa.Numero_Factura ASC");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(PagoInfotic.load(rst));
            }
        } catch (Exception ex) {
            System.out.println("Error pagoinfoticlist \n /* " + ex);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public void adicionarRadicacionRNMA(Radicacion_RNMA radicacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into radicacion_rnma (fk_formulario,orden_ejecucion,nomb_tipo_registro,factura,fecha_factura,valor_factura,rodaje,tipo_cabina,partida_arancelaria,identificacion_gps,empresa_habilitacion,tipo_documento_soporte,documento_soporte,fecha_soporte,entidad_exp_soporte)\n"
                    + "values\n"
                    + "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setLong(1, radicacion.getFk_formulario());
            pst.setLong(2, radicacion.getOrden_ejecucion());
            pst.setString(3, radicacion.getNomb_tipo_registro());
            pst.setString(4, radicacion.getFactura());
            pst.setDate(5, radicacion.getFecha_factura());
            pst.setString(6, radicacion.getValor_factura());
            pst.setInt(7, radicacion.getRodaje());
            pst.setInt(8, radicacion.getTipo_cabina());
            pst.setString(9, radicacion.getPartida_arancelaria());
            pst.setString(10, radicacion.getIdentificacion_gps());
            pst.setLong(11, radicacion.getEmpresa_habilitacion());
            pst.setInt(12, radicacion.getTipo_documento_soporte());
            pst.setString(13, radicacion.getDocumento_soporte());
            pst.setDate(14, radicacion.getFecha_soporte());
            pst.setString(15, radicacion.getEntidad_exp_soporte());
            pst.setInt(16, radicacion.getTipodoc_vendedor());
            pst.setString(17, radicacion.getNo_documento_vendedor());

            pst.executeUpdate();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public List<Formulario_Cupl> listarCUPLSByFormulario(long fk_formulario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        List<Formulario_Cupl> list = new LinkedList();
        try {
            pst = con.prepareStatement("select * from formulario_cupl where fk_formulario = ? and fecha_fin is null and estado = 1");
            pst.setLong(1, fk_formulario);
            rst = pst.executeQuery();

            while (rst.next()) {
                list.add(Formulario_Cupl.load(rst));
            }

        } catch (Exception exp) {
            //throw new SQLException("Error en InsertDetalles2 :"+exp);
            System.out.println("Error :" + exp);
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
        return list;
    }

    public Radicacion_RNMA consultarRadicacionRNMAByFk_formulario(long fk_formulario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select * from radicacion_rnma where fk_formulario = ?");
            pst.setLong(1, fk_formulario);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Radicacion_RNMA.load(rst);
            }

        } catch (Exception EX) {
            System.err.println("Error Implementado en ProcesarPlanoInfotic: CargueCobro.java");
            EX.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;
    }

    public Importacion_Temporal_RNMA consultarImportacionRNMAByFk_formulario(long fk_formulario) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("select * from importacion_temporal_rnma where fk_formulario = ?");
            pst.setLong(1, fk_formulario);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Importacion_Temporal_RNMA.load(rst);
            }

        } catch (Exception EX) {
            System.err.println("Error Implementado en ProcesarPlanoInfotic: CargueCobro.java");
            EX.printStackTrace();
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return null;
    }

    public void adicionarFormularioCUPL(Formulario_Cupl frm) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO FORMULARIO_CUPL (FK_FORMULARIO,NO_CUPL,FECHA_INICIO,ESTADO)VALUES(?,?,sysdate,?)");
            pst.setLong(1, frm.getFk_formulario());
            pst.setString(2, frm.getNo_cupl());
            pst.setLong(3, frm.getEstado());
            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public void adicionarImportacionTemporalRNMA(Importacion_Temporal_RNMA importacion) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("insert into importacion_temporal_rnma(fk_formulario,pais_registro_maquinaria,puerto_ingreso,nro_aceptacion,condicion_ingreso,resultado_revision,documento_revision,fecha_revision,entidad_revision,fecha_expedicion,fecha_vencimiento)" + "values" + "(?,?,?,?,?,?,?,?,?,?,?)");

            pst.setLong(1, importacion.getFk_formulario());
            pst.setInt(2, importacion.getPais_registro_maquinaria());
            pst.setString(3, importacion.getPuerto_ingreso());
            pst.setString(4, importacion.getNro_aceptacion());
            pst.setString(5, importacion.getCondicion_ingreso());
            pst.setString(6, importacion.getResultado_revision());
            pst.setString(7, importacion.getDocumento_revision());
            pst.setDate(8, importacion.getFecha_revision());
            pst.setString(9, importacion.getEntidad_revision());
            pst.setDate(10, importacion.getFecha_expedicion());
            pst.setDate(11, importacion.getFecha_vencimiento());
            pst.execute();

        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
    //***//

    public java.util.List getSecuenciaByTramiteRnma(int tramite) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT NOMBRE_CORTO FROM CONFIGURACION_TRAMITES,PARAMETROS WHERE FK_RECURSO = CODIGO AND FK_GRUPO = 501 AND FECHA_FIN IS NULL AND FK_TRAMITE = ? GROUP BY NOMBRE_CORTO ORDER BY MAX(ID_PARAMETRO)");
            pst.setInt(1, tramite);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(rst.getString(1));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List listarTramitesByMotivoSinHuella(int motivo) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT C.* FROM CONF_REGISTROSINHUELLA C, TRAMITES T WHERE C.MOTIVO = ? AND C.FECHA_FIN IS NULL AND C.ESTADO = 1 AND T.ID_TRAMITE = C.FK_TRAMITE ORDER BY T.NOMBRE");
            pst.setInt(1, motivo);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Motivos_sinhuella.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List ListaTramitebyconcepto(long id_conecpto, long fk_sede) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.LinkedList lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("Select * from sede_tramite_conceptos where fk_concepto=? and fk_sede=? and fecha_fin is null");
            pst.setLong(1, id_conecpto);
            pst.setLong(2, fk_sede);
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Sede_tramite_concepto.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public void registrarFrmAreaMetropolitana(long id_formulario, String Area, long id_municipio) throws SQLException {

        System.out.println("Entro en el registro del parametro");
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareStatement("insert into frm_mum_area values(?,?,?)");
            pst.setLong(1, id_formulario);
            pst.setString(2, Area);
            pst.setLong(3, id_municipio);

            pst.execute();

        } catch (Exception e) {
            throw new SQLException(" Error! no se ha podido registrar el frm_mun_Area " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
    }

    /*Descuento consulta*/
    public float consultarValorConceptoDescuento(long sede, int tramite, int valor1, int valor2) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT SUM(VALOR) "
                    + "FROM SEDE_TRAMITE_CONCEPTOS S,TRAMITE_CONCEPTOS T,CONCEPTOS C "
                    + "WHERE S.FK_CONCEPTO = C.ID_CONCEPTO AND S.FK_CONCEPTO = T.FK_CONCEPTO "
                    + "AND S.FECHA_FIN = to_date('31/12/2018') "
                    + "AND S.FK_TRAMITE = T.FK_TRAMITE "
                    + "AND S.FK_SEDE = ? "
                    + "AND S.FK_TRAMITE = ?  "
                    + "and t.fk_concepto in (32,33,34,35)"
                    + "AND (T.VALOR_1 = ?)"
                    + "AND (T.VALOR_2 = ? or t.valor_2 is null)");
            pst.setLong(1, sede);
            pst.setInt(2, tramite);
            pst.setInt(3, valor1);
            pst.setInt(4, valor2);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    //RETENCION 26 05 2016
    public java.util.List listarClasesVehiculo(String nombreTabla) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT * FROM PARAMETROS P WHERE P.FK_GRUPO=1 AND P.CODIGO IN(SELECT DISTINCT COD_CLASE_VEH FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH!=0) ORDER BY CODIGO");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Parametro.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public Parametro ConsultarClaseRetencionByCodigo(int codclase, String nombreTabla) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT * FROM PARAMETROS P WHERE P.FK_GRUPO=1 AND P.CODIGO IN(SELECT DISTINCT COD_CLASE_VEH FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH=" + codclase + ") ");
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Parametro.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public LinkedList listarMarcasRetencion(String nombreTabla) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaMarcas = new LinkedList();

        try {
            pst = con.prepareStatement("SELECT ID_MARCA_RETENCION ID_MARCA, ID_MARCA_RETENCION CODIGO, MARCA NOMBRE FROM MARCAS_RETENCION WHERE " + nombreTabla + " = 1 ORDER BY MARCA ");
            rst = pst.executeQuery();
            while (rst.next()) {
                listaMarcas.add(Marca.load(rst));
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar las marcas_retencion ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return listaMarcas;
    }

    public Marca ConsultarMarcaRetencionByNombre(String marca, String nombreTabla) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT ID_MARCA_RETENCION ID_MARCA, ID_MARCA_RETENCION CODIGO, MARCA NOMBRE FROM MARCAS_RETENCION WHERE " + nombreTabla + " = 1 AND MARCA = '" + marca + "' ");
            rst = pst.executeQuery();
            if (rst != null) {
                if (rst.next()) {
                    return Marca.load(rst);
                }
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    public LinkedList listarLineasRetencion(long fk_marca, String nombreTabla) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaLineas = new LinkedList();

        try {
            pst = con.prepareStatement("SELECT ID_LINEA_RETENCION ID_LINEA,LINEA NOMBRE,FK_MARCA_RETENCION FK_MARCA FROM LINEAS_RETENCION WHERE " + nombreTabla + " = 1 AND FK_MARCA_RETENCION = " + fk_marca + " ORDER BY LINEA");
            rst = pst.executeQuery();
            while (rst.next()) {
                listaLineas.add(Linea.load(rst));
            }
        } catch (Exception e) {
            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar las lineas retencion ");
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return listaLineas;
    }

    public java.util.List listarCilindrajes(long clase_veh, long fk_marca_retencion, long fk_linea_retencion, String nombreTabla) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            if (clase_veh == 0) {
                pst = con.prepareStatement("SELECT DISTINCT CILINDRAJE AS CILINDRAJE FROM AVALUOS_" + nombreTabla + " WHERE FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ORDER BY 1 ");
            } else {
                pst = con.prepareStatement("SELECT DISTINCT CILINDRAJE AS CILINDRAJE FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH=" + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ORDER BY 1 ");
            }
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(rst.getLong(1));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public long consultarCilindrajeRetencion(long clase_veh, long fk_marca_retencion, long fk_linea_retencion, int codtablaAvaluo, String nombreTabla, long cilindraje) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            if (clase_veh == 0) {
                pst = con.prepareStatement("SELECT CILINDRAJE FROM AVALUOS_" + nombreTabla + " WHERE FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))");
            } else if (codtablaAvaluo == 6) {
                pst = con.prepareStatement("SELECT CILINDRAJE FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH=" + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))");
            } else if (codtablaAvaluo == 7) {
                pst = con.prepareStatement("SELECT CILINDRAJE FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH=" + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))");
            } else {
                pst = con.prepareStatement("SELECT CILINDRAJE FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH=" + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))");
            }
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    public java.util.List listarCantPasajeros(long clase_veh, long fk_marca_retencion, long fk_linea_retencion, String nombreTabla, long cilindraje) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT DISTINCT CAPACIDAD_PASAJEROS AS CAPACIDAD_PASAJEROS FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH = " + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE = " + cilindraje + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ORDER BY 1 ");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(rst.getLong(1));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List listarCapaTonelaje(long clase_veh, long fk_marca_retencion, long fk_linea_retencion, String nombreTabla, long cilindraje) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            pst = con.prepareStatement("SELECT DISTINCT CAPACIDAD_TONELADAS AS CAPACIDAD_TONELADAS FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH = " + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE = " + cilindraje + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ORDER BY 1 ");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(rst.getString(1));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List listarModelos(long clase_veh, long fk_marca_retencion, long fk_linea_retencion, int codtablaAvaluo, String nombreTabla, long cilindraje, long cantPasajeros, String capaToneladas) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            if (clase_veh == 0) {
                pst = con.prepareStatement("SELECT DISTINCT MODELO AS MODELO FROM AVALUOS_" + nombreTabla + " WHERE FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ORDER BY 1 ");
            } else if (codtablaAvaluo == 6) {
                pst = con.prepareStatement("SELECT DISTINCT MODELO AS MODELO FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH=" + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND CAPACIDAD_PASAJEROS = " + cantPasajeros + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ORDER BY 1 ");
            } else if (codtablaAvaluo == 7) {
                pst = con.prepareStatement("SELECT DISTINCT MODELO AS MODELO FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH=" + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND CAPACIDAD_TONELADAS=" + capaToneladas + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ORDER BY 1 ");
            } else {
                pst = con.prepareStatement("SELECT DISTINCT MODELO AS MODELO FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH=" + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ORDER BY 1 ");
            }

            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(rst.getLong(1));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public float consultarValorAvaluo(long clase_veh, long fk_marca_retencion, long fk_linea_retencion, int codtablaAvaluo, String nombreTabla, long cilindraje, long modelo, long cantPasajeros, String capaToneladas) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            if (clase_veh == 0) {
                pst = con.prepareStatement("SELECT VALOR FROM AVALUOS_" + nombreTabla + " WHERE FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND MODELO = " + modelo + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))");
            } else if (codtablaAvaluo == 6) {
                pst = con.prepareStatement("SELECT VALOR FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH=" + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND CAPACIDAD_PASAJEROS = " + cantPasajeros + " AND MODELO = " + modelo + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ORDER BY 1 ");
            } else if (codtablaAvaluo == 7) {
                pst = con.prepareStatement("SELECT VALOR FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH=" + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND CAPACIDAD_TONELADAS=" + capaToneladas + " AND MODELO = " + modelo + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ORDER BY 1 ");
            } else {
                pst = con.prepareStatement("SELECT VALOR FROM AVALUOS_" + nombreTabla + " WHERE COD_CLASE_VEH=" + clase_veh + " AND FK_MARCA_RETENCION=" + fk_marca_retencion + " AND FK_LINEA_RETENCION= " + fk_linea_retencion + " AND CILINDRAJE=" + cilindraje + " AND MODELO = " + modelo + " AND VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ORDER BY 1 ");
            }

            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    public void adicionarValorRetencion(long idVehiculo, long idclase, long idmarca, long idlinea, long cilindraje, long modelo, long modalidadVeh, long carroceriaVeh, long codServicio, long subServicioVeh, long cantpasajeros, String capatonelaje, long vigencia, long fk_usuario, float valorAvaluo, float valorRetencion, int idtablaAva) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO VALORES_RETENCION (FK_VEHICULO,COD_CLASE,FK_MARCA_RETENCION,FK_LINEA_RETENCION,CILINDRAJE,MODELO,COD_MODALIDAD,COD_CARROCERIA,COD_SERVICIO,COD_SUBSERVICIO,CANTIDAD_PASAJEROS,CAPACIDAD_TONELADAS,VIGENCIA,FK_USUARIO,FECHA_PROCESO,VALOR_AVALUO,VALOR_RETENCION,COD_TABLA_AVALUO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,SYSDATE,?,?,?)");
            pst.setLong(1, idVehiculo);
            pst.setLong(2, idclase);
            pst.setLong(3, idmarca);
            pst.setLong(4, idlinea);
            pst.setLong(5, cilindraje);
            pst.setLong(6, modelo);
            pst.setLong(7, modalidadVeh);
            pst.setLong(8, carroceriaVeh);
            pst.setLong(9, codServicio);
            pst.setLong(10, subServicioVeh);
            pst.setLong(11, cantpasajeros);
            pst.setString(12, capatonelaje);
            pst.setLong(13, vigencia);
            pst.setLong(14, fk_usuario);
            pst.setFloat(15, valorAvaluo);
            pst.setFloat(16, valorRetencion);
            pst.setInt(17, idtablaAva);
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }

    public float consultarValorRetencionByFkVehiculoVigencia(long idVehiculo) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("SELECT V.VALOR_RETENCION FROM VALORES_RETENCION V WHERE V.FK_VEHICULO = ? AND V.VIGENCIA = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) ");
            pst.setLong(1, idVehiculo);
            rst = pst.executeQuery();
            if (rst.next()) {
                return rst.getFloat(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return 0;
    }

    /**
     * morosos
     *
     *
     * @throws java.sql.SQLException
     */
    public void createMorososPersonas() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("  CREATE OR REPLACE FORCE VIEW MOROSOS_PERSONA (PLACA, TIPO_DOCUMENTO, DOCUMENTO, NOMBRES, APELLIDO_1, APELLIDO_2, DIRECCION, CIUDAD, TELEFONO, VALOR) AS \n"
                    + "  SELECT PLACA,\n"
                    + "(SELECT DECODE(M.CODIGO,1,'C.C',2,'NIT',3,'C.E',4,'T.I',5,'P.P') FROM PROPIETARIOS P,PERSONAS S,PARAMETROS M WHERE P.FK_VEHICULO = V.ID_VEHICULO AND P.FK_PERSONA = S.ID_PERSONA AND S.TIPO_DOCUMENTO = M.CODIGO AND M.FK_GRUPO = 5 AND P.FECHA_FIN IS NULL AND ROWNUM = 1) TIPO_DOCUMENTO,\n"
                    + "(SELECT S.DOCUMENTO FROM PROPIETARIOS P,PERSONAS S WHERE P.FK_VEHICULO = V.ID_VEHICULO AND P.FK_PERSONA = S.ID_PERSONA AND P.FECHA_FIN IS NULL AND ROWNUM = 1) DOCUMENTO,\n"
                    + "(SELECT S.NOMBRE_1 FROM PROPIETARIOS P,PERSONAS S WHERE P.FK_VEHICULO = V.ID_VEHICULO AND P.FK_PERSONA = S.ID_PERSONA AND P.FECHA_FIN IS NULL AND ROWNUM = 1) NOMBRES,\n"
                    + "(SELECT S.APELLIDO_1 FROM PROPIETARIOS P,PERSONAS S WHERE P.FK_VEHICULO = V.ID_VEHICULO AND P.FK_PERSONA = S.ID_PERSONA AND P.FECHA_FIN IS NULL AND ROWNUM = 1) APELLIDO_1,\n"
                    + "(SELECT NVL(S.APELLIDO_2,'') FROM PROPIETARIOS P,PERSONAS S WHERE P.FK_VEHICULO = V.ID_VEHICULO AND P.FK_PERSONA = S.ID_PERSONA AND P.FECHA_FIN IS NULL AND ROWNUM = 1) APELLIDO_2,\n"
                    + "(SELECT MAX(D.DESCRIPCION) FROM PROPIETARIOS P,DIRECCIONES D WHERE P.FK_VEHICULO = V.ID_VEHICULO AND P.FK_PERSONA = D.FK_PERSONA AND P.FECHA_FIN IS NULL) DIRECCION,\n"
                    + "(SELECT I.NOMBRE_MUNICIPIO FROM PROPIETARIOS P,DIRECCIONES D,DIVIPO I WHERE P.FK_VEHICULO = V.ID_VEHICULO AND P.FK_PERSONA = D.FK_PERSONA AND D.FK_DIVIPO = I.ID_DIVIPO AND P.FECHA_FIN IS NULL AND ROWNUM = 1) CIUDAD,\n"
                    + "(SELECT D.TELEFONO FROM PROPIETARIOS P,DIRECCIONES D WHERE P.FK_VEHICULO = V.ID_VEHICULO AND P.FK_PERSONA = D.FK_PERSONA AND P.FECHA_FIN IS NULL AND ROWNUM = 1) TELEFONO,\n"
                    + "NVL((SELECT SUM(D.VALOR) FROM DETALLE_CARTERAS D,CARTERAS C WHERE D.FK_CARTERA = C.ID_CARTERA AND C.FK_VEHICULO = V.ID_VEHICULO AND C.ESTADO_CARTERA = 1 AND D.ESTADO = 1 AND D.VALOR > 0 AND D.FK_CONCEPTO NOT IN(249,276)),0) VALOR\n"
                    + "FROM VEHICULOS V\n"
                    + "WHERE V.ID_VEHICULO IN(SELECT FK_VEHICULO FROM CARTERAS WHERE ESTADO_CARTERA = 1)");
            rst = pst.executeQuery();

        } catch (Exception ex) {
            System.err.println("Error: Listado Morosos personas \n causa: " + ex.getMessage());
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

    }

    public void createMorososCartera(long deuda) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;

        try {
            pst = con.prepareStatement("CREATE OR REPLACE FORCE VIEW MOROSOS_CARTERA (TIPO_DOCUMENTO, DOCUMENTO, NOMBRES, APELLIDO_1, APELLIDO_2, DIRECCION, CIUDAD, TELEFONO, DEUDA) AS \n"
                    + "  SELECT W.TIPO_DOCUMENTO,W.DOCUMENTO,W.NOMBRES,W.APELLIDO_1,W.APELLIDO_2,W.DIRECCION,W.CIUDAD,W.TELEFONO,SUM(W.VALOR) DEUDA From Morosos_Persona W\n"
                    + "GROUP BY W.TIPO_DOCUMENTO,W.DOCUMENTO,W.NOMBRES,W.APELLIDO_1,W.APELLIDO_2,W.DIRECCION,W.CIUDAD,W.TELEFONO\n"
                    + "HAVING sum(valor)>=" + deuda + " \n"
                    + "ORDER BY W.TIPO_DOCUMENTO,W.DOCUMENTO,W.NOMBRES,W.APELLIDO_1,W.APELLIDO_2");
            rst = pst.executeQuery();

        } catch (Exception ex) {
            System.err.println("Error: Listado Morosos Carteras \n causa: " + ex.getMessage());
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

    }

    public java.util.List<Deudores> ListDeudores(long Deuda) throws java.sql.SQLException {

        java.sql.PreparedStatement pst = null;
        java.sql.ResultSet rst = null;
        java.util.List<Deudores> lista = new java.util.LinkedList<Deudores>();
        try {
            createMorososPersonas();
            createMorososCartera(Deuda);
            pst = con.prepareStatement("SELECT * FROM MOROSOS_CARTERA");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Deudores.Load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public java.util.List<java.util.HashMap> ListarVehiculosMatriculadosByaño(String año) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<java.util.HashMap> lista = new java.util.LinkedList<java.util.HashMap>();
        try {
            pst = con.prepareStatement("Select p.NOMBRE_1||' '||p.APELLIDO_1||' '||NVL(p.APELLIDO_2,'') nombre_propietario,\n"
                    + " ps.nombre tipo_documento,p.documento,\n"
                    + "Nvl(D.DESCRIPCION,' ') direccion,\n"
                    + "Nvl(D.TELEFONO,' ') telefono,\n"
                    + "Nvl(p.CELULAR,' ') celular,\n"
                    + "Nvl(p.EMAIL,' ') Email,\n"
                    + "V.PLACA placa,\n"
                    + "pa.NOMBRE clase,\n"
                    + "se.nombre Servicio,\n"
                    + "Sum(C.saldo) saldo,\n"
                    + "DECODE(C.PERIODO,1,'ENERO-ABRIL',2,'MAYO-AGOSTO',3,'SEPTIEMBRE-DICIEMBRE') PERIODO_DE_PAGO\n"
                    + "from formularios f \n"
                    + "inner join Radicaciones R on R.ID_RADICACION = f.FK_RADICACION and R.ESTADO=5\n"
                    + "inner join VEHICULOS V on V.PLACA  = f.placa and V.estado =1\n"
                    + "inner join PERSONAS p on p.ID_PERSONA in (select max(PROPIETARIOS.FK_PERSONA) from PROPIETARIOS where V.ID_VEHICULO = PROPIETARIOS.FK_VEHICULO and PROPIETARIOS.FECHA_FIN is null)\n"
                    + "left join CARTERAS C on C.FK_VEHICULO = V.ID_VEHICULO \n"
                    + "left join DIRECCIONES D on D.FK_PERSONA = p.ID_PERSONA\n"
                    + "inner join PARAMETROS pa on pa.FK_GRUPO = 1 and pa.CODIGO = V.CLASE_VEHICULO\n"
                    + "inner join parametros se on se.FK_GRUPO = 3 and se.CODIGO = V.SERVICIO\n"
                    + "inner join parametros ps on ps.fk_grupo=5 and ps.codigo=p.tipo_documento\n"
                    + "where f.FK_TRAMITE = 1 and to_date(to_char(f.FECHA_TRAMITE,'DD/MM/YYYY')) BETWEEN TO_DATE('01/01/" + año + "','dd/MM/yyyy') and TO_DATE('31/12/" + año + "','dd/MM/yyyy')\n"
                    + "group by V.placa,C.PERIODO,p.NOMBRE_1||' '||p.APELLIDO_1||' '||NVL(p.APELLIDO_2,''),D.DESCRIPCIOn,D.TELEFONO,p.CELULAR,p.EMAIL,pa.NOMBRE,V.CLASE_VEHICULO,se.nombre,ps.nombre,p.documento\n"
                    + "order by C.PERIODo,V.CLASE_VEHICULO");
//            pst.setString(1, año);
//            pst.setString(2, año);
            rst = pst.executeQuery();
            while (rst.next()) {
                ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap<String, String> hash = new java.util.HashMap<String, String>();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    hash.put(rsmd.getColumnName(i + 1), rst.getString(i + 1));
                }
                lista.add(hash);
            }
        } catch (Exception e) {
            throw new SQLException("Atencion no fue posible consultar vehiculos matriculados debido a " + e);
        } finally {
            if (pst != null) {
                pst.close();
                pst = null;
            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }
        return lista;

    }
//Transito//
    //*Preasignaciones vencidas*//

    public java.util.List listarPreasignacionesVencidas() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement prst = null;
        ResultSet rs = null;
        java.util.List lista = new java.util.LinkedList();
        try {
            prst = con.prepareStatement("Select \n"
                    + "Rp.ID_PREASIGNACION,Rp.PLACA,Rp.MOTOR,Rp.CHASIS,\n"
                    + "Rp.SERIE,Rp.VIN,Rp.SERVICIO,Rp.CLASE,\n"
                    + "Rp.ORIGEN_REGISTRO,Rp.TIPO,Rp.ESTADO,\n"
                    + "Rp.FECHA,Rp.MARCA,Rp.LINEA,Rp.MODELO,\n"
                    + "Rp.ACTA_IMPORTACION,Rp.ESTADO_AUTOMOTOR,\n"
                    + "Rp.NUMERO_SOLICITUD,Rp.ESTADO_SOLICITUD,\n"
                    + "Rp.FK_USUARIO,Rp.FK_PERSONA\n"
                    + "from Runt_Preasignacion Rp\n"
                    + "inner join Venales Vn  on Rp.Placa = Vn.Numero\n"
                    + "Left Join Vehiculos v on v.placa in (Rp.Placa)\n"
                    + "Where\n"
                    + "Vn.Estado in (3,5)\n"
                    + "and Vn.Fecha_Utilizacion is  null\n"
                    + "And Rp.Estado not in (2)\n"
                    + "group by\n"
                    + "v.placa,Rp.ID_PREASIGNACION,Rp.PLACA,Rp.MOTOR,\n"
                    + "Rp.CHASIS,Rp.SERIE,Rp.VIN,Rp.SERVICIO,\n"
                    + "Rp.CLASE,Rp.ORIGEN_REGISTRO,Rp.TIPO,Rp.ESTADO,\n"
                    + "Rp.FECHA,Rp.MARCA,Rp.LINEA,Rp.MODELO,\n"
                    + "Rp.ACTA_IMPORTACION,Rp.ESTADO_AUTOMOTOR,\n"
                    + "Rp.NUMERO_SOLICITUD,Rp.ESTADO_SOLICITUD,\n"
                    + "Rp.FK_USUARIO,Rp.FK_PERSONA\n"
                    + "having V.placa is null \n"
                    + "And \n"
                    + "(To_Date(To_Char(Sysdate,'DD/MM/YYYY')) - To_Date(To_Char(Rp.Fecha,'DD/MM/YYYY'))) > 60"); // orden
            rs = prst.executeQuery();
            while (rs.next()) {
                lista.add(Preasignacion.load(rs));
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
        }
        if (prst != null) {
            prst.close();
        }
        return lista;
    }

//Transito//
    public java.util.List listarTramiteByClase() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List lista = new java.util.LinkedList();

        try {
            pst = con.prepareStatement("SELECT * FROM TRAMITES WHERE CLASE_TRAMITE IN(1,2)");
            rst = pst.executeQuery();
            while (rst.next()) {
                lista.add(Tramite.load(rst));
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;
    }

    public long obtenerTramiteTotalByAño(long id_tramite, String año) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        long exc = 0;

        try {
            pst = con.prepareStatement("Select sum(suma) from (SELECT NVL(SUM(PA.VALOR_TOTAL),0)suma\n"
                    + "FROM RADICACIONES R\n"
                    + "INNER JOIN FORMULARIOS F\n"
                    + "ON R.ID_RADICACION = F.FK_RADICACION\n"
                    + "INNER JOIN PAGOS PA\n"
                    + "ON PA.ID_PAGO=F.FK_PAGO\n"
                    + "INNER JOIN TRAMITES TR\n"
                    + "ON TR.ID_TRAMITE=F.FK_TRAMITE\n"
                    + "WHERE PA.ESTADO=3\n"
                    + "AND R.ESTADO IN(5,7)\n"
                    + "AND TR.ID_TRAMITE           =?\n"
                    + "AND TO_CHAR(R.FECHA,'YYYY') = ?\n"
                    + "UNION\n"
                    + "SELECT NVL(SUM(PA.VALOR_TOTAL),0) suma\n"
                    + "FROM RADICACION_LICENCIAS R\n"
                    + "INNER JOIN FORMULARIO_LICENCIAS F\n"
                    + "ON R.ID_RADICACION_LICENCIA = F.FK_RADICACION\n"
                    + "INNER JOIN PAGOS PA\n"
                    + "ON PA.ID_PAGO=F.FK_PAGO\n"
                    + "INNER JOIN TRAMITES TR\n"
                    + "ON TR.ID_TRAMITE=F.FK_TRAMITE\n"
                    + "WHERE PA.ESTADO=3\n"
                    + "AND R.ESTADO IN(5,7)\n"
                    + "AND TR.ID_TRAMITE=?\n"
                    + "AND TO_CHAR(R.FECHA,'YYYY') = ?)");
            pst.setLong(1, id_tramite);
            pst.setString(2, año);
            pst.setLong(3, id_tramite);
            pst.setString(4, año);

            rst = pst.executeQuery();
            if (rst.next()) {
                exc = rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return exc;
    }

    public long obtenerTramiteCantidadByMes(long id_tramite, String mes) throws SQLException {

        PreparedStatement pst = null;
        ResultSet rst = null;
        long exc = 0;
        try {
            pst = con.prepareStatement("Select Sum(suma) from\n"
                    + "(\n"
                    + "SELECT COUNT(R.NUMERO) suma\n"
                    + "FROM RADICACIONES R\n"
                    + "INNER JOIN FORMULARIOS F\n"
                    + "ON R.ID_RADICACION = F.FK_RADICACION\n"
                    + "INNER JOIN TRAMITES TR\n"
                    + "ON TR.ID_TRAMITE=F.FK_TRAMITE\n"
                    + "WHERE TR.ID_TRAMITE= ?\n"
                    + "AND R.ESTADO IN (5,7)\n"
                    + "AND TO_CHAR(R.FECHA,'MM/YYYY') = ?\n"
                    + "UNION\n"
                    + "SELECT COUNT(R.NUMERO) suma\n"
                    + "FROM RADICACION_LICENCIAS R\n"
                    + "INNER JOIN FORMULARIO_LICENCIAS F\n"
                    + "ON R.ID_RADICACION_LICENCIA = F.FK_RADICACION\n"
                    + "INNER JOIN TRAMITES TR \n"
                    + "ON TR.ID_TRAMITE=F.FK_TRAMITE\n"
                    + "WHERE TR.ID_TRAMITE= ?\n"
                    + "AND R.ESTADO IN (5,7)\n"
                    + "AND TO_CHAR(R.FECHA,'MM/YYYY') = ?\n"
                    + ")");
            pst.setLong(1, id_tramite);
            pst.setString(2, mes);
            pst.setLong(3, id_tramite);
            pst.setString(4, mes);

            rst = pst.executeQuery();
            if (rst.next()) {
                exc = rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }

        return exc;

    }

    public long obtenerTramiteCantidadTotalByMes(long id_tramite, String mes) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        long exc = 0;

        try {
            pst = con.prepareStatement("SELECT SUM(CANTIDAD) FROM (\n"
                    + "SELECT NVL(SUM(PA.VALOR_TOTAL),0) CANTIDAD\n"
                    + "FROM RADICACIONES R\n"
                    + "INNER JOIN FORMULARIOS F\n"
                    + "ON R.ID_RADICACION = F.FK_RADICACION\n"
                    + "INNER JOIN PAGOS PA\n"
                    + "ON PA.ID_PAGO=F.FK_PAGO\n"
                    + "INNER JOIN TRAMITES TR\n"
                    + "ON TR.ID_TRAMITE=F.FK_TRAMITE\n"
                    + "WHERE PA.ESTADO =3\n"
                    + "AND R.ESTADO IN (5,7)\n"
                    + "AND TR.ID_TRAMITE = ?\n"
                    + "AND TO_CHAR(R.FECHA,'MM/YYYY') = ?\n"
                    + "UNION\n"
                    + "SELECT NVL(SUM(PA.VALOR_TOTAL),0) CANTIDAD\n"
                    + "FROM RADICACION_LICENCIAS R\n"
                    + "INNER JOIN Formulario_Licencias F\n"
                    + "ON R.ID_RADICACION_LICENCIA = F.FK_RADICACION\n"
                    + "INNER JOIN PAGOS PA\n"
                    + "ON PA.ID_PAGO=F.FK_PAGO\n"
                    + "INNER JOIN TRAMITES TR\n"
                    + "ON TR.ID_TRAMITE               =F.FK_TRAMITE\n"
                    + "WHERE PA.ESTADO                =3\n"
                    + "AND R.ESTADO  IN (5,7)\n"
                    + "AND TR.ID_TRAMITE              =?\n"
                    + "AND TO_CHAR(R.FECHA,'MM/YYYY') = ?)");
            pst.setLong(1, id_tramite);
            pst.setString(2, mes);
            pst.setLong(3, id_tramite);
            pst.setString(4, mes);

            rst = pst.executeQuery();
            if (rst.next()) {
                exc = rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return exc;
    }

    public long ObtenerTotalTramitesbyMes(String mes) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        long exc = 0;

        try {
            pst = con.prepareStatement("SELECT SUM(CANTIDAD) FROM (SELECT NVL(SUM(PA.VALOR_TOTAL),0) CANTIDAD\n"
                    + "FROM RADICACIONES R\n"
                    + "INNER JOIN FORMULARIOS F\n"
                    + "ON R.ID_RADICACION = F.FK_RADICACION\n"
                    + "INNER JOIN PAGOS PA\n"
                    + "ON PA.ID_PAGO=F.FK_PAGO\n"
                    + "INNER JOIN TRAMITES TR\n"
                    + "ON TR.ID_TRAMITE =F.FK_TRAMITE\n"
                    + "WHERE PA.ESTADO =3\n"
                    + "AND R.ESTADO  IN(5,7)\n"
                    + "AND TO_CHAR(R.FECHA,'MM/YYYY') = ?\n"
                    + "UNION\n"
                    + "SELECT NVL(SUM(PA.VALOR_TOTAL),0) CANTIDAD\n"
                    + "FROM RADICACION_LICENCIAS R\n"
                    + "INNER JOIN FORMULARIO_LICENCIAS F\n"
                    + "ON R.ID_RADICACION_LICENCIA = F.FK_RADICACION\n"
                    + "INNER JOIN PAGOS PA\n"
                    + "ON PA.ID_PAGO=F.FK_PAGO\n"
                    + "INNER JOIN TRAMITES TR\n"
                    + "ON TR.ID_TRAMITE =F.FK_TRAMITE\n"
                    + "WHERE PA.ESTADO =3\n"
                    + "AND R.ESTADO  IN(5,7)\n"
                    + "AND TO_CHAR(R.FECHA,'MM/YYYY') =?)");

            pst.setString(1, mes);
            pst.setString(2, mes);

            rst = pst.executeQuery();
            if (rst.next()) {
                exc = rst.getLong(1);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return exc;
    }

    public java.util.List<java.util.HashMap> ReporteExcelTramite(String fecha_ini, String fecha_fin, long tramite) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<java.util.HashMap> reporte = new LinkedList<HashMap>();
        try {
            pst = con.prepareStatement("Select * from (SELECT  r.NUMERO radicacion,\n"
                    + "  t.nombre,\n"
                    + "  r.fecha,\n"
                    + "  f.placa,\n"
                    + "  1 cantidad,\n"
                    + "  (SELECT p.nombre\n"
                    + "  FROM parametros p\n"
                    + "  WHERE p.fk_grupo = 3\n"
                    + "  AND p.codigo= v.servicio\n"
                    + "  ) AS servicio\n"
                    + "FROM radicaciones r,\n"
                    + "  formularios f ,\n"
                    + "  tramites t,\n"
                    + "  vehiculos v\n"
                    + "WHERE f.fk_radicacion = r.id_radicacion\n"
                    + "AND t.id_tramite= f.fk_tramite\n"
                    + "AND v.placa= f.placa\n"
                    + "AND r.estado IN (4,5)\n"
                    + "AND r.fecha BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "'\n"
                    + "AND f.fk_tramite =" + tramite + "\n"
                    + "union\n"
                    + "SELECT  r.NUMERO radicacion,\n"
                    + "  t.nombre,\n"
                    + "  r.fecha,\n"
                    + "  'N/A' placa,\n"
                    + "  1 cantidad,\n"
                    + "  'N/A' AS servicio\n"
                    + "FROM RADICACION_LICENCIAS r,\n"
                    + "  FORMULARIO_LICENCIAS f ,\n"
                    + "  tramites t\n"
                    + "WHERE f.FK_RADICACION = r.ID_RADICACION_LICENCIA\n"
                    + "AND t.id_tramite= f.fk_tramite\n"
                    + "AND r.estado IN (4,5)\n"
                    + "AND r.fecha BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "'\n"
                    + "AND f.fk_tramite =" + tramite + ") order by nombre asc");

            rst = pst.executeQuery();
            while (rst.next()) {
                ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap<String, String> hash = new java.util.HashMap<String, String>();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    hash.put(rsmd.getColumnName(i + 1), rst.getString(i + 1));
                }
                reporte.add(hash);
            }
        } catch (Exception e) {
            System.out.println("Error Listado Detalle Cobro Coactivo Debido a -->" + e);
            throw new SQLException("Error Listado Detalle Cobro Coactivo Debido a" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return reporte;
    }

    /*taquilas*/
    public Taquilla TaquillasSinDistribuirByUsuario(long fk_usuario) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            pst = con.prepareStatement("Select * from taquillas ta where Ta.Fk_Usuario= ? and Ta.Estado = 3 order by 1 Asc");
            pst.setLong(1, fk_usuario);

            rst = pst.executeQuery();
            if (rst.next()) {
                return Taquilla.load(rst);
            }
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return null;
    }

    /*Call procedure auto cuadre */
    public void AutoCuadre() throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }

        PreparedStatement pst = null;

        try {

            pst = con.prepareCall("{Call Cuadreautomatico(to_char(Sysdate,'DD/MM/YYYY'),To_char(Sysdate+1,'DD/MM/YYYY'))}");
            pst.execute();

        } catch (Exception e) {

            throw new SQLException(" Error! no se ha podido registrar el Contexto ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
        }
    }

    ///Metodo reporte de licencias
    public java.util.List<java.util.HashMap> getLicencias(String fIni, String fFin) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException("NO HAY CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<java.util.HashMap> lista = new java.util.LinkedList<java.util.HashMap>();
        try {
            pst = con.prepareStatement("Select \n"
                    + " Td.Nombre_Corto \"Documento\"\n"
                    + ",Pe.Documento \n"
                    + ",Trim(Pe.Nombre_1)||' '||Decode(Trim(Nvl(Pe.Nombre_2,' ')),' ',Trim(Nvl(Pe.Nombre_2,' ')))||Trim(' '||Nvl(Pe.Apellido_1,' '))||' '||Trim(' '||Nvl(Pe.Apellido_2,' ')) as Nombres\n"
                    + ",Pe.Fecha_Nac \"FECHA NACIMIENTO\"\n"
                    + ",Lc.Numero_Licencia \"LICENCIA NUMERO\"\n"
                    + ",Lc.Categoria\n"
                    + ",Cast(Fl.Fecha_Proceso as Date) fecha\n"
                    + ",Di.Descripcion\n"
                    + ",Di.Telefono\n"
                    + ",Pe.Celular\n"
                    + "from\n"
                    + "Formulario_Licencias fl \n"
                    + "Inner join Radicacion_Licencias Rl on Rl.Id_Radicacion_Licencia=Fl.Fk_Radicacion and Rl.Estado=5\n"
                    + "Inner join Personas pe on Pe.Id_Persona = Fl.Fk_Persona\n"
                    + "left join Parametros td on Td.Fk_Grupo = 5 and Td.Codigo = Pe.Tipo_Documento \n"
                    + "Left Join Direcciones di on Di.Fk_Persona = Pe.Id_Persona and Di.Estado = 1 \n"
                    + "Left join Licencias_Conduccion lc on Lc.Fk_Radicacion_Licencia= Rl.Id_Radicacion_Licencia\n"
                    + "where To_Date(To_Char(Rl.Fecha)) Between '" + fIni + "' and '" + fFin + "' ");
            rst = pst.executeQuery();
            while (rst.next()) {
                ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap<String, String> hash = new java.util.HashMap<String, String>();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    hash.put(rsmd.getColumnName(i + 1), rst.getString(i + 1));
                }
                lista.add(hash);
            }
        } catch (Exception e) {
            throw new SQLException("Error al generar reporte de licencias: \r\n " + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return lista;

    }

    public boolean IngresarTasaUsura(String vigencia, String mes, String tasa, Usuario user, java.sql.Date fecha_ingreso) throws Exception {
        int insertar = 0;
        String q4 = "INSERT INTO INTERESES VALUES(S_INTERESES.nextval,?,?,?,?,?)";

        //true   sec_codigolibros.nextval
        //msg
        //01/01/+vigencia
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        //averiguo si la vigencia esta en la tabla de bisiestos
        boolean bisiesto = saberSiBisiesto(vigencia);

        PreparedStatement pst = null;
        int m1 = Integer.parseInt(mes);
        String fechaInicial;
        String fechaFinal;
        float calculoTasa = (Float.parseFloat(tasa) / 100);
        String Tasa = Float.toString(calculoTasa);

        switch (m1) {
            case 1:
                try {
                    fechaInicial = "01/01/" + vigencia;
                    fechaFinal = "01/31/" + vigencia;
                    pst = con.prepareStatement(q4);
                    pst.setString(1, fechaInicial);
                    pst.setString(2, fechaFinal);
                    pst.setString(3, Tasa);
                    pst.setString(4, user.getNombre());
                    pst.setDate(5, fecha_ingreso);

                    insertar = pst.executeUpdate();
                    if (insertar > 0) {
                        return true;
                    }

                } catch (Exception e) {

                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {

                    if (pst != null) {
                        pst.close();
                        pst = null;

                    }
                }
                break;
            case 2:
                try {
                    //si bisiesto es verdadero la vigencia es de un año bisiesto
                    if (bisiesto == true) {
                        fechaInicial = "02/01/" + vigencia;
                        fechaFinal = "02/29/" + vigencia;
                        pst = con.prepareStatement(q4);
                        pst.setString(1, fechaInicial);
                        pst.setString(2, fechaFinal);
                        pst.setString(3, Tasa);
                        pst.setString(4, user.getNombre());
                        pst.setDate(5, fecha_ingreso);
                        insertar = pst.executeUpdate();
                        if (insertar > 0) {
                            return true;
                        }
                    } else {
                        fechaInicial = "02/01/" + vigencia;
                        fechaFinal = "02/28/" + vigencia;
                        pst = con.prepareStatement(q4);
                        pst.setString(1, fechaInicial);
                        pst.setString(2, fechaFinal);
                        pst.setString(3, Tasa);
                        pst.setString(4, user.getNombre());
                        pst.setDate(5, fecha_ingreso);
                        insertar = pst.executeUpdate();
                        if (insertar > 0) {
                            return true;
                        }
                    }

                } catch (Exception e) {

                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {
                    if (pst != null) {
                        pst.close();
                        pst = null;
                    }
                }

                break;
            case 3:
                try {
                    fechaInicial = "03/01/" + vigencia;
                    fechaFinal = "03/31/" + vigencia;
                    pst = con.prepareStatement(q4);
                    pst.setString(1, fechaInicial);
                    pst.setString(2, fechaFinal);
                    pst.setString(3, Tasa);
                    pst.setString(4, user.getNombre());
                    pst.setDate(5, fecha_ingreso);
                    insertar = pst.executeUpdate();
                    if (insertar > 0) {
                        return true;
                    }
                } catch (Exception e) {

                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {
                    if (pst != null) {
                        pst.close();
                        pst = null;
                    }
                }

                break;
            case 4:
                try {
                    fechaInicial = "04/01/" + vigencia;
                    fechaFinal = "04/30/" + vigencia;
                    pst = con.prepareStatement(q4);
                    pst.setString(1, fechaInicial);
                    pst.setString(2, fechaFinal);
                    pst.setString(3, Tasa);
                    pst.setString(4, user.getNombre());
                    pst.setDate(5, fecha_ingreso);
                    insertar = pst.executeUpdate();
                    if (insertar > 0) {
                        return true;
                    }
                } catch (Exception e) {
                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {
                    if (pst != null) {
                        pst.close();
                        pst = null;
                    }
                }

                break;
            case 5:
                try {
                    fechaInicial = "05/01/" + vigencia;
                    fechaFinal = "05/31/" + vigencia;
                    pst = con.prepareStatement(q4);
                    pst.setString(1, fechaInicial);
                    pst.setString(2, fechaFinal);
                    pst.setString(3, Tasa);
                    pst.setString(4, user.getNombre());
                    pst.setDate(5, fecha_ingreso);
                    insertar = pst.executeUpdate();
                    if (insertar > 0) {
                        return true;
                    }

                } catch (Exception e) {

                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {
                    if (pst != null) {
                        pst.close();
                        pst = null;

                    }
                }

                break;
            case 6:
                try {
                    fechaInicial = "06/01/" + vigencia;
                    fechaFinal = "06/30/" + vigencia;
                    pst = con.prepareStatement(q4);
                    pst.setString(1, fechaInicial);
                    pst.setString(2, fechaFinal);
                    pst.setString(3, Tasa);
                    pst.setString(4, user.getNombre());
                    pst.setDate(5, fecha_ingreso);
                    insertar = pst.executeUpdate();
                    if (insertar > 0) {
                        return true;
                    }

                } catch (Exception e) {

                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {

                    if (pst != null) {
                        pst.close();
                        pst = null;

                    }
                }

                break;
            case 7:
                try {
                    fechaInicial = "07/01/" + vigencia;
                    fechaFinal = "07/31/" + vigencia;
                    pst = con.prepareStatement(q4);
                    pst.setString(1, fechaInicial);
                    pst.setString(2, fechaFinal);
                    pst.setString(3, Tasa);
                    pst.setString(4, user.getNombre());
                    pst.setDate(5, fecha_ingreso);
                    insertar = pst.executeUpdate();
                    if (insertar > 0) {
                        return true;
                    }

                } catch (Exception e) {

                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {

                    if (pst != null) {
                        pst.close();
                        pst = null;

                    }
                }

                break;
            case 8:
                try {
                    fechaInicial = "08/01/" + vigencia;
                    fechaFinal = "08/31/" + vigencia;
                    pst = con.prepareStatement(q4);
                    pst.setString(1, fechaInicial);
                    pst.setString(2, fechaFinal);
                    pst.setString(3, Tasa);
                    pst.setString(4, user.getNombre());
                    pst.setDate(5, fecha_ingreso);
                    insertar = pst.executeUpdate();
                    if (insertar > 0) {
                        return true;
                    }

                } catch (Exception e) {

                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {

                    if (pst != null) {
                        pst.close();
                        pst = null;

                    }
                }

                break;
            case 9:
                try {
                    fechaInicial = "09/01/" + vigencia;
                    fechaFinal = "09/30/" + vigencia;
                    pst = con.prepareStatement(q4);
                    pst.setString(1, fechaInicial);
                    pst.setString(2, fechaFinal);
                    pst.setString(3, Tasa);
                    pst.setString(4, user.getNombre());
                    pst.setDate(5, fecha_ingreso);
                    insertar = pst.executeUpdate();
                    if (insertar > 0) {
                        return true;
                    }

                } catch (Exception e) {

                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {

                    if (pst != null) {
                        pst.close();
                        pst = null;

                    }
                }

                break;
            case 10:
                try {
                    fechaInicial = "10/01/" + vigencia;
                    fechaFinal = "10/31/" + vigencia;
                    pst = con.prepareStatement(q4);
                    pst.setString(1, fechaInicial);
                    pst.setString(2, fechaFinal);
                    pst.setString(3, Tasa);
                    pst.setString(4, user.getNombre());
                    pst.setDate(5, fecha_ingreso);
                    insertar = pst.executeUpdate();
                    if (insertar > 0) {
                        return true;
                    }

                } catch (Exception e) {

                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {

                    if (pst != null) {
                        pst.close();
                        pst = null;

                    }
                }

                break;
            case 11:
                try {
                    fechaInicial = "11/01/" + vigencia;
                    fechaFinal = "11/30/" + vigencia;
                    pst = con.prepareStatement(q4);
                    pst.setString(1, fechaInicial);
                    pst.setString(2, fechaFinal);
                    pst.setString(3, Tasa);
                    pst.setString(4, user.getNombre());
                    pst.setDate(5, fecha_ingreso);
                    insertar = pst.executeUpdate();
                    if (insertar > 0) {
                        return true;
                    }

                } catch (Exception e) {

                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {

                    if (pst != null) {
                        pst.close();
                        pst = null;

                    }
                }

                break;
            case 12:
                try {
                    fechaInicial = "12/01/" + vigencia;
                    fechaFinal = "12/31/" + vigencia;
                    pst = con.prepareStatement(q4);
                    pst.setString(1, fechaInicial);
                    pst.setString(2, fechaFinal);
                    pst.setString(3, Tasa);
                    pst.setString(4, user.getNombre());
                    pst.setDate(5, fecha_ingreso);
                    insertar = pst.executeUpdate();
                    if (insertar > 0) {
                        return true;
                    } else {
                        return false;
                    }

                } catch (Exception e) {

                    throw new SQLException(" Error! no se ha podido registrar la tasa ");

                } finally {

                    if (pst != null) {
                        pst.close();
                        pst = null;

                    }
                }

            //break;
        }

        //flase  
        //insertar
        return false;
    }

    public int alertaTasaUsura() throws Exception {
        int diferenciaDias = 0;
        try {
            Calendar cal = Calendar.getInstance();
            int añoServer = cal.get(Calendar.YEAR);
            int diaServer = (cal.get(Calendar.DATE));
            int mesServer = (cal.get(Calendar.MONTH));

            mesServer = mesServer + 1;
            //obtiene la tabla de las tasas de usuras
            String Tasa[][] = getIntereses();//recorre los registros de la tabla de intereses                
            String fechaFinalTasa = Tasa[consultarMaxCodigo() - 1][1];//obtiene la fecha final del ultimo registro insertado en la tabla intereses
            String fechaPenultimaTasa = Tasa[consultarMaxCodigo() - 2][1];//obtiene la penultima fecha  del ultimo registro insertado en la tabla intereses
            String yearTasa = fechaFinalTasa.substring(6);//obtengo la vigencia actual del ultimo registro de la tabla intereses
            int añoTasa = Integer.parseInt(yearTasa);
            String monthTasa = fechaFinalTasa.substring(0, 2); //obtengo el mes de la vigencia actual del ultimo registro de la tabla intereses
            int mesTasa = Integer.parseInt(monthTasa);
            String dayTasa = fechaFinalTasa.substring(3, 5);
            int diaFinalTasa = Integer.parseInt(dayTasa);
            String dayTasapenultimo = fechaPenultimaTasa.substring(3, 5);
            int penultimoDay = Integer.parseInt(dayTasapenultimo);
            //si la vigencia es igual a la vigencia de la tasa
            if (añoServer == añoTasa) {
                //si el mes de la tasa es igual a la del servidor
                if (mesTasa == mesServer) {
                    if(diaFinalTasa == diaServer){
                      diferenciaDias = 1;
                    }else{
                    diferenciaDias = diaFinalTasa - diaServer;
                    }
                }//si el mes de la tasa es mayor que el del servidor
                else if (mesTasa > mesServer) {
                    diferenciaDias = penultimoDay - diaServer;
                    diferenciaDias = diferenciaDias + diaFinalTasa;
                }//si el mes de la tasa es menor que el del servidor la diferencia se envia como cero para que lo envie a diligenciar la tasa de usura
                else if (mesTasa < mesServer) {
                    diferenciaDias = 0;
                }
            } //si ya se ingreso la tasa de usura para el mes de enero de la vigencia proxima
            else if (añoServer < añoTasa) {
                diferenciaDias = penultimoDay - diaServer;
                diferenciaDias = diferenciaDias + diaFinalTasa;

            } else {
                diferenciaDias = 0;
            }

        } catch (Exception e) {
            System.out.println("Ha ocurrido una Error. ");

        }

        return diferenciaDias;
    }

    public boolean saberSiBisiesto(String year) throws Exception {

        int buscar = 0;
        boolean bandera = false;
        String q = "select idvigencia from bisiestos where vigencia=?";
        PreparedStatement pst = null;
        ResultSet resultado;
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        try {
            pst = con.prepareStatement(q);
            pst.setString(1, year);
            resultado = pst.executeQuery();
            while (resultado.next()) {
                buscar = (resultado.getInt("idvigencia"));//
            }//fin del while 
            bandera = buscar > 0;

        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch      
        return bandera;
    }

    //model
//por:ing.Alexis Cadrasco Garcia
    public void adicionarSalarioMinimo(Salarios_Minimos salarioM) throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        try {
            pst = con.prepareStatement("INSERT INTO SALARIOS_MINIMOS values(S_SALARIOMINIMO.Nextval,?,?)");
            pst.setLong(1, salarioM.getVigencia());
            pst.setLong(2, salarioM.getValor());
            pst.executeUpdate();
        } finally {
            if (pst != null) {
                pst.close();
            }
        }
    }
    //modificado 01/12/2017

    public Salarios_Minimos buscarUltimoSalarioMinimo() throws SQLException {
        if (!hayConexion()) {
            throw new SQLException("SIN CONEXION");
        }
        PreparedStatement pst = null;
        ResultSet resultado;
        Salarios_Minimos sm = new Salarios_Minimos();
        String q = "SELECT  *  FROM Salarios_Minimos WHERE Id_Salario_Minimo = (SELECT max(ID_SALARIO_MINIMO)FROM Salarios_Minimos)";
        try {
            pst = con.prepareStatement(q);
            resultado = pst.executeQuery();
            while (resultado.next()) {

                sm.setId_salario_minimo(resultado.getInt("ID_SALARIO_MINIMO"));
                sm.setVigencia(resultado.getInt("VIGENCIA"));
                sm.setValor(resultado.getInt("VALOR"));

            }//fin del while
        } finally {
            if (pst != null) {
                pst.close();
            }
        }

        return sm;
    }
    //fin metodo BuscarUltimaVigenciaSalarioMinimo

    ///metodo listar clase de tramites {RNA-RNC-RNMA-RNRYS}
    public java.util.List<java.util.HashMap> listarClaseTramite() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<java.util.HashMap> reporte = new LinkedList<HashMap>();
        try {
            pst = con.prepareStatement("select codigo, nombre from parametros where Fk_Grupo=71 and Codigo in(1,2,3,4,5,10)");
            rst = pst.executeQuery();
            while (rst.next()) {
                ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap<String, String> hash = new java.util.HashMap<String, String>();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    hash.put(rsmd.getColumnName(i + 1), rst.getString(i + 1));
                }
                reporte.add(hash);
            }
        } catch (Exception e) {
            System.out.println("Error Listado de clase de tramites Debido a -->" + e);
            throw new SQLException("Error Listado de clase de tramites Debido a" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return reporte;
    }

    ///metodo listar clase de tramites {RNA-RNC-RNMA-RNRYS}
    public java.util.List<java.util.HashMap> listarTramitesAsociados(int id) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<java.util.HashMap> reporte = new LinkedList<HashMap>();
        try {
            pst = con.prepareStatement("select St.Fk_Tramite,Tra.Nombre\n"
                    + "from tramites tra \n"
                    + "inner join Sede_Tramites st on St.Fk_Tramite = Tra.Id_Tramite\n"
                    + "where tra.Clase_Tramite = ?");
            pst.setInt(1, id);
            rst = pst.executeQuery();
            while (rst.next()) {
                ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap<String, String> hash = new java.util.HashMap<String, String>();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    hash.put(rsmd.getColumnName(i + 1), rst.getString(i + 1));
                }
                reporte.add(hash);
            }
        } catch (Exception e) {
            System.out.println("Error Listando los tramites asociados a la clase Debido a -->" + e);
            throw new SQLException("Error Listando los tramites asociados a la clase Debido a" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return reporte;
    }

    ///metodo listar clase de tramites {RNA-RNC-RNMA-RNRYS}
    public java.util.List<java.util.HashMap> listarConceptosAsociados(int id) throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<java.util.HashMap> reporte = new LinkedList<HashMap>();
        try {
            pst = con.prepareStatement("select  Concep.Id_Concepto,Concep.Nombre ,Stc.Valor \n"
                    + "   from sede_tramite_conceptos stc\n"
                    + "   inner join tramites tra on tra.id_tramite = stc.fk_tramite\n"
                    + "   inner join conceptos concep on Concep.Id_Concepto = Stc.Fk_Concepto\n"
                    + "   where Stc.Fk_Tramite = ? and Stc.Fecha_Fin is null");
            pst.setInt(1, id);
            rst = pst.executeQuery();
            while (rst.next()) {
                ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap<String, String> hash = new java.util.HashMap<String, String>();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    hash.put(rsmd.getColumnName(i + 1), rst.getString(i + 1));
                }
                reporte.add(hash);
            }
        } catch (Exception e) {
            System.out.println("Error Listando los conceptos asociados a los tramites Debido a -->" + e);
            throw new SQLException("Error Listando los conceptos asociados a los tramites Debido a" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return reporte;
    }

    //metodo para actualizar la fecha fin de la vigencia
    public boolean ActualizarFechaFinVigencia(Date fecha, int fk_tramite, int fk_concepto) throws Exception {

        int insertar = 0;
        boolean bandera = false;
        String q = "update Sede_Tramite_Conceptos set Fecha_Fin = ? where FECHA_FIN is null and fk_tramite=? and Fk_Concepto=?";
        PreparedStatement pst = null;
        ResultSet resultado;
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        try {
            pst = con.prepareStatement(q);
            pst.setDate(1, fecha);
            pst.setInt(2, fk_tramite);
            pst.setInt(3, fk_concepto);
            insertar = pst.executeUpdate();
            bandera = insertar > 0;

        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch      
        return bandera;
    }

    //metodo para insertar datos en la tabla sede_tramites_conceptos 
    public boolean registrarSedeTramitesConceptos(int fk_concepto, int fk_tramite, int resolucion, java.sql.Date fecha, int valor, int sede, String usuario, Date fechaRegistro) throws Exception {

        int insertar = 0;
        boolean bandera = false;
        String q = "insert into Sede_Tramite_Conceptos values(S_SEDE_TRAMITE_CONCEPTOS.nextval,?,?,?,?,?,?,?,?,?,?)";
        PreparedStatement pst = null;
        ResultSet resultado;
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        try {
            pst = con.prepareStatement(q);
            pst.setInt(1, fk_concepto);
            pst.setDate(2, fechaRegistro);
            pst.setDate(3, null);
            pst.setInt(4, resolucion);
            pst.setDate(5, fecha);
            pst.setInt(6, valor);
            pst.setInt(7, sede);
            pst.setInt(8, fk_tramite);
            pst.setString(9, usuario);
            pst.setDate(10, fechaRegistro);
            insertar = pst.executeUpdate();
            bandera = insertar > 0;

        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch      
        return bandera;
    }

    //metodo para actualizar la vigencia de los consecutivos
    public boolean ActualizarConsecutivoVigencia(int year) throws Exception {

        int insertar = 0;
        boolean bandera = false;
        String q = "update consecutivos set Vigencia=?";
        PreparedStatement pst = null;
        ResultSet resultado;
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        try {
            pst = con.prepareStatement(q);
            pst.setInt(1, year);
            insertar = pst.executeUpdate();
            bandera = insertar > 0;

        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch      
        return bandera;
    }

    //método para buscar la vigencia actual de la tabla consecutivos
    public int buscarVigenciaConsecutivo() {

        int vigencia = 0;
        PreparedStatement pst = null;
        ResultSet resultado;
        try {
            String q = "SELECT  vigencia  FROM consecutivos WHERE Id_consecutivo = (SELECT max(Id_consecutivo)FROM consecutivos)";
            pst = con.prepareStatement(q);
            resultado = pst.executeQuery();
            //para cada fila, construye un objeto Producto
            //y lo añade a la coleccion
            while (resultado.next()) {

                vigencia = (resultado.getInt("vigencia"));//

            }//fin del while         
        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch
        finally {
            return vigencia;
        }//fin del finally
    }

    //metodo para insertar datos en la tabla sede_tramites_conceptos 
    public boolean registrarDiasFestivos(String fecha, String descripcion, int sede) throws Exception {

        int insertar = 0;
        boolean bandera = false;
        String q = "insert into Calendario_Festivos values(S_CALENDARIO_FESTIVOS.Nextval,?,to_date(?,'dd/MM/yy'),?)";
        PreparedStatement pst = null;
        ResultSet resultado;
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        try {
            pst = con.prepareStatement(q);
            pst.setInt(1, sede);
            pst.setString(2, fecha);
            pst.setString(3, descripcion);
            insertar = pst.executeUpdate();
            bandera = insertar > 0;

        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch      
        return bandera;
    }

    //método para buscar los valores de la retencion por placa del vehiculo
    public int[] buscarValoresRetencionPorPlaca(String placa) {

        int valoresRetencion[] = new int[3];
        PreparedStatement pst = null;
        ResultSet resultado;
        try {
            String q = "select Vr.Valor_Avaluo, Vr.Valor_Retencion, Vr.Fk_Vehiculo\n"
                    + "from Valores_Retencion vr\n"
                    + "inner join vehiculos vh on Vh.Id_Vehiculo = Vr.Fk_Vehiculo\n"
                    + "where Vh.Placa = ?";
            pst = con.prepareStatement(q);
            pst.setString(1, placa);
            resultado = pst.executeQuery();
            //para cada fila, construye un objeto Producto
            //y lo añade a la coleccion
            while (resultado.next()) {

                valoresRetencion[0] = (resultado.getInt("Valor_Avaluo"));//
                valoresRetencion[1] = (resultado.getInt("Valor_Retencion"));//
                valoresRetencion[2] = (resultado.getInt("Fk_Vehiculo"));//

            }//fin del while         
        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch
        finally {
            return valoresRetencion;
        }//fin del finally
    }

    //metodo para actualizar la vigencia de los consecutivos
    public boolean ActualizarValoresRetencion(int avaluo, int retencion, int fk_vehiculo) throws Exception {

        int insertar = 0;
        boolean bandera = false;
        String q = "Update Valores_Retencion set Valor_Avaluo=?, Valor_Retencion=? where Fk_Vehiculo=?";
        PreparedStatement pst = null;
        ResultSet resultado;
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        try {
            pst = con.prepareStatement(q);
            pst.setInt(1, avaluo);
            pst.setInt(2, retencion);
            pst.setInt(3, fk_vehiculo);
            insertar = pst.executeUpdate();
            bandera = insertar > 0;

        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch      
        return bandera;
    }

    /*DIC 12/2017 */
    public ArrayList<Concepto> listarConceptosSedeTramiteConcepto(int fk_tramite, int claseTramite) {
        ArrayList<Concepto> usua = new ArrayList<Concepto>();
        ResultSet resultado;
        PreparedStatement pst = null;
        try {
            String q = "Select  Distinct Stc.Fk_Concepto,Co.Nombre\n"
                    + "From  Sede_Tramite_Conceptos stc\n"
                    + "inner join tramites tra on Tra.Id_Tramite = Stc.Fk_Tramite\n"
                    + "inner join Sede_Tramites st on St.Fk_Tramite = Tra.Id_Tramite\n"
                    + "inner join conceptos co on Co.Id_Concepto = Stc.Fk_Concepto\n"
                    + "where Not Stc.Fk_Concepto In (Select stc.Fk_Concepto From Sede_Tramite_Conceptos stc where stc.Fk_Tramite = ? and stc.Fecha_Fin is null) \n"
                    + "and Tra.Clase_Tramite = ? ";

            pst = con.prepareStatement(q);
            pst.setInt(1, fk_tramite);
            pst.setInt(2, claseTramite);
            resultado = pst.executeQuery();
            //para cada fila, construye un objeto Producto
            //y lo añade a la coleccion
            while (resultado.next()) {

                Concepto us = new Concepto();
                us.setId_concepto(resultado.getInt("Fk_Concepto"));
                us.setNombre(resultado.getString("Nombre").trim());
                usua.add(us);

            }//fin del while

        } catch (Exception e) {
            e.printStackTrace();
        }//fin del catch
        finally {
            return usua;
        }//fin del finally
    }

    //método para buscar concepto en la tabla sede tramites concepto
    public String buscarNombreConcepto(int id_concepto) {

        String nombre = "";
        PreparedStatement pst = null;
        ResultSet resultado;
        try {
            String q = "select nombre from conceptos where Id_Concepto = ?";
            pst = con.prepareStatement(q);
            pst.setInt(1, id_concepto);
            resultado = pst.executeQuery();
            //para cada fila, construye un objeto Producto
            //y lo añade a la coleccion
            while (resultado.next()) {

                nombre = (resultado.getString("nombre"));//

            }//fin del while         
        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch
        finally {
            return nombre;
        }//fin del finally
    }

    ///DIC 13 2017
    //metodo para listar las clase de conceptos 
    public java.util.List<java.util.HashMap> listarClaseConcepto() throws SQLException {
        PreparedStatement pst = null;
        ResultSet rst = null;
        java.util.List<java.util.HashMap> reporte = new LinkedList<HashMap>();
        try {
            pst = con.prepareStatement("SELECT codigo,nombre FROM PARAMETROS WHERE FK_GRUPO = 25 and not codigo in(1)");
            rst = pst.executeQuery();
            while (rst.next()) {
                ResultSetMetaData rsmd = rst.getMetaData();
                java.util.HashMap<String, String> hash = new java.util.HashMap<String, String>();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    hash.put(rsmd.getColumnName(i + 1), rst.getString(i + 1));
                }
                reporte.add(hash);
            }
        } catch (Exception e) {
            System.out.println("Error Listando la clase de conceptos Debido a -->" + e);
            throw new SQLException("Error Listando la clase de conceptos Debido a" + e);
        } finally {
            if (pst != null) {
                pst.close();
            }
            if (rst != null) {
                rst.close();
            }
        }
        return reporte;
    }

    ////Diciembre 18 del 2017
    //metodo para insertar un nuevo concepto
    public boolean registrarConcepto(String nombre, String observacion, int clase) throws Exception {

        int insertar = 0;
        boolean bandera = false;
        String q = "insert into Conceptos values(S_CONCEPTOS.Nextval,?,?,2,?,1)";
        PreparedStatement pst = null;
        ResultSet resultado;
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        try {
            pst = con.prepareStatement(q);
            pst.setString(1, nombre);
            pst.setString(2, observacion);
            pst.setInt(3, clase);
            insertar = pst.executeUpdate();
            bandera = insertar > 0;

        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch      
        return bandera;
    }

    //metodo para insertar un nuevo concepto en sede concepto
    public boolean registrarSedeConcepto(int fk_sede, int fk_concepto, Date fecha) throws Exception {

        int insertar = 0;
        boolean bandera = false;
        String q = "insert into Sede_Conceptos values(S_SEDE_CONCEPTOS.Nextval,?,?,?,null)";
        PreparedStatement pst = null;
        ResultSet resultado;
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        try {
            pst = con.prepareStatement(q);
            pst.setInt(1, fk_sede);
            pst.setInt(2, fk_concepto);
            pst.setDate(3, fecha);
            insertar = pst.executeUpdate();
            bandera = insertar > 0;

        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch      
        return bandera;
    }

    //metodo para insertar un nuevo concepto en Atributos_conceptos
/*   public boolean registrarAtributosConcepto(int fk_sede, int fk_concepto,String fecha) throws Exception {

        int insertar = 0;
        boolean bandera = false;
        String q = "insert into Sede_Conceptos values(S_SEDE_CONCEPTOS.Nextval,?,?,?,null)";
        PreparedStatement pst = null;
        ResultSet resultado;
        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta");
        }
        try {
            pst = con.prepareStatement(q);   
            pst.setInt(1, fk_sede);
            pst.setInt(2, fk_concepto);
            pst.setString(3, fecha);           
            insertar = pst.executeUpdate();
            bandera = insertar > 0;

        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch      
        return bandera;
    }*/
    //método para buscar concepto en la tabla sede tramites concepto
    public int buscarIdConcepto(String nombre) {

        int idConcepto = 0;
        PreparedStatement pst = null;
        ResultSet resultado;
        try {
            String q = "select Id_Concepto from conceptos where nombre = ?";
            pst = con.prepareStatement(q);
            pst.setString(1, nombre);
            resultado = pst.executeQuery();
            //para cada fila, construye un objeto Producto
            //y lo añade a la coleccion
            while (resultado.next()) {

                idConcepto = (resultado.getInt("Id_Concepto"));//

            }//fin del while         
        }//fin del try
        catch (Exception e) {
            e.printStackTrace();
        }//fin del catch
        finally {
            return idConcepto;
        }//fin del finally
    }
    
    /*Ing. Alexis Cadrasco Garcia
    Actividad: Actualizacion reporte mclc
    Metodo: Lista las carroceris filtrados por el codigo de la clase
    */
    
    public LinkedList listaCarroceria(long fk_clase) throws SQLException {

        if (!hayConexion()) {
            throw new SQLException(" No existe conexion abierta ");
        }

        PreparedStatement pst = null;
        ResultSet rst = null;
        LinkedList listaLineas = new LinkedList();

        try {

            pst = con.prepareStatement("SELECT \n"
                    + "PAR.*\n"
                    + "FROM(SELECT PA.NOMBRE ,\n"
                    + "PA.NOMBRE_CORTO ,\n"
                    + "PA.CODIGO\n"
                    + "FROM PARAMETROS PA\n"
                    + "WHERE PA.FK_GRUPO=1)A1\n"
                    + "INNER JOIN PARAMETROS PAR ON PAR.NOMBRE_CORTO = A1.CODIGO AND PAR.FK_GRUPO = 2 AND PAR.NOMBRE_CORTO = ? \n"
                    + "ORDER BY PAR.NOMBRE ASC");
            pst.setLong(1, fk_clase);
            rst = pst.executeQuery();

            while (rst.next()) {

                listaLineas.add(Parametro.load(rst));

            }

        } catch (Exception e) {

            System.out.println(" Error " + e);
            throw new SQLException(" Error! no se ha podido listar las lineas ");

        } finally {

            if (pst != null) {
                pst.close();
                pst = null;

            }
            if (rst != null) {
                rst.close();
                rst = null;
            }
        }

        return listaLineas;
    }


}// FIN DE MODEL

